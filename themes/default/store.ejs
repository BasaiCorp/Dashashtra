<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta name="description" content="Resource Store - Purchase additional resources for your servers">
	<meta name="theme-color" content="#0f0f12">
	
	<!-- Security Headers -->
	<meta http-equiv="Content-Security-Policy" content="default-src 'self' https: 'unsafe-inline' 'unsafe-eval'; img-src 'self' https: data:; font-src 'self' https: data:;">
	<meta http-equiv="X-Content-Type-Options" content="nosniff">
	<meta http-equiv="X-Frame-Options" content="SAMEORIGIN">
	<meta http-equiv="X-XSS-Protection" content="1; mode=block">
	
	<title><%= extra.store.title %></title>
	<link rel="icon" type="image/png" href="./assets/img/SriyanNodes_Logo.gif"/>
	
	<!-- Fonts and Icons -->
	<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
	
	<!-- Tailwind CSS -->
	<script src="https://cdn.tailwindcss.com"></script>
	<script>
		tailwind.config = {
			darkMode: 'class',
			theme: {
				extend: {
					fontFamily: {
						sans: ['Poppins', 'sans-serif'],
					},
					colors: {
						primary: {
							50: '#eef2ff',
							100: '#e0e7ff',
							200: '#c7d2fe',
							300: '#a5b4fc',
							400: '#818cf8',
							500: '#6366f1',
							600: '#4f46e5',
							700: '#4338ca',
							800: '#3730a3',
							900: '#312e81',
							950: '#1e1b4b',
						},
						dark: {
							base: '#0f0f12',
							light: '#1a1a21',
							lighter: '#24242e',
							card: '#1a1a21'
						}
					},
					animation: {
						'fade-in': 'fadeIn 0.5s ease-in-out',
						'pulse-slow': 'pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite',
						'float': 'float 3s ease-in-out infinite',
					},
					keyframes: {
						fadeIn: {
							'0%': { opacity: '0' },
							'100%': { opacity: '1' },
						},
						float: {
							'0%, 100%': { transform: 'translateY(0)' },
							'50%': { transform: 'translateY(-10px)' },
						}
					},
					boxShadow: {
						'glow': '0 0 15px rgba(99, 102, 241, 0.5)',
						'card': '0 8px 24px rgba(0, 0, 0, 0.12)',
					}
				}
			}
		}
	</script>
	
	<style>
		body {
			background-color: #0f0f12;
			color: #f5f5f7;
			font-family: 'Poppins', sans-serif;
		}
		
		/* Custom scrollbar */
		::-webkit-scrollbar {
			width: 8px;
			height: 8px;
		}
		
		::-webkit-scrollbar-track {
			background: #1e1e24;
		}
		
		::-webkit-scrollbar-thumb {
			background: #3a3a43;
			border-radius: 4px;
		}
		
		::-webkit-scrollbar-thumb:hover {
			background: #4a4a55;
		}
		
		/* Custom styles */
		.sidebar {
			background-color: #161618;
			border-right: 1px solid #2d2d35;
		}
		
		.main-content {
			background-color: #0f0f12;
		}
		
		.bg-dark-card {
			background-color: #1a1a1f;
		}
		
		.bg-dark-lighter {
			background-color: #202026;
		}
		
		.menu-item.active {
			background-color: rgba(99, 102, 241, 0.1);
			color: #fff;
		}
		
		.menu-item.active i {
			color: #6366f1;
		}
		
		.glass-card {
			background: rgba(26, 26, 31, 0.7);
			backdrop-filter: blur(10px);
			-webkit-backdrop-filter: blur(10px);
		}
		
		.btn-primary {
			background-color: #6366f1;
			border-radius: 0.5rem;
			padding: 0.5rem 1rem;
			transition: all 0.3s ease;
		}
		
		.btn-primary:hover {
			background-color: #4f46e5;
			transform: translateY(-2px);
			box-shadow: 0 4px 12px rgba(99, 102, 241, 0.2);
		}
		
		.gradient-border {
			position: relative;
			border-radius: 0.75rem;
			overflow: hidden;
		}
		
		.gradient-border::before {
			content: "";
			position: absolute;
			inset: 0;
			border-radius: 0.75rem;
			padding: 1px;
			background: linear-gradient(to right, #6366f1, #8b5cf6);
			-webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
			mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
			-webkit-mask-composite: xor;
			mask-composite: exclude;
			pointer-events: none;
		}
		
		.animate-fade-in {
			animation: fadeIn 0.6s ease-out;
		}
		
		.animate-slide-up {
			animation: slideUp 0.5s ease-out;
		}
		
		@keyframes fadeIn {
			from { opacity: 0; }
			to { opacity: 1; }
		}
		
		@keyframes slideUp {
			from { transform: translateY(20px); opacity: 0; }
			to { transform: translateY(0); opacity: 1; }
		}
	</style>
</head>
<body class="min-h-screen">
	<!-- Notification Container -->
	<div id="notification-container" class="fixed top-4 right-4 z-50 w-80 max-w-full space-y-4"></div>
	
	<%
		const userData = {
			id: userinfo.id,
			username: userinfo.username || userinfo.email.split('@')[0],
			email: userinfo.email,
			isAdmin: typeof req.session !== 'undefined' ? req.session.isAdmin : false
		};
	%>

	<!-- Navbar -->
	<nav class="navbar fixed w-full h-16 z-50 px-4 py-2.5 flex items-center justify-between bg-dark-base/80 backdrop-blur-lg border-b border-gray-800">
		<!-- Left side - Logo and Brand -->
		<div class="flex items-center">
			<a href="/" class="flex items-center group">
				<div class="h-10 w-10 mr-3 rounded-full overflow-hidden transition-all duration-300 group-hover:shadow-glow">
					<img src="/assets/img/SriyanNodes_Logo.gif" class="h-full w-full object-cover" alt="Sriyan Nodes Logo">
				</div>
				<div class="flex flex-col">
					<span class="self-center text-xl font-bold text-white">Sriyan Nodes</span>
					<span class="text-xs text-indigo-300">Premium Game Hosting</span>
				</div>
			</a>
		</div>

		<!-- Center - Search Bar -->
		<div class="hidden md:flex items-center flex-1 max-w-xl mx-8">
			<div class="relative w-full">
				<input type="text" placeholder="Search servers..." class="w-full px-4 py-2 bg-dark-lighter rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500">
				<button class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white">
					<i class="fas fa-search"></i>
				</button>
			</div>
		</div>

		<!-- Right side - User Menu and Notifications -->
		<div class="flex items-center gap-4">
			<!-- Notifications -->
			<div class="relative">
				<button class="p-2 text-gray-400 hover:text-white transition-colors duration-200">
					<i class="fas fa-bell"></i>
					<span class="absolute top-0 right-0 w-2 h-2 bg-red-500 rounded-full"></span>
				</button>
			</div>

			<!-- User Profile Dropdown -->
			<div class="relative inline-block">
				<button id="dropdownBtn" class="flex items-center px-4 py-2 text-sm font-medium text-white rounded-lg bg-dark-lighter hover:bg-primary-700 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-opacity-50">
					<div class="w-8 h-8 rounded-full bg-primary-500/20 flex items-center justify-center mr-2">
						<i class="fas fa-user text-primary-400"></i>
					</div>
					<span class="mr-2"><%= userData.username %></span>
					<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
					</svg>
				</button>
				<div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-64 bg-dark-lighter rounded-lg shadow-lg overflow-hidden z-50 border border-gray-700">
					<div class="p-4 border-b border-gray-700">
						<div class="flex items-center">
							<div class="w-10 h-10 rounded-full bg-primary-500/20 flex items-center justify-center mr-3">
								<i class="fas fa-user text-primary-400"></i>
							</div>
							<div>
								<p class="text-sm font-medium text-white"><%= userData.username %></p>
								<p class="text-xs text-gray-400"><%= userData.email %></p>
							</div>
						</div>
					</div>
					<ul class="py-1 text-sm text-gray-200">
						<li>
							<a href="/settings" class="flex items-center px-4 py-2 hover:bg-dark-base hover:text-primary-400 transition-colors duration-200">
								<i class="fas fa-cog mr-2"></i> Settings
							</a>
						</li>
						<li>
							<a href="/profile" class="flex items-center px-4 py-2 hover:bg-dark-base hover:text-primary-400 transition-colors duration-200">
								<i class="fas fa-user-circle mr-2"></i> Profile
							</a>
						</li>
						<% if (userData.isAdmin) { %>
						<li>
							<a href="/admin" class="flex items-center px-4 py-2 hover:bg-dark-base hover:text-primary-400 transition-colors duration-200">
								<i class="fas fa-shield-alt mr-2"></i> Admin Panel
							</a>
						</li>
						<% } %>
						<li class="border-t border-gray-700 mt-1">
							<a href="/auth/logout" class="flex items-center px-4 py-2 hover:bg-dark-base text-red-400 hover:text-red-300 transition-colors duration-200">
								<i class="fas fa-sign-out-alt mr-2"></i> Logout
							</a>
						</li>
					</ul>
				</div>
			</div>

			<!-- Mobile Menu Button -->
			<button id="mobileMenuBtn" class="md:hidden p-2 text-gray-400 hover:text-white transition-colors duration-200">
				<i class="fas fa-bars"></i>
			</button>
		</div>
	</nav>

	<!-- Mobile Search Bar -->
	<div id="mobileSearch" class="md:hidden fixed top-16 left-0 right-0 p-4 bg-dark-base border-b border-gray-800 z-40 hidden">
		<div class="relative">
			<input type="text" placeholder="Search servers..." class="w-full px-4 py-2 bg-dark-lighter rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500">
			<button class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white">
				<i class="fas fa-search"></i>
			</button>
		</div>
	</div>

	<div class="flex h-screen pt-16">
		<!-- Sidebar -->
		<aside id="sidebar" class="fixed left-0 top-16 h-full z-10 w-64 transition-transform -translate-x-full sm:translate-x-0">
			<div class="h-full px-3 pb-4 overflow-y-auto sidebar">
				<ul class="space-y-1 pt-4 font-medium">
					<li>
						<a href="/dashboard" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-tachometer-alt w-5 h-5 text-gray-400 transition duration-75 group-hover:text-primary-400"></i>
							<span class="ml-3">Dashboard</span>
						</a>
					</li>
					<li>
						<a href="/servers" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-server w-5 h-5 text-gray-400 transition duration-75 group-hover:text-primary-400"></i>
							<span class="ml-3">Servers</span>
						</a>
					</li>
					<li>
						<a href="/store" class="menu-item flex items-center p-3 text-white rounded-lg active">
							<i class="fas fa-shopping-cart w-5 h-5 text-primary-400 transition duration-75"></i>
							<span class="ml-3">Store</span>
						</a>
					</li>
					<li>
						<a href="/afk" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-coins w-5 h-5 text-gray-400 transition duration-75 group-hover:text-primary-400"></i>
							<span class="ml-3">AFK Page</span>
						</a>
					</li>
					<li>
						<a href="/redeem" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-gift w-5 h-5 text-gray-400 transition duration-75 group-hover:text-primary-400"></i>
							<span class="ml-3">Redeem</span>
						</a>
					</li>
					<li>
						<a href="/earn" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-gem w-5 h-5 text-gray-400 transition duration-75 group-hover:text-primary-400"></i>
							<span class="ml-3">Earn</span>
						</a>
					</li>
					<li>
						<a href="/leaderboard" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-trophy w-5 h-5 text-gray-400 transition duration-75 group-hover:text-primary-400"></i>
							<span class="ml-3">Leaderboard</span>
						</a>
					</li>
					<li>
						<a href="/settings" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-cog w-5 h-5 text-gray-400 transition duration-75 group-hover:text-primary-400"></i>
							<span class="ml-3">Settings</span>
						</a>
					</li>
					<li>
						<a href="<%= settings.pterodactyl.domain %>" target="_blank" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-external-link-alt w-5 h-5 text-gray-400 transition duration-75 group-hover:text-primary-400"></i>
							<span class="ml-3">Panel</span>
						</a>
					</li>
					<% if (userData.isAdmin) { %>
					<li class="mt-6 pt-6 border-t border-gray-700">
						<a href="/admin" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-shield-alt w-5 h-5 text-red-400 transition duration-75 group-hover:text-red-300"></i>
							<span class="ml-3">Admin Panel</span>
						</a>
					</li>
					<% } %>
				</ul>
			</div>
		</aside>
		
		<!-- Mobile menu button -->
		<button id="toggleSidebar" type="button" class="fixed bottom-4 right-4 z-20 sm:hidden inline-flex items-center p-3 text-sm font-medium text-white bg-primary-600 rounded-full hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500">
			<i id="sidebarIcon" class="fas fa-bars"></i>
		</button>

		<!-- Main Content -->
		<div class="p-4 sm:ml-64 pt-5 w-full main-content">
			<div class="container mx-auto px-4 py-8">
				<!-- Header -->
				<div class="flex items-center justify-between mb-8">
					<div>
						<h1 class="text-3xl font-bold text-white">Resource Store</h1>
						<p class="text-gray-400 mt-2">Purchase additional resources for your servers</p>
					</div>
					<div class="flex items-center space-x-4">
						<div class="bg-dark-light px-4 py-2 rounded-lg">
							<span class="text-sm text-gray-400">Balance</span>
							<div class="flex items-center">
								<i class="fas fa-coins text-yellow-400 mr-2"></i>
								<span class="text-lg font-semibold text-white user-balance store-balance"><%= userinfo?.coins || 0 %></span>
							</div>
						</div>
						<a href="/earn" class="bg-primary-600 hover:bg-primary-700 px-4 py-2 rounded-lg text-white font-medium transition-colors duration-200">
							<i class="fas fa-plus mr-2"></i> Earn Coins
						</a>
					</div>
				</div>

				<!-- Resource Packages Grid -->
				<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
					<!-- RAM Package -->
					<div class="bg-dark-light rounded-lg p-6 hover:bg-dark-lighter transition-colors duration-200" data-resource="ram">
						<div class="flex items-center justify-between mb-4">
							<div class="p-3 rounded-lg bg-blue-500/10">
								<i class="fas fa-memory text-2xl text-blue-400"></i>
							</div>
							<span class="px-2 py-1 text-xs font-semibold text-blue-400 bg-blue-500/10 rounded-full">Most Popular</span>
						</div>
						<h3 class="text-xl font-semibold text-white mb-2">RAM Package</h3>
						<p class="text-gray-400 text-sm mb-4">Increase your server's memory capacity for better performance.</p>
						<div class="space-y-2 mb-6">
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-green-400 mr-2"></i>
								<span class="text-gray-300">1024 MB RAM</span>
							</div>
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-green-400 mr-2"></i>
								<span class="text-gray-300">Instant Activation</span>
							</div>
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-green-400 mr-2"></i>
								<span class="text-gray-300">Permanent Upgrade</span>
							</div>
						</div>
						<div class="flex items-center justify-between">
							<div>
								<span class="text-sm text-gray-400">Price</span>
								<div class="flex items-center">
									<i class="fas fa-coins text-yellow-400 mr-1"></i>
									<span class="text-xl font-semibold text-white">100</span>
								</div>
							</div>
							<button onclick="purchase('ram')" class="bg-primary-600 hover:bg-primary-700 px-4 py-2 rounded-lg text-white font-medium transition-colors duration-200">
								Purchase
							</button>
						</div>
					</div>

					<!-- Disk Package -->
					<div class="bg-dark-light rounded-lg p-6 hover:bg-dark-lighter transition-colors duration-200" data-resource="disk">
						<div class="flex items-center justify-between mb-4">
							<div class="p-3 rounded-lg bg-green-500/10">
								<i class="fas fa-hdd text-2xl text-green-400"></i>
							</div>
							<span class="px-2 py-1 text-xs font-semibold text-green-400 bg-green-500/10 rounded-full">Best Value</span>
						</div>
						<h3 class="text-xl font-semibold text-white mb-2">Disk Package</h3>
						<p class="text-gray-400 text-sm mb-4">Expand your server's storage capacity for more files and data.</p>
						<div class="space-y-2 mb-6">
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-green-400 mr-2"></i>
								<span class="text-gray-300">2048 MB Storage</span>
							</div>
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-green-400 mr-2"></i>
								<span class="text-gray-300">Instant Activation</span>
							</div>
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-green-400 mr-2"></i>
								<span class="text-gray-300">Permanent Upgrade</span>
							</div>
						</div>
						<div class="flex items-center justify-between">
							<div>
								<span class="text-sm text-gray-400">Price</span>
								<div class="flex items-center">
									<i class="fas fa-coins text-yellow-400 mr-1"></i>
									<span class="text-xl font-semibold text-white">125</span>
								</div>
							</div>
							<button onclick="purchase('disk')" class="bg-primary-600 hover:bg-primary-700 px-4 py-2 rounded-lg text-white font-medium transition-colors duration-200">
								Purchase
							</button>
						</div>
					</div>

					<!-- CPU Package -->
					<div class="bg-dark-light rounded-lg p-6 hover:bg-dark-lighter transition-colors duration-200" data-resource="cpu">
						<div class="flex items-center justify-between mb-4">
							<div class="p-3 rounded-lg bg-purple-500/10">
								<i class="fas fa-microchip text-2xl text-purple-400"></i>
							</div>
							<span class="px-2 py-1 text-xs font-semibold text-purple-400 bg-purple-500/10 rounded-full">High Performance</span>
						</div>
						<h3 class="text-xl font-semibold text-white mb-2">CPU Package</h3>
						<p class="text-gray-400 text-sm mb-4">Boost your server's processing power for better performance.</p>
						<div class="space-y-2 mb-6">
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-green-400 mr-2"></i>
								<span class="text-gray-300">100% CPU Power</span>
							</div>
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-green-400 mr-2"></i>
								<span class="text-gray-300">Instant Activation</span>
							</div>
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-green-400 mr-2"></i>
								<span class="text-gray-300">Permanent Upgrade</span>
							</div>
						</div>
						<div class="flex items-center justify-between">
							<div>
								<span class="text-sm text-gray-400">Price</span>
								<div class="flex items-center">
									<i class="fas fa-coins text-yellow-400 mr-1"></i>
									<span class="text-xl font-semibold text-white">150</span>
								</div>
							</div>
							<button onclick="purchase('cpu')" class="bg-primary-600 hover:bg-primary-700 px-4 py-2 rounded-lg text-white font-medium transition-colors duration-200">
								Purchase
							</button>
						</div>
					</div>

					<!-- Server Slot Package -->
					<div class="bg-dark-light rounded-lg p-6 hover:bg-dark-lighter transition-colors duration-200" data-resource="slot">
						<div class="flex items-center justify-between mb-4">
							<div class="p-3 rounded-lg bg-yellow-500/10">
								<i class="fas fa-server text-2xl text-yellow-400"></i>
							</div>
							<span class="px-2 py-1 text-xs font-semibold text-yellow-400 bg-yellow-500/10 rounded-full">Expansion</span>
						</div>
						<h3 class="text-xl font-semibold text-white mb-2">Server Slot Package</h3>
						<p class="text-gray-400 text-sm mb-4">Create an additional server to host more applications.</p>
						<div class="space-y-2 mb-6">
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-green-400 mr-2"></i>
								<span class="text-gray-300">1 Additional Server</span>
							</div>
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-green-400 mr-2"></i>
								<span class="text-gray-300">Instant Activation</span>
							</div>
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-green-400 mr-2"></i>
								<span class="text-gray-300">Permanent Upgrade</span>
							</div>
						</div>
						<div class="flex items-center justify-between">
							<div>
								<span class="text-sm text-gray-400">Price</span>
								<div class="flex items-center">
									<i class="fas fa-coins text-yellow-400 mr-1"></i>
									<span class="text-xl font-semibold text-white">200</span>
								</div>
							</div>
							<button onclick="purchase('slot')" class="bg-primary-600 hover:bg-primary-700 px-4 py-2 rounded-lg text-white font-medium transition-colors duration-200">
								Purchase
							</button>
						</div>
					</div>
				</div>

				<!-- Help Section -->
				<div class="bg-dark-light rounded-lg p-6">
					<div class="flex items-start space-x-4">
						<div class="p-3 rounded-lg bg-primary-500/10">
							<i class="fas fa-question-circle text-2xl text-primary-400"></i>
						</div>
						<div>
							<h3 class="text-lg font-semibold text-white mb-2">Need Help?</h3>
							<p class="text-gray-400 mb-4">Here are some common questions about our resource packages:</p>
							<div class="space-y-4">
								<div>
									<h4 class="text-sm font-semibold text-white mb-1">How do I purchase resources?</h4>
									<p class="text-sm text-gray-400">Simply click the "Purchase" button on any package. The resources will be instantly added to your account.</p>
								</div>
								<div>
									<h4 class="text-sm font-semibold text-white mb-1">Are the upgrades permanent?</h4>
									<p class="text-sm text-gray-400">Yes, all resource upgrades are permanent and will remain on your account indefinitely.</p>
								</div>
								<div>
									<h4 class="text-sm font-semibold text-white mb-1">How do I earn coins?</h4>
									<p class="text-sm text-gray-400">Click the "Earn Coins" button to learn about various ways to earn coins on our platform.</p>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<script>
		document.addEventListener('DOMContentLoaded', function() {
			// Fetch resources on page load
			fetchResources();
			
			// Dropdown menu toggle
			const dropdownBtn = document.getElementById('dropdownBtn');
			const dropdownMenu = document.getElementById('dropdownMenu');
			
			if (dropdownBtn && dropdownMenu) {
				dropdownBtn.addEventListener('click', () => {
					dropdownMenu.classList.toggle('hidden');
				});
				
				// Close dropdown when clicking outside
				document.addEventListener('click', (e) => {
					if (!dropdownBtn.contains(e.target) && !dropdownMenu.contains(e.target)) {
						dropdownMenu.classList.add('hidden');
					}
				});
			}
			
			// Mobile menu toggle
			const mobileMenuBtn = document.getElementById('mobileMenuBtn');
			const mobileSearch = document.getElementById('mobileSearch');
			const sidebar = document.getElementById('sidebar');
			
			if (mobileMenuBtn) {
				mobileMenuBtn.addEventListener('click', () => {
					if (mobileSearch) mobileSearch.classList.toggle('hidden');
					if (sidebar) sidebar.classList.toggle('-translate-x-full');
				});
			}
			
			// Toggle sidebar on small screens
			const toggleSidebar = document.getElementById('toggleSidebar');
			const sidebarIcon = document.getElementById('sidebarIcon');
			
			if (toggleSidebar && sidebar && sidebarIcon) {
				toggleSidebar.addEventListener('click', () => {
					sidebar.classList.toggle('-translate-x-full');
					const isClosed = sidebar.classList.contains('-translate-x-full');
					sidebarIcon.classList = isClosed ? 'fas fa-bars' : 'fas fa-times';
				});
			}
			
			// Fetch user balance periodically
			fetchUserBalance();
			setInterval(fetchUserBalance, 30000); // Every 30 seconds
		});
		
		// Fetch user's current balance
		async function fetchUserBalance() {
			try {
				const response = await fetch('/api/earn/balance');
				if (!response.ok) {
					console.error('Failed to fetch balance:', response.status);
					return;
				}
				
				const data = await response.json();
				
				if (data.success) {
					const balanceElements = document.querySelectorAll('.user-balance, .store-balance');
					balanceElements.forEach(element => {
						element.textContent = data.balance;
					});
				}
			} catch (error) {
				console.error('Error fetching balance:', error);
			}
		}
		
		// Fetch resources
		async function fetchResources() {
			try {
				const response = await fetch('/api/store/resources');
				if (!response.ok) {
					showNotification('Error', 'Failed to load resources');
					return;
				}
				
				const data = await response.json();
				
				if (data.success) {
					// Existing code here...
                    // Rest of the function remains unchanged
				}
			} catch (error) {
				console.error('Error fetching resources:', error);
				showNotification('Error', 'Failed to load resources');
			}
		}
		
		// Purchase function
		function purchase(resourceType) {
			console.log(`Attempting to purchase ${resourceType}...`);
			
			// Show loading indicator
			const button = event.target.closest('button');
			const originalText = button.innerHTML;
			button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Processing...';
			button.disabled = true;
			
			// Perform purchase
			purchaseResource(resourceType)
				.then(() => {
					// Reset button after purchase (success case handled in purchaseResource)
					setTimeout(() => {
						button.innerHTML = originalText;
						button.disabled = false;
					}, 1000);
				})
				.catch(error => {
					// Handle error and reset button
					console.error('Purchase error:', error);
					showNotification('Error', 'Failed to process purchase');
					button.innerHTML = originalText;
					button.disabled = false;
				});
		}
		
		// Purchase resource
		async function purchaseResource(resourceId, amount = 1) {
			try {
				console.log(`Sending purchase request for ${resourceId}, amount: ${amount}`);
				
				const response = await fetch('/api/store/purchase', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({ resourceId, amount })
				});
				
				console.log('Purchase response status:', response.status);
				const data = await response.json();
				console.log('Purchase response data:', data);
				
				if (!response.ok) {
					showNotification('Error', data.error || 'Failed to purchase resource');
					return;
				}
				
				if (data.success) {
					// Update balance display
					const balanceElements = document.querySelectorAll('.user-balance, .store-balance');
					balanceElements.forEach(element => {
						element.textContent = data.newBalance;
					});
					
					// Update resources display
					updateResourcesDisplay(data.resources);
					
					// Show success message with animation
					showNotification('Success', `Purchase successful! New balance: ${data.newBalance} credits`);
					
					// Add visual feedback
					const resourceCard = document.querySelector(`[data-resource="${resourceId}"]`);
					if (resourceCard) {
						resourceCard.classList.add('border-green-500');
						setTimeout(() => {
							resourceCard.classList.remove('border-green-500');
						}, 2000);
					}
				} else {
					showNotification('Error', data.error || 'Failed to purchase resource');
				}
			} catch (error) {
				console.error('Error purchasing resource:', error);
				showNotification('Error', 'Failed to process purchase');
				throw error; // Re-throw for the purchase function to catch
			}
		}
		
		// Function to show notifications
		function showNotification(title, message) {
			const notificationContainer = document.getElementById('notification-container');
			if (!notificationContainer) {
				console.error('Notification container not found');
				return;
			}
			
			const notification = document.createElement('div');
			notification.className = 'notification flex items-start p-4 mb-4 bg-dark-lighter rounded-lg border border-gray-700 shadow-lg animate-fade-in';
			
			const iconClass = title.toLowerCase().includes('error') ? 'fa-times-circle text-red-500' : 'fa-check-circle text-green-500';
			
			notification.innerHTML = `
				<div class="flex-shrink-0 mr-3">
					<i class="fas ${iconClass} text-2xl"></i>
				</div>
				<div class="flex-1">
					<h4 class="text-white text-sm font-semibold mb-1">${title}</h4>
					<p class="text-gray-300 text-sm">${message}</p>
				</div>
				<button class="ml-4 text-gray-400 hover:text-white">
					<i class="fas fa-times"></i>
				</button>
			`;
			
			// Add close button functionality
			const closeButton = notification.querySelector('button');
			closeButton.addEventListener('click', () => {
				notification.classList.add('opacity-0');
				setTimeout(() => {
					notification.remove();
				}, 300);
			});
			
			notificationContainer.appendChild(notification);
			
			// Auto remove after 5 seconds
			setTimeout(() => {
				if (notification.parentNode) {
					notification.classList.add('opacity-0');
					setTimeout(() => {
						if (notification.parentNode) {
							notification.remove();
						}
					}, 300);
				}
			}, 5000);
		}
		
		// Function to update resources display
		function updateResourcesDisplay(resources) {
			if (!resources) return;
			
			console.log('Updating resources display:', resources);
			
			// Update RAM display
			const ramElement = document.querySelector('.user-ram');
			if (ramElement && resources.ram !== undefined) {
				ramElement.textContent = resources.ram + ' MB';
			}
			
			// Update disk display
			const diskElement = document.querySelector('.user-disk');
			if (diskElement && resources.disk !== undefined) {
				diskElement.textContent = resources.disk + ' MB';
			}
			
			// Update CPU display
			const cpuElement = document.querySelector('.user-cpu');
			if (cpuElement && resources.cpu !== undefined) {
				cpuElement.textContent = resources.cpu + '%';
			}
			
			// Update servers display
			const serversElement = document.querySelector('.user-servers');
			if (serversElement && resources.servers !== undefined) {
				serversElement.textContent = resources.servers;
			}
		}
	</script>
</body>
</html>
