<%
// Set the current page for active menu highlighting
const currentPage = 'store';

// Set the page title
const pageTitle = 'Resource Store - ' + (typeof settings !== 'undefined' && settings && settings.name ? settings.name : 'Dashboard');
%>

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta name="description" content="Resource Store - Purchase additional resources for your servers">
	<meta name="theme-color" content="#0f0f12">
	
	<!-- Security Headers -->
	<meta http-equiv="Content-Security-Policy" content="default-src 'self' https: 'unsafe-inline' 'unsafe-eval'; img-src 'self' https: data:; font-src 'self' https: data:;">
	<meta http-equiv="X-Content-Type-Options" content="nosniff">
	<meta http-equiv="X-Frame-Options" content="SAMEORIGIN">
	<meta http-equiv="X-XSS-Protection" content="1; mode=block">
	
	<title><%= pageTitle %></title>
    <link rel="icon" type="image/png" href="/assets/img/SriyanNodes_Logo.gif"/>
    
    <!-- Fonts and Icons -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@500&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Tailwind CSS -->
    <link href="/assets/css/styles.css" rel="stylesheet">
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Poppins', 'sans-serif'],
                    },
                    colors: {
                        primary: {
                            50: '#fff5f5',
                            100: '#fee2e2',
                            200: '#fecaca',
                            300: '#fca5a5',
                            400: '#f87171',
                            500: '#ef4444',
                            600: '#dc2626',
                            700: '#b91c1c',
                            800: '#991b1b',
                            900: '#7f1d1d',
                            950: '#450a0a',
                        },
                        dark: {
                            base: '#0a0a0d',
                            light: '#141419',
                            lighter: '#1e1e26',
                            card: '#12121a'
                        }
                    },
                    animation: {
                        'fade-in': 'fadeIn 0.5s ease-in-out',
                        'pulse-slow': 'pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite',
                        'float': 'float 3s ease-in-out infinite',
                    },
                    keyframes: {
                        fadeIn: {
                            '0%': { opacity: '0' },
                            '100%': { opacity: '1' },
                        },
                        float: {
                            '0%, 100%': { transform: 'translateY(0)' },
                            '50%': { transform: 'translateY(-10px)' },
                        }
                    },
                    boxShadow: {
                        'glow': '0 0 15px rgba(239, 68, 68, 0.5)',
                        'card': '0 8px 24px rgba(0, 0, 0, 0.12)',
                    }
                }
            }
        }
    </script>
	
	<style>
        body {
            background-color: #0a0a0d;
            color: #f5f5f7;
            font-family: 'Poppins', sans-serif;
            background-image: radial-gradient(circle at 50% 50%, rgba(239, 68, 68, 0.15) 0%, transparent 60%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        .signature-font {
            font-family: 'Dancing Script', cursive;
            font-size: 18px;
        }
        
        /* Main layout wrapper */
        .dashboard-layout {
            display: flex;
            flex: 1;
            min-height: calc(100vh - 4rem); /* Subtract navbar height */
            position: relative;
        }
        
        /* Sidebar styles */
        .sidebar {
            background-color: rgba(18, 18, 22, 0.95);
            border-right: 1px solid rgba(45, 45, 53, 0.5);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
            position: fixed;
            left: 0;
            top: 4rem; /* Height of navbar */
            bottom: 0;
            width: 16rem; /* 64px */
            z-index: 40;
            transition: transform 0.3s ease;
        }
        
        /* Main content area */
        .main-content {
            flex: 1;
            margin-left: 16rem; /* Same as sidebar width */
            padding: 1rem;
            min-height: calc(100vh - 4rem);
            position: relative;
            z-index: 30;
        }
        
        /* Footer styles */
        footer {
            background: rgba(10, 10, 13, 0.95);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-top: 1px solid rgba(255, 255, 255, 0.05);
            width: 100%;
            z-index: 20;
            margin-top: auto;
        }
        
        .footer-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1.5rem 1rem;
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #1e1e24;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #3a3a43;
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: #ef4444;
        }
        
        /* Custom styles */
        .bg-dark-card {
            background-color: rgba(18, 18, 26, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.05);
        }
        
        .bg-dark-lighter {
            background-color: rgba(30, 30, 38, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }
        
        .menu-item {
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .menu-item::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            height: 100%;
            width: 3px;
            background: #ef4444;
            transform: scaleY(0);
            transition: transform 0.3s ease;
        }
        
        .menu-item:hover::before {
            transform: scaleY(1);
        }
        
        .menu-item.active {
            background-color: rgba(239, 68, 68, 0.15);
            color: #fff;
        }
        
        .menu-item.active::before {
            transform: scaleY(1);
        }
        
        .menu-item.active i {
            color: #ef4444;
        }
        
        .navbar {
            background-color: rgba(10, 10, 13, 0.95);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(45, 45, 53, 0.5);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        }
        
        .navbar-search {
            background-color: rgba(26, 26, 31, 0.8);
            border: 1px solid rgba(45, 45, 53, 0.8);
            transition: all 0.3s ease;
        }
        
        .navbar-search:focus {
            border-color: rgba(239, 68, 68, 0.5);
            box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.25);
        }
        
        .glass-card {
            background-color: rgba(18, 18, 26, 0.7);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(239, 68, 68, 0.05);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #b91c1c 0%, #ef4444 100%);
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.25);
        }
        
        .btn-primary:hover {
            background: linear-gradient(135deg, #991b1b 0%, #b91c1c 100%);
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(239, 68, 68, 0.4);
        }
        
        .btn-primary:active {
            transform: translateY(0);
        }
        
        .progress-bar {
            height: 8px;
            background-color: rgba(30, 30, 38, 0.5);
            border-radius: 4px;
            margin-bottom: 10px;
            overflow: hidden;
        }
        
        .progress-bar-fill {
            height: 100%;
            border-radius: 4px;
            transition: width 0.5s ease;
        }
        
        .progress-bar-fill.ram {
            background: linear-gradient(to right, #b91c1c, #ef4444);
        }
        
        .progress-bar-fill.disk {
            background: linear-gradient(to right, #991b1b, #dc2626);
        }
        
        .progress-bar-fill.cpu {
            background: linear-gradient(to right, #7f1d1d, #b91c1c);
        }
        
        .progress-bar-fill.servers {
            background: linear-gradient(to right, #c92424, #f87171);
        }
        
        /* Resource card hover effect */
        .resource-card {
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.05);
        }
        
        .resource-card:hover {
            transform: translateY(-5px);
            border: 1px solid rgba(239, 68, 68, 0.3);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3), 0 0 10px rgba(239, 68, 68, 0.2);
        }
        
        /* Mobile Responsive Styles */
        @media (max-width: 767px) {
            .sidebar {
                transform: translateX(-100%);
                width: 80%; /* Wider sidebar on mobile */
                max-width: 16rem;
            }
            
            .sidebar.active {
                transform: translateX(0);
            }
            
            .main-content {
                margin-left: 0;
                width: 100%;
                padding: 0.5rem;
            }
        }
    </style>

</head>
<body class="min-h-screen bg-dark-base">
	<!-- Notification Container -->
	<div id="notification-container" class="fixed top-4 right-4 z-50 w-80 max-w-full space-y-4"></div>
	
	<%
		const userData = {
			id: userinfo.id,
			username: userinfo.username || userinfo.email.split('@')[0],
			email: userinfo.email,
			isAdmin: typeof req.session !== 'undefined' ? req.session.isAdmin : false
		};
	%>

	<!-- Include Header Component -->
    <%- include('./components/header', { userData: userData, settings: settings, currentPage: currentPage }) %>

	<div class="flex h-screen pt-16">
		<!-- Include Sidebar Component -->
        <%- include('./components/sidebar', { userData: userData, settings: settings, currentPage: currentPage }) %>
		
		<!-- Mobile menu button -->
		<button id="toggleSidebar" type="button" class="fixed bottom-4 right-4 z-20 sm:hidden inline-flex items-center p-3 text-sm font-medium text-white bg-primary-600 rounded-full hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500">
			<i id="sidebarIcon" class="fas fa-bars"></i>
		</button>

		<!-- Main Content -->
		<div class="p-4 sm:ml-64 pt-5 w-full main-content">
			<div class="container mx-auto px-4 py-8">
				<!-- Header -->
				<div class="glass-card rounded-xl p-6 mb-8">
					<div class="flex flex-col md:flex-row md:items-center justify-between">
						<div>
							<h1 class="text-3xl font-bold text-white">Resource Store</h1>
							<p class="text-gray-400 mt-2">Purchase additional resources for your servers</p>
						</div>
						<div class="flex items-center space-x-4 mt-4 md:mt-0">
							<div class="bg-dark-light px-4 py-2 rounded-lg">
								<span class="text-sm text-gray-400">Balance</span>
								<div class="flex items-center">
									<i class="fas fa-coins text-primary-400 mr-2"></i>
									<span class="text-lg font-semibold text-white user-balance store-balance"><%= userinfo?.coins || 0 %></span>
								</div>
							</div>
							<a href="/earn" class="bg-primary-600 hover:bg-primary-700 px-4 py-2 rounded-lg text-white font-medium transition-colors duration-200">
								<i class="fas fa-plus mr-2"></i> Earn Coins
							</a>
						</div>
					</div>
				</div>

				<!-- Resource Packages Grid -->
				<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
					<!-- RAM Package -->
					<div class="resource-card bg-dark-card rounded-lg p-6 hover:bg-dark-lighter transition-colors duration-200" data-resource="ram">
						<div class="flex items-center justify-between mb-4">
							<div class="p-3 rounded-lg bg-primary-500/20">
								<i class="fas fa-memory text-2xl text-primary-400"></i>
							</div>
							<span class="px-2 py-1 text-xs font-semibold text-primary-400 bg-primary-500/20 rounded-full">Most Popular</span>
						</div>
						<h3 class="text-xl font-semibold text-white mb-2">RAM Package</h3>
						<p class="text-gray-400 text-sm mb-4">Increase your server's memory capacity for better performance.</p>
						<div class="space-y-2 mb-6">
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-primary-400 mr-2"></i>
								<span class="text-gray-300">1024 MB RAM</span>
							</div>
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-primary-400 mr-2"></i>
								<span class="text-gray-300">Instant Activation</span>
							</div>
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-primary-400 mr-2"></i>
								<span class="text-gray-300">Permanent Upgrade</span>
							</div>
						</div>
						<div class="flex items-center justify-between">
							<div>
								<span class="text-sm text-gray-400">Price</span>
								<div class="flex items-center">
									<i class="fas fa-coins text-primary-400 mr-1"></i>
									<span class="text-xl font-semibold text-white">200</span>
								</div>
							</div>
							<button onclick="purchase('ram')" class="bg-primary-600 hover:bg-primary-700 px-4 py-2 rounded-lg text-white font-medium transition-colors duration-200">
								Purchase
							</button>
						</div>
					</div>

					<!-- Disk Package -->
					<div class="resource-card bg-dark-card rounded-lg p-6 hover:bg-dark-lighter transition-colors duration-200" data-resource="disk">
						<div class="flex items-center justify-between mb-4">
							<div class="p-3 rounded-lg bg-primary-500/20">
								<i class="fas fa-hdd text-2xl text-primary-400"></i>
							</div>
							<span class="px-2 py-1 text-xs font-semibold text-primary-400 bg-primary-500/20 rounded-full">Best Value</span>
						</div>
						<h3 class="text-xl font-semibold text-white mb-2">Disk Package</h3>
						<p class="text-gray-400 text-sm mb-4">Expand your server's storage capacity for more files and data.</p>
						<div class="space-y-2 mb-6">
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-primary-400 mr-2"></i>
								<span class="text-gray-300">2048 MB Storage</span>
							</div>
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-primary-400 mr-2"></i>
								<span class="text-gray-300">Instant Activation</span>
							</div>
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-primary-400 mr-2"></i>
								<span class="text-gray-300">Permanent Upgrade</span>
							</div>
						</div>
						<div class="flex items-center justify-between">
							<div>
								<span class="text-sm text-gray-400">Price</span>
								<div class="flex items-center">
									<i class="fas fa-coins text-primary-400 mr-1"></i>
									<span class="text-xl font-semibold text-white">160</span>
								</div>
							</div>
							<button onclick="purchase('disk')" class="bg-primary-600 hover:bg-primary-700 px-4 py-2 rounded-lg text-white font-medium transition-colors duration-200">
								Purchase
							</button>
						</div>
					</div>

					<!-- CPU Package -->
					<div class="resource-card bg-dark-card rounded-lg p-6 hover:bg-dark-lighter transition-colors duration-200" data-resource="cpu">
						<div class="flex items-center justify-between mb-4">
							<div class="p-3 rounded-lg bg-primary-500/20">
								<i class="fas fa-microchip text-2xl text-primary-400"></i>
							</div>
							<span class="px-2 py-1 text-xs font-semibold text-primary-400 bg-primary-500/20 rounded-full">High Performance</span>
						</div>
						<h3 class="text-xl font-semibold text-white mb-2">CPU Package</h3>
						<p class="text-gray-400 text-sm mb-4">Boost your server's processing power for better performance.</p>
						<div class="space-y-2 mb-6">
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-primary-400 mr-2"></i>
								<span class="text-gray-300">100% CPU Power</span>
							</div>
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-primary-400 mr-2"></i>
								<span class="text-gray-300">Instant Activation</span>
							</div>
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-primary-400 mr-2"></i>
								<span class="text-gray-300">Permanent Upgrade</span>
							</div>
						</div>
						<div class="flex items-center justify-between">
							<div>
								<span class="text-sm text-gray-400">Price</span>
								<div class="flex items-center">
									<i class="fas fa-coins text-primary-400 mr-1"></i>
									<span class="text-xl font-semibold text-white">250</span>
								</div>
							</div>
							<button onclick="purchase('cpu')" class="bg-primary-600 hover:bg-primary-700 px-4 py-2 rounded-lg text-white font-medium transition-colors duration-200">
								Purchase
							</button>
						</div>
					</div>

					<!-- Server Slot Package -->
					<div class="resource-card bg-dark-card rounded-lg p-6 hover:bg-dark-lighter transition-colors duration-200" data-resource="slot">
						<div class="flex items-center justify-between mb-4">
							<div class="p-3 rounded-lg bg-primary-500/20">
								<i class="fas fa-server text-2xl text-primary-400"></i>
							</div>
							<span class="px-2 py-1 text-xs font-semibold text-primary-400 bg-primary-500/20 rounded-full">Expansion</span>
						</div>
						<h3 class="text-xl font-semibold text-white mb-2">Server Slot Package</h3>
						<p class="text-gray-400 text-sm mb-4">Create an additional server to host more applications.</p>
						<div class="space-y-2 mb-6">
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-primary-400 mr-2"></i>
								<span class="text-gray-300">1 Additional Server</span>
							</div>
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-primary-400 mr-2"></i>
								<span class="text-gray-300">Instant Activation</span>
							</div>
							<div class="flex items-center text-sm">
								<i class="fas fa-check text-primary-400 mr-2"></i>
								<span class="text-gray-300">Permanent Upgrade</span>
							</div>
						</div>
						<div class="flex items-center justify-between">
							<div>
								<span class="text-sm text-gray-400">Price</span>
								<div class="flex items-center">
									<i class="fas fa-coins text-primary-400 mr-1"></i>
									<span class="text-xl font-semibold text-white">500</span>
								</div>
							</div>
							<button onclick="purchase('slot')" class="bg-primary-600 hover:bg-primary-700 px-4 py-2 rounded-lg text-white font-medium transition-colors duration-200">
								Purchase
							</button>
						</div>
					</div>
				</div>

				<!-- Help Section -->
				<div class="glass-card rounded-xl p-6">
					<div class="flex items-start space-x-4">
						<div class="p-3 rounded-lg bg-primary-500/20">
							<i class="fas fa-question-circle text-2xl text-primary-400"></i>
						</div>
						<div>
							<h3 class="text-lg font-semibold text-white mb-2">Need Help?</h3>
							<p class="text-gray-400 mb-4">Here are some common questions about our resource packages:</p>
							<div class="space-y-4">
								<div>
									<h4 class="text-sm font-semibold text-white mb-1">How do I purchase resources?</h4>
									<p class="text-sm text-gray-400">Simply click the "Purchase" button on any package. The resources will be instantly added to your account.</p>
								</div>
								<div>
									<h4 class="text-sm font-semibold text-white mb-1">Are the upgrades permanent?</h4>
									<p class="text-sm text-gray-400">Yes, all resource upgrades are permanent and will remain on your account indefinitely.</p>
								</div>
								<div>
									<h4 class="text-sm font-semibold text-white mb-1">How do I earn coins?</h4>
									<p class="text-sm text-gray-400">Click the "Earn Coins" button to learn about various ways to earn coins on our platform.</p>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Include Footer Component -->
    <%- include('./components/footer', { settings: settings }) %>

    <!-- Include Scripts Component -->
    <%- include('./components/scripts') %>

	<script>
		document.addEventListener('DOMContentLoaded', function() {
			// Fetch resources on page load
			fetchResources();
			
			// Fetch user's current balance
			fetchUserBalance();
		});
		// Fetch user's current balance
		async function fetchUserBalance() {
			try {
				const response = await fetch('/api/earn/balance');
				if (!response.ok) {
					console.error('Failed to fetch balance:', response.status);
					return;
				}
				
				const data = await response.json();
				
				if (data.success) {
					const balanceElements = document.querySelectorAll('.user-balance, .store-balance');
					balanceElements.forEach(element => {
						element.textContent = data.balance;
					});
				}
			} catch (error) {
				console.error('Error fetching balance:', error);
			}
		}
		
		// Fetch resources
		async function fetchResources() {
			try {
				const response = await fetch('/api/store/resources');
				if (!response.ok) {
					showNotification('Error', 'Failed to load resources');
					return;
				}
				
				const data = await response.json();
				
				if (data.success) {
					// Update resources display
					updateResourcesDisplay(data.resources);
					
					// Update balance
					const balanceElements = document.querySelectorAll('.user-balance, .store-balance');
					balanceElements.forEach(element => {
						element.textContent = data.balance;
					});
					
					// Update prices and product information dynamically based on API response
					if (data.prices) {
						// Update RAM price and info
						if (data.prices.ram) {
							updateProductCard('ram', data.prices.ram.cost, {
								name: data.prices.ram.name,
								description: data.prices.ram.description,
								feature: `${data.prices.ram.amount} ${data.prices.ram.unit}`,
								badge: "Most Popular"
							});
						}
						
						// Update Disk price and info
						if (data.prices.disk) {
							updateProductCard('disk', data.prices.disk.cost, {
								name: data.prices.disk.name,
								description: data.prices.disk.description,
								feature: `${data.prices.disk.amount} ${data.prices.disk.unit}`,
								badge: "Best Value"
							});
						}
						
						// Update CPU price and info
						if (data.prices.cpu) {
							updateProductCard('cpu', data.prices.cpu.cost, {
								name: data.prices.cpu.name,
								description: data.prices.cpu.description,
								feature: `${data.prices.cpu.amount}${data.prices.cpu.unit}`,
								badge: "High Performance"
							});
						}
						
						// Update Server Slot price and info
						if (data.prices.servers) {
							updateProductCard('slot', data.prices.servers.cost, {
								name: data.prices.servers.name,
								description: data.prices.servers.description,
								feature: `${data.prices.servers.amount} Additional Server`,
								badge: "Expansion"
							});
						}
					}
				}
			} catch (error) {
				console.error('Error fetching resources:', error);
				showNotification('Error', 'Failed to load resources');
			}
		}
		
		// Helper function to update product card with price and info
		function updateProductCard(resourceType, price, info) {
			const card = document.querySelector(`[data-resource="${resourceType}"]`);
			if (!card) return;
			
			// Update price
			const priceElement = card.querySelector('.text-xl.font-semibold.text-white');
			if (priceElement) {
				priceElement.textContent = price;
			}
			
			// Update product name
			const nameElement = card.querySelector('h3.text-xl.font-semibold.text-white');
			if (nameElement && info.name) {
				nameElement.textContent = info.name;
			}
			
			// Update description
			const descElement = card.querySelector('p.text-gray-400.text-sm.mb-4');
			if (descElement && info.description) {
				descElement.textContent = info.description;
			}
			
			// Update feature text
			const featureElement = card.querySelector('.space-y-2.mb-6 .flex.items-center.text-sm:first-child .text-gray-300');
			if (featureElement && info.feature) {
				featureElement.textContent = info.feature;
			}
			
			// Update badge
			const badgeElement = card.querySelector('.px-2.py-1.text-xs.font-semibold.text-primary-400');
			if (badgeElement && info.badge) {
				badgeElement.textContent = info.badge;
			}
		}
		
		// Purchase function
		function purchase(resourceType) {
			console.log(`Attempting to purchase ${resourceType}...`);
			
			// Show loading indicator
			const button = event.target.closest('button');
			const originalText = button.innerHTML;
			button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Processing...';
			button.disabled = true;
			
			// First check the user's balance
			checkBalanceForPurchase(resourceType)
				.then(canPurchase => {
					if (canPurchase) {
						// Perform purchase
						return purchaseResource(resourceType);
					} else {
						// Balance check failed, already handled in checkBalanceForPurchase
						throw new Error('Insufficient balance');
					}
				})
				.then(() => {
					// Reset button after purchase (success case handled in purchaseResource)
					setTimeout(() => {
						button.innerHTML = originalText;
						button.disabled = false;
					}, 1000);
				})
				.catch(error => {
					// Handle error and reset button
					console.error('Purchase error:', error);
					if (error.message !== 'Insufficient balance') {
						showNotification('Error', 'Failed to process purchase');
					}
					button.innerHTML = originalText;
					button.disabled = false;
				});
		}
		
		// Check if user has enough balance for purchase
		async function checkBalanceForPurchase(resourceType) {
			try {
				// Get current price from the API
				const priceResponse = await fetch('/api/store/resources');
				if (!priceResponse.ok) {
					showNotification('Error', 'Could not get pricing information');
					return false;
				}
				
				const priceData = await priceResponse.json();
				
				// Get the price for the selected resource
				let resourcePrice = 0;
				let normalizedResourceType = resourceType === 'slot' ? 'servers' : resourceType;
				
				if (priceData.prices && priceData.prices[normalizedResourceType] && priceData.prices[normalizedResourceType].cost !== undefined) {
					resourcePrice = priceData.prices[normalizedResourceType].cost;
				} else {
					showNotification('Error', 'Could not determine price for this resource');
					return false;
				}
				
				// Get current balance
				const balanceResponse = await fetch('/api/earn/balance');
				if (!balanceResponse.ok) {
					showNotification('Error', 'Could not verify your balance');
					return false;
				}
				
				const balanceData = await balanceResponse.json();
				
				if (!balanceData.success) {
					showNotification('Error', balanceData.error || 'Could not verify your balance');
					return false;
				}
				
				// Check if user has enough balance
				if (balanceData.balance < resourcePrice) {
					showNotification('Insufficient Balance', `You need ${resourcePrice} credits, but only have ${balanceData.balance}.`);
					
					// Highlight earn button to guide user
					const earnButton = document.querySelector('a[href="/earn"]');
					if (earnButton) {
						earnButton.classList.add('animate-pulse');
						setTimeout(() => {
							earnButton.classList.remove('animate-pulse');
						}, 3000);
					}
					
					return false;
				}
				
				return true;
			} catch (error) {
				console.error('Error checking balance:', error);
				showNotification('Error', 'Could not verify your balance');
				return false;
			}
		}
		
		// Purchase resource
		async function purchaseResource(resourceId, amount = 1) {
			try {
				console.log(`Sending purchase request for ${resourceId}, amount: ${amount}`);
				
				const response = await fetch('/api/store/purchase', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({ resourceId, amount })
				});
				
				console.log('Purchase response status:', response.status);
				const data = await response.json();
				console.log('Purchase response data:', data);
				
				if (!response.ok) {
					// Handle specific error cases
					if (data.error && data.error.includes('Insufficient')) {
						showNotification('Insufficient Balance', data.error);
						
						// Highlight earn button to guide user
						const earnButton = document.querySelector('a[href="/earn"]');
						if (earnButton) {
							earnButton.classList.add('animate-pulse');
							setTimeout(() => {
								earnButton.classList.remove('animate-pulse');
							}, 3000);
						}
					} else {
						showNotification('Error', data.error || 'Failed to purchase resource');
					}
					return;
				}
				
				if (data.success) {
					// Update balance display
					const balanceElements = document.querySelectorAll('.user-balance, .store-balance');
					balanceElements.forEach(element => {
						element.textContent = data.newBalance;
					});
					
					// Update resources display
					updateResourcesDisplay(data.resources);
					
					// Show success message with animation
					showNotification('Success', `Purchase successful! New balance: ${data.newBalance} coins`);
					
					// Add visual feedback
					const resourceCard = document.querySelector(`[data-resource="${resourceId}"]`);
					if (resourceCard) {
						resourceCard.classList.add('border-green-500');
						setTimeout(() => {
							resourceCard.classList.remove('border-green-500');
						}, 2000);
					}
				} else {
					showNotification('Error', data.error || 'Failed to purchase resource');
				}
			} catch (error) {
				console.error('Error purchasing resource:', error);
				showNotification('Error', 'Failed to process purchase');
				throw error; // Re-throw for the purchase function to catch
			}
		}
		
		// Function to show notifications with red theme
		function showNotification(title, message) {
			const notificationContainer = document.getElementById('notification-container');
			if (!notificationContainer) {
				console.error('Notification container not found');
				return;
			}
			
			const notification = document.createElement('div');
			notification.className = 'notification flex items-start p-4 mb-4 bg-dark-card rounded-lg border border-primary-900/30 shadow-lg animate-fade-in';
			
			const iconClass = title.toLowerCase().includes('error') || title.toLowerCase().includes('insufficient') ? 
				'fa-times-circle text-red-500' : 'fa-check-circle text-primary-400';
			
			notification.innerHTML = `
				<div class="flex-shrink-0 mr-3">
					<i class="fas ${iconClass} text-2xl"></i>
				</div>
				<div class="flex-1">
					<h4 class="text-white text-sm font-semibold mb-1">${title}</h4>
					<p class="text-gray-300 text-sm">${message}</p>
				</div>
				<button class="ml-4 text-gray-400 hover:text-white">
					<i class="fas fa-times"></i>
				</button>
			`;
			
			// Add close button functionality
			const closeButton = notification.querySelector('button');
			closeButton.addEventListener('click', () => {
				notification.classList.add('opacity-0');
				setTimeout(() => {
					notification.remove();
				}, 300);
			});
			
			notificationContainer.appendChild(notification);
			
			// Auto remove after 5 seconds
			setTimeout(() => {
				if (notification.parentNode) {
					notification.classList.add('opacity-0');
					setTimeout(() => {
						if (notification.parentNode) {
							notification.remove();
						}
					}, 300);
				}
			}, 5000);
		}
		
		// Function to update resources display
		function updateResourcesDisplay(resources) {
			if (!resources) return;
			
			console.log('Updating resources display:', resources);
			
			// Update RAM display
			const ramElement = document.querySelector('.user-ram');
			if (ramElement && resources.ram !== undefined) {
				ramElement.textContent = resources.ram + ' MB';
			}
			
			// Update disk display
			const diskElement = document.querySelector('.user-disk');
			if (diskElement && resources.disk !== undefined) {
				diskElement.textContent = resources.disk + ' MB';
			}
			
			// Update CPU display
			const cpuElement = document.querySelector('.user-cpu');
			if (cpuElement && resources.cpu !== undefined) {
				cpuElement.textContent = resources.cpu + '%';
			}
			
			// Update servers display
			const serversElement = document.querySelector('.user-servers');
			if (serversElement && resources.servers !== undefined) {
				serversElement.textContent = resources.servers;
			}
		}
	</script>
</body>
</html>
