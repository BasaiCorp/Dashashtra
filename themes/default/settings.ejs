<%
// Set the current page for active menu highlighting
const currentPage = 'settings';

// Set the page title
const pageTitle = 'Settings - ' + (typeof extra !== 'undefined' && extra && extra.dashboard ? extra.dashboard.title : 'Dashboard');
%>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <title><%= pageTitle %></title>
    <link rel="icon" type="image/png" href="/assets/img/Dashashtra_Logo.gif"/>
    
    <!-- Fonts and Icons -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@500&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Tailwind CSS -->
    <link href="/assets/css/styles.css" rel="stylesheet">
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Poppins', 'sans-serif'],
                    },
                    colors: {
                        primary: {
                            50: '#fff5f5',
                            100: '#fee2e2',
                            200: '#fecaca',
                            300: '#fca5a5',
                            400: '#f87171',
                            500: '#ef4444',
                            600: '#dc2626',
                            700: '#b91c1c',
                            800: '#991b1b',
                            900: '#7f1d1d',
                            950: '#450a0a',
                        },
                        dark: {
                            base: '#0f0f12',
                            light: '#1a1a21',
                            lighter: '#24242e',
                            card: '#1a1a21'
                        }
                    },
                    animation: {
                        'fade-in': 'fadeIn 0.5s ease-in-out',
                        'pulse-slow': 'pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite',
                        'float': 'float 3s ease-in-out infinite',
                    },
                    keyframes: {
                        fadeIn: {
                            '0%': { opacity: '0' },
                            '100%': { opacity: '1' },
                        },
                        float: {
                            '0%, 100%': { transform: 'translateY(0)' },
                            '50%': { transform: 'translateY(-10px)' },
                        }
                    },
                    boxShadow: {
                        'glow': '0 0 15px rgba(239, 68, 68, 0.5)',
                        'card': '0 8px 24px rgba(0, 0, 0, 0.12)',
                    }
                }
            }
        }
    </script>
    
    <style>
        body {
            background-color: #0f0f12;
            color: #f5f5f7;
            font-family: 'Poppins', sans-serif;
            background-image: radial-gradient(circle at 50% 50%, rgba(239, 68, 68, 0.1) 0%, transparent 50%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        .signature-font {
            font-family: 'Dancing Script', cursive;
            font-size: 18px;
        }
        
        /* Main layout wrapper */
        .dashboard-layout {
            display: flex;
            flex: 1;
            min-height: calc(100vh - 4rem); /* Subtract navbar height */
            position: relative;
        }
        
        /* Sidebar styles */
        .sidebar {
            background-color: rgba(22, 22, 24, 0.8);
            border-right: 1px solid rgba(45, 45, 53, 0.5);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
            position: fixed;
            left: 0;
            top: 4rem; /* Height of navbar */
            bottom: 0;
            width: 16rem; /* 64px */
            z-index: 40;
            transition: transform 0.3s ease;
        }
        
        /* Main content area */
        .main-content {
            flex: 1;
            margin-left: 16rem; /* Same as sidebar width */
            padding: 1rem;
            min-height: calc(100vh - 4rem);
            position: relative;
            z-index: 30;
        }
        
        /* Footer styles */
        footer {
            background: rgba(15, 15, 18, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-top: 1px solid rgba(255, 255, 255, 0.05);
            width: 100%;
            z-index: 20;
            margin-top: auto;
        }
        
        .footer-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1.5rem 1rem;
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #1e1e24;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #3a3a43;
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: #4a4a55;
        }
        
        /* Custom styles */
        .bg-dark-card {
            background-color: rgba(26, 26, 31, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.05);
        }
        
        .bg-dark-lighter {
            background-color: rgba(32, 32, 38, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }
        
        .menu-item {
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .menu-item::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            height: 100%;
            width: 3px;
            background: #ef4444;
            transform: scaleY(0);
            transition: transform 0.3s ease;
        }
        
        .menu-item:hover::before {
            transform: scaleY(1);
        }
        
        .menu-item.active {
            background-color: rgba(239, 68, 68, 0.1);
            color: #fff;
        }
        
        .menu-item.active::before {
            transform: scaleY(1);
        }
        
        .menu-item.active i {
            color: #ef4444;
        }
        
        .navbar {
            background-color: rgba(15, 15, 18, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(45, 45, 53, 0.5);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }
        
        .navbar-search {
            background-color: rgba(26, 26, 31, 0.8);
            border: 1px solid rgba(45, 45, 53, 0.8);
            transition: all 0.3s ease;
        }
        
        .navbar-search:focus {
            border-color: rgba(239, 68, 68, 0.5);
            box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.25);
        }
        
        .glass-card {
            background-color: rgba(26, 26, 31, 0.6);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.05);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #dc2626 0%, #ef4444 100%);
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.25);
        }
        
        .btn-primary:hover {
            background: linear-gradient(135deg, #b91c1c 0%, #dc2626 100%);
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(239, 68, 68, 0.3);
        }
        
        .btn-primary:active {
            transform: translateY(0);
        }
        
        .progress-bar {
            height: 8px;
            background-color: rgba(45, 45, 53, 0.5);
            border-radius: 4px;
            margin-bottom: 10px;
            overflow: hidden;
        }
        
        .progress-bar-fill {
            height: 100%;
            border-radius: 4px;
            transition: width 0.5s ease;
        }
        
        .progress-bar-fill.ram {
            background: linear-gradient(to right, #4f46e5, #818cf8);
        }
        
        .progress-bar-fill.disk {
            background: linear-gradient(to right, #10b981, #34d399);
        }
        
        .progress-bar-fill.cpu {
            background: linear-gradient(to right, #f59e0b, #fbbf24);
        }
        
        .progress-bar-fill.servers {
            background: linear-gradient(to right, #8b5cf6, #a78bfa);
        }
        
        /* Mobile Responsive Styles */
        @media (max-width: 767px) {
            .sidebar {
                transform: translateX(-100%);
                width: 80%; /* Wider sidebar on mobile */
                max-width: 16rem;
            }
            
            .sidebar.active {
                transform: translateX(0);
            }
            
            .main-content {
                margin-left: 0;
                width: 100%;
                padding: 0.5rem;
            }
        }
    </style>

    <style>
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 12px 24px;
            border-radius: 4px;
            color: white;
            opacity: 0;
            transition: opacity 0.3s ease-in-out;
            z-index: 1000;
        }

        .toast.show {
            opacity: 1;
        }

        .toast.success {
            background-color: #4CAF50;
        }

        .toast.error {
            background-color: #f44336;
        }

        .toast.info {
            background-color: #2196F3;
        }
    </style>
</head>
<body class="min-h-screen">
    <!-- Calculate server resources -->
    <%
        let ram = 0;
        let disk = 0;
        let cpu = 0;
        let servers = 0;
        
        if (typeof pterodactyl !== 'undefined' && pterodactyl && pterodactyl.relationships && pterodactyl.relationships.servers && pterodactyl.relationships.servers.data) {
            servers = pterodactyl.relationships.servers.data.length;
            
            for (let i = 0, len = pterodactyl.relationships.servers.data.length; i < len; i++) {
                ram = ram + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.memory == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.memory : 0);
                disk = disk + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.disk == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.disk : 0);
                cpu = cpu + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.cpu == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.cpu : 0);
            }
        }
        
        // User data with safety checks
        const userData = typeof userinfo !== 'undefined' && userinfo ? {
            id: userinfo.id,
            username: userinfo.username || (userinfo.email ? userinfo.email.split('@')[0] : 'User'),
            email: userinfo.email || 'user@example.com',
            isAdmin: typeof req !== 'undefined' && req && req.session ? req.session.isAdmin : false
        } : {
            id: 0,
            username: 'User',
            email: 'user@example.com',
            isAdmin: false
        };
        
        const packageData = typeof packages !== 'undefined' ? packages : {
            ram: 0,
            disk: 0,
            cpu: 0,
            servers: 0
        };
        
        // Calculate total resources (package + extra)
        const extraData = typeof extraresources !== 'undefined' ? extraresources : {
            ram: 0,
            disk: 0,
            cpu: 0,
            servers: 0
        };
        
        const totalRam = packageData.ram + extraData.ram;
        const totalDisk = packageData.disk + extraData.disk;
        const totalCpu = packageData.cpu + extraData.cpu;
        const totalServers = packageData.servers + extraData.servers;
        
        // Available resources
        const availableRam = totalRam - ram;
        const availableDisk = totalDisk - disk;
        const availableCpu = totalCpu - cpu;
        const availableServers = totalServers - servers;
        
        // Calculate progress percentages
        const ramWidth = totalRam > 0 ? Math.min(100, Math.round((ram / totalRam) * 100)) : 0;
        const diskWidth = totalDisk > 0 ? Math.min(100, Math.round((disk / totalDisk) * 100)) : 0;
        const cpuWidth = totalCpu > 0 ? Math.min(100, Math.round((cpu / totalCpu) * 100)) : 0;
        const serversWidth = totalServers > 0 ? Math.min(100, Math.round((servers / totalServers) * 100)) : 0;
    %>

    <div class="flex flex-col min-h-screen">
        <!-- Include Header Component -->
        <%- include('./components/header', { userData: userData, settings: settings, currentPage: currentPage }) %>

        <div class="flex flex-1 pt-16">
            <!-- Include Sidebar Component -->
            <%- include('./components/sidebar', { userData: userData, settings: settings, currentPage: currentPage }) %>

            <!-- Mobile menu button -->
            <button id="toggleSidebar" type="button" class="fixed bottom-4 right-4 z-20 sm:hidden inline-flex items-center p-3 text-sm font-medium text-white bg-primary-600 rounded-full hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500">
                <i id="sidebarIcon" class="fas fa-bars"></i>
            </button>

            <!-- Main Content -->
            <div class="flex-1 p-6 sm:ml-64">
                <div class="max-w-7xl mx-auto">
                    <!-- Page Title -->
                    <div class="glass-card rounded-xl p-6 mb-8">
                        <div class="flex flex-col items-start justify-start text-left mb-6">
                            <h1 class="text-3xl font-bold mb-2 text-gray-300">Account Settings</h1>
                            <p class="text-gray-400">Manage your account preferences and connections</p>
                        </div>
                    </div>

                    <!-- Settings Grid -->
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8 pb-20">
                        <!-- Profile Settings -->
                        <div class="glass-card rounded-xl p-6">
                            <div class="flex items-center mb-6">
                                <div class="w-12 h-12 rounded-lg bg-primary-500/20 flex items-center justify-center mr-4">
                                    <i class="fas fa-user text-primary-400 text-2xl"></i>
                                </div>
                                <div>
                                    <h2 class="text-xl font-semibold text-primary-400">Profile Settings</h2>
                                    <p class="text-gray-400 text-sm">Manage your account profile</p>
                                </div>
                            </div>

                            <div class="space-y-4">
                                <!-- Username -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-300 mb-2">Username</label>
                                    <input type="text" id="username" value="<%= userinfo?.username || '' %>" class="w-full px-4 py-2 bg-dark-lighter rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500">
                                </div>

                                <!-- Email -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-300 mb-2">Email Address</label>
                                    <input type="email" id="email" value="<%= userinfo?.email || '' %>" class="w-full px-4 py-2 bg-dark-lighter rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500">
                                </div>

                                <!-- Avatar -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-300 mb-2">Profile Picture</label>
                                    <div class="flex items-center space-x-4">
                                        <div class="w-20 h-20 rounded-full bg-dark-lighter flex items-center justify-center overflow-hidden">
                                            <% if (userinfo?.discordAvatar) { %>
                                                <img src="https://cdn.discordapp.com/avatars/<%= userinfo.discordId %>/<%= userinfo.discordAvatar %>.png" alt="Profile Picture" class="w-full h-full object-cover">
                                            <% } else { %>
                                                <i class="fas fa-user text-3xl text-gray-400"></i>
                                            <% } %>
                                        </div>
                                        <button onclick="updateProfilePicture()" class="px-4 py-2 bg-dark-lighter hover:bg-dark-base rounded-lg text-sm font-medium text-gray-300 hover:text-white transition-colors duration-200">
                                            Change Picture
                                        </button>
                                    </div>
                                </div>

                                <button onclick="updateProfile()" class="w-full px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg text-sm font-medium transition-colors duration-200">
                                    Save Changes
                                </button>
                            </div>
                        </div>

                        <!-- Security Settings -->
                        <div class="glass-card rounded-xl p-6">
                            <div class="flex items-center mb-6">
                                <div class="w-12 h-12 rounded-lg bg-red-500/20 flex items-center justify-center mr-4">
                                    <i class="fas fa-shield-alt text-red-400 text-2xl"></i>
                                </div>
                                <div>
                                    <h2 class="text-xl font-semibold">Security Settings</h2>
                                    <p class="text-gray-400 text-sm">Manage your account security</p>
                                </div>
                            </div>

                            <div class="space-y-4">
                                <!-- Current Password -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-300 mb-2">Current Password</label>
                                    <input type="password" id="currentPassword" class="w-full px-4 py-2 bg-dark-lighter rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500">
                                </div>

                                <!-- New Password -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-300 mb-2">New Password</label>
                                    <input type="password" id="newPassword" class="w-full px-4 py-2 bg-dark-lighter rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500">
                                </div>

                                <!-- Confirm New Password -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-300 mb-2">Confirm New Password</label>
                                    <input type="password" id="confirmPassword" class="w-full px-4 py-2 bg-dark-lighter rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500">
                                </div>

                                <button onclick="updatePassword()" class="w-full px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg text-sm font-medium transition-colors duration-200">
                                    Update Password
                                </button>

                                <!-- Two-Factor Authentication -->
                                <div class="mt-6 pt-6 border-t border-gray-700">
                                    <div class="flex items-center justify-between">
                                        <div>
                                            <h3 class="text-sm font-medium text-gray-300">Two-Factor Authentication</h3>
                                            <p class="text-xs text-gray-400">Add an extra layer of security to your account</p>
                                        </div>
                                        <button class="px-4 py-2 bg-dark-lighter hover:bg-dark-base rounded-lg text-sm font-medium text-gray-300 hover:text-white transition-colors duration-200">
                                            Enable 2FA
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Notification Settings -->
                        <div class="glass-card rounded-xl p-6">
                            <div class="flex items-center mb-6">
                                <div class="w-12 h-12 rounded-lg bg-yellow-500/20 flex items-center justify-center mr-4">
                                    <i class="fas fa-bell text-yellow-400 text-2xl"></i>
                                </div>
                                <div>
                                    <h2 class="text-xl font-semibold">Notification Settings</h2>
                                    <p class="text-gray-400 text-sm">Manage your notification preferences</p>
                                </div>
                            </div>

                            <div class="space-y-4">
                                <!-- Email Notifications -->
                                <div class="flex items-center justify-between">
                                    <div>
                                        <h3 class="text-sm font-medium text-gray-300">Email Notifications</h3>
                                        <p class="text-xs text-gray-400">Receive updates via email</p>
                                    </div>
                                    <label class="relative inline-flex items-center cursor-pointer">
                                        <input type="checkbox" class="sr-only peer" <%= userinfo?.notificationPreferences?.email ? 'checked' : '' %> onchange="updateNotificationPreference('email', this.checked)">
                                        <div class="w-11 h-6 bg-dark-lighter peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
                                    </label>
                                </div>

                                <!-- Discord Notifications -->
                                <div class="flex items-center justify-between">
                                    <div>
                                        <h3 class="text-sm font-medium text-gray-300">Discord Notifications</h3>
                                        <p class="text-xs text-gray-400">Receive updates via Discord</p>
                                    </div>
                                    <label class="relative inline-flex items-center cursor-pointer">
                                        <input type="checkbox" class="sr-only peer" <%= userinfo?.notificationPreferences?.discord ? 'checked' : '' %> onchange="updateNotificationPreference('discord', this.checked)">
                                        <div class="w-11 h-6 bg-dark-lighter peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
                                    </label>
                                </div>

                                <!-- Server Status Updates -->
                                <div class="flex items-center justify-between">
                                    <div>
                                        <h3 class="text-sm font-medium text-gray-300">Server Status Updates</h3>
                                        <p class="text-xs text-gray-400">Get notified about server status changes</p>
                                    </div>
                                    <label class="relative inline-flex items-center cursor-pointer">
                                        <input type="checkbox" class="sr-only peer" <%= userinfo?.notificationPreferences?.serverStatus ? 'checked' : '' %> onchange="updateNotificationPreference('serverStatus', this.checked)">
                                        <div class="w-11 h-6 bg-dark-lighter peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- Discord Integration -->
                        <div class="glass-card rounded-xl p-6">
                            <div class="flex items-center mb-6">
                                <div class="w-12 h-12 rounded-lg bg-indigo-500/20 flex items-center justify-center mr-4">
                                    <i class="fab fa-discord text-indigo-400 text-2xl"></i>
                                </div>
                                <div>
                                    <h2 class="text-xl font-semibold">Discord Connection</h2>
                                    <p class="text-gray-400 text-sm">Link your Discord account</p>
                                </div>
                            </div>

                            <div class="space-y-4">
                                <!-- Discord Status -->
                                <div class="flex items-center justify-between p-4 rounded-lg bg-dark-lighter">
                                    <div class="flex items-center">
                                        <div class="w-3 h-3 rounded-full <%= userinfo?.discordId ? 'bg-green-500' : 'bg-red-500' %> mr-3"></div>
                                        <span class="text-sm font-medium"><%= userinfo?.discordId ? 'Connected' : 'Not Connected' %></span>
                                    </div>
                                    <% if (!userinfo?.discordId) { %>
                                    <a href="/auth/discord" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg text-sm font-medium transition-colors duration-200">
                                        Connect Discord
                                    </a>
                                    <% } else { %>
                                    <button onclick="disconnectDiscord()" class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg text-sm font-medium transition-colors duration-200">
                                        Disconnect
                                    </button>
                                    <% } %>
                                </div>

                                <% if (userinfo?.discordId) { %>
                                <!-- Discord Profile -->
                                <div class="flex items-center p-4 rounded-lg bg-dark-lighter">
                                    <img src="https://cdn.discordapp.com/avatars/<%= userinfo.discordId %>/<%= userinfo.discordAvatar %>.png" alt="Discord Avatar" class="w-10 h-10 rounded-full mr-4">
                                    <div>
                                        <p class="font-medium"><%= userinfo.discordUsername %></p>
                                        <p class="text-sm text-gray-400">#<%= userinfo.discordDiscriminator %></p>
                                    </div>
                                </div>
                                <% } %>

                                <!-- Discord Benefits -->
                                <div class="space-y-2 mt-4">
                                    <div class="flex items-center text-sm text-gray-400">
                                        <i class="fas fa-check-circle text-green-400 mr-2"></i>
                                        <span>Receive notifications for server events</span>
                                    </div>
                                    <div class="flex items-center text-sm text-gray-400">
                                        <i class="fas fa-check-circle text-green-400 mr-2"></i>
                                        <span>Access exclusive Discord features</span>
                                    </div>
                                    <div class="flex items-center text-sm text-gray-400">
                                        <i class="fas fa-check-circle text-green-400 mr-2"></i>
                                        <span>Sync roles and permissions</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Include Footer Component -->
        <div class="mt-auto">
            <%- include('./components/footer', { settings: settings }) %>
        </div>
    </div>

    <!-- Include Scripts Component -->
    <%- include('./components/scripts') %>

    <style>
        .glass-card {
            @apply bg-dark-card backdrop-blur-md border border-gray-800/50 shadow-lg transition-all duration-300;
        }
        
        .glass-card:hover {
            @apply border-primary-500/20 shadow-primary-500/10;
        }
        
        input[type="text"],
        input[type="email"],
        input[type="password"] {
            @apply bg-dark-lighter border border-gray-700 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-300;
        }
        
        .btn-primary {
            @apply bg-gradient-to-r from-primary-600 to-primary-500 text-white px-4 py-2 rounded-lg font-medium transition-all duration-300 hover:from-primary-700 hover:to-primary-600 transform hover:-translate-y-0.5 shadow-lg hover:shadow-primary-500/25;
        }
        
        .toggle-switch {
            @apply bg-dark-lighter border border-gray-700 rounded-full transition-all duration-300;
        }
        
        .toggle-switch:checked {
            @apply bg-primary-500 border-primary-500;
        }
    </style>

    <!-- Server-specific scripts -->
    <script>
        // Server deletion function
        function deleteServer(identifier) {
            if (confirm('Are you sure you want to delete this server? This action cannot be undone.')) {
                window.location.href = `/servers/delete/${identifier}`;
            }
        }
    </script>

    <!-- Scripts -->
    <script>
        // Initialize user data
        let userData = JSON.parse('<%- JSON.stringify(userinfo).replace(/'/g, "\\'") %>');

        // Update profile
        async function updateProfile() {
            try {
                const username = document.getElementById('username').value;
                const email = document.getElementById('email').value;

                const response = await fetch('/api/settings/profile', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ username, email })
                });

                const result = await response.json();
                
                if (!result.success) {
                    throw new Error(result.error || 'Failed to update profile');
                }

                userData = result.data;
                showToast('Profile updated successfully', 'success');
            } catch (error) {
                console.error('Error updating profile:', error);
                showToast(error.message || 'Failed to update profile', 'error');
            }
        }

        // Update password
        async function updatePassword() {
            try {
                const currentPassword = document.getElementById('currentPassword').value;
                const newPassword = document.getElementById('newPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;

                if (newPassword !== confirmPassword) {
                    throw new Error('New passwords do not match');
                }

                const response = await fetch('/api/settings/password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ currentPassword, newPassword })
                });

                const result = await response.json();
                
                if (!result.success) {
                    throw new Error(result.error || 'Failed to update password');
                }

                // Clear password fields
                document.getElementById('currentPassword').value = '';
                document.getElementById('newPassword').value = '';
                document.getElementById('confirmPassword').value = '';

                showToast('Password updated successfully', 'success');
            } catch (error) {
                console.error('Error updating password:', error);
                showToast(error.message || 'Failed to update password', 'error');
            }
        }

        // Update notification preferences
        async function updateNotificationPreference(type, enabled) {
            try {
                const notificationPreferences = {
                    ...userData.notificationPreferences,
                    [type]: enabled
                };

                const response = await fetch('/api/settings/notifications', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ notificationPreferences })
                });

                const result = await response.json();
                
                if (!result.success) {
                    throw new Error(result.error || 'Failed to update notification preferences');
                }

                userData = result.data;
                showToast('Notification preferences updated', 'success');
            } catch (error) {
                console.error('Error updating notification preferences:', error);
                showToast(error.message || 'Failed to update notification preferences', 'error');
            }
        }

        // Toggle 2FA
        async function toggle2FA(enabled) {
            try {
                const response = await fetch('/api/settings/2fa', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ enabled })
                });

                const result = await response.json();
                
                if (!result.success) {
                    throw new Error(result.error || 'Failed to toggle 2FA');
                }

                userData = result.data;
                showToast(`2FA ${enabled ? 'enabled' : 'disabled'} successfully`, 'success');
            } catch (error) {
                console.error('Error toggling 2FA:', error);
                showToast(error.message || 'Failed to toggle 2FA', 'error');
            }
        }

        // Toast notification function
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.classList.add('show');
            }, 100);
            
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => {
                    document.body.removeChild(toast);
                }, 300);
            }, 3000);
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', () => {
            // Set initial values
            document.getElementById('username').value = userData.username || '';
            document.getElementById('email').value = userData.email || '';
            
            // Set notification preferences
            const notificationPrefs = userData.notificationPreferences || {};
            document.getElementById('emailNotifications').checked = notificationPrefs.email || false;
            document.getElementById('discordNotifications').checked = notificationPrefs.discord || false;
            document.getElementById('serverStatusNotifications').checked = notificationPrefs.serverStatus || false;
            
            // Set 2FA status
            document.getElementById('twoFactorEnabled').checked = userData.twoFactorEnabled || false;
        });


        // API Key visibility toggle
        function toggleApiKeyVisibility() {
            const apiKey = document.getElementById('apiKey');
            const apiKeyToggle = document.getElementById('apiKeyToggle');
            
            if (apiKey.type === 'password') {
                apiKey.type = 'text';
                apiKeyToggle.classList.remove('fa-eye');
                apiKeyToggle.classList.add('fa-eye-slash');
            } else {
                apiKey.type = 'password';
                apiKeyToggle.classList.remove('fa-eye-slash');
                apiKeyToggle.classList.add('fa-eye');
            }
        }

        // Update API Key
        function updateApiKey() {
            const apiKey = document.getElementById('apiKey').value;
            
            fetch('/api/settings/updateApiKey', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ apiKey })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('API Key updated successfully!');
                    location.reload();
                } else {
                    alert('Failed to update API Key: ' + data.error);
                }
            })
            .catch(error => {
                alert('An error occurred while updating the API Key');
                console.error('Error:', error);
            });
        }

        // Regenerate API Key
        function regenerateApiKey() {
            if (!confirm('Are you sure you want to regenerate your API Key? This will invalidate your current key.')) {
                return;
            }

            fetch('/api/settings/regenerateApiKey', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('apiKey').value = data.newApiKey;
                    alert('API Key regenerated successfully!');
                } else {
                    alert('Failed to regenerate API Key: ' + data.error);
                }
            })
            .catch(error => {
                alert('An error occurred while regenerating the API Key');
                console.error('Error:', error);
            });
        }

        // Disconnect Discord
        function disconnectDiscord() {
            if (!confirm('Are you sure you want to disconnect your Discord account?')) {
                return;
            }

            fetch('/api/settings/disconnectDiscord', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Discord account disconnected successfully!');
                    location.reload();
                } else {
                    alert('Failed to disconnect Discord account: ' + data.error);
                }
            })
            .catch(error => {
                alert('An error occurred while disconnecting Discord account');
                console.error('Error:', error);
            });
        }
    </script>
</body>
</html> 