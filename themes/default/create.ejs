<%
// Set the current page for active menu highlighting
const currentPage = 'create';

// Set the page title
const pageTitle = 'Create New Server - ' + (typeof extra !== 'undefined' && extra && extra.dashboard ? extra.dashboard.title : 'Dashboard');
%>

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	
	<title><%= pageTitle %></title>
    <link rel="icon" type="image/png" href="/assets/img/SriyanNodes_Logo.gif"/>
    
    <!-- Fonts and Icons -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@500&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Tailwind CSS -->
    <link href="/assets/css/styles.css" rel="stylesheet">
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Poppins', 'sans-serif'],
                    },
                    colors: {
                        primary: {
                            50: '#fff5f5',
                            100: '#fee2e2',
                            200: '#fecaca',
                            300: '#fca5a5',
                            400: '#f87171',
                            500: '#ef4444',
                            600: '#dc2626',
                            700: '#b91c1c',
                            800: '#991b1b',
                            900: '#7f1d1d',
                            950: '#450a0a',
                        },
                        dark: {
                            base: '#0f0f12',
                            light: '#1a1a21',
                            lighter: '#24242e',
                            card: '#1a1a21'
                        }
                    },
                    animation: {
                        'fade-in': 'fadeIn 0.5s ease-in-out',
                        'pulse-slow': 'pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite',
                        'float': 'float 3s ease-in-out infinite',
                    },
                    keyframes: {
                        fadeIn: {
                            '0%': { opacity: '0' },
                            '100%': { opacity: '1' },
                        },
                        float: {
                            '0%, 100%': { transform: 'translateY(0)' },
                            '50%': { transform: 'translateY(-10px)' },
                        }
                    },
                    boxShadow: {
                        'glow': '0 0 15px rgba(239, 68, 68, 0.5)',
                        'card': '0 8px 24px rgba(0, 0, 0, 0.12)',
                    }
                }
            }
        }
    </script>
    
    <style>
        body {
            background-color: #0f0f12;
            color: #f5f5f7;
            font-family: 'Poppins', sans-serif;
            background-image: radial-gradient(circle at 50% 50%, rgba(239, 68, 68, 0.1) 0%, transparent 50%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        .signature-font {
            font-family: 'Dancing Script', cursive;
            font-size: 18px;
        }
        
        /* Form styling */
        .form-input {
            background-color: rgba(26, 26, 31, 0.8);
            border: 1px solid rgba(45, 45, 53, 0.8);
            color: #f5f5f7;
            transition: all 0.3s ease;
            border-radius: 0.5rem;
            padding: 0.75rem 1rem;
            width: 100%;
        }
        
        .form-input:focus {
            border-color: rgba(239, 68, 68, 0.5);
            box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.2);
            outline: none;
        }
        
        .form-label {
            color: #a1a1aa;
            font-weight: 500;
            margin-bottom: 0.5rem;
            display: block;
        }
        
        .form-helper {
            color: #71717a;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
        
        .form-error {
            color: #ef4444;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
        
        .gradient-border {
            position: relative;
            border-radius: 0.75rem;
            overflow: hidden;
        }
        
        .gradient-border::before {
            content: "";
            position: absolute;
            inset: 0;
            border-radius: 0.75rem;
            padding: 1px;
            background: linear-gradient(45deg, #ef4444, #f87171, #dc2626);
            -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            -webkit-mask-composite: xor;
            mask-composite: exclude;
            z-index: 0;
            opacity: 0.3;
            transition: opacity 0.3s ease;
        }
        
        .gradient-border:hover::before {
            opacity: 1;
        }
        
        /* Create server page specific styles */
        .btn-primary {
            background: linear-gradient(135deg, #dc2626 0%, #ef4444 100%);
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.25);
            border-radius: 0.5rem;
            padding: 0.75rem 1.5rem;
            font-weight: 500;
            color: white;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        
        .btn-primary:hover {
            background: linear-gradient(135deg, #b91c1c 0%, #dc2626 100%);
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(239, 68, 68, 0.3);
        }
        
        .btn-primary:active {
            transform: translateY(0);
        }
        
        /* Notification styles */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 16px;
            border-radius: 8px;
            background-color: #1a1a21;
            color: white;
            font-weight: 500;
            max-width: 350px;
            z-index: 9999;
            transform: translateX(120%);
            transition: transform 0.3s ease-out;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-left: 4px solid #3b82f6;
        }
        
        .notification.success {
            border-left-color: #10b981;
        }
        
        .notification.error {
            border-left-color: #ef4444;
        }
        
        .notification.warning {
            border-left-color: #f59e0b;
        }
        
        .notification.info {
            border-left-color: #3b82f6;
        }
        
        .notification.show {
            transform: translateX(0);
        }
        
        /* Main layout wrapper */
        .dashboard-layout {
            display: flex;
            flex: 1;
            min-height: calc(100vh - 4rem); /* Subtract navbar height */
            position: relative;
        }
        
        /* Sidebar styles */
        .sidebar {
            background-color: rgba(22, 22, 24, 0.8);
            border-right: 1px solid rgba(45, 45, 53, 0.5);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
            position: fixed;
            left: 0;
            top: 4rem; /* Height of navbar */
            bottom: 0;
            width: 16rem; /* 64px */
            z-index: 40;
            transition: transform 0.3s ease;
        }
        
        /* Main content area */
        .main-content {
            flex: 1;
            margin-left: 16rem; /* Same as sidebar width */
            padding: 1rem;
            min-height: calc(100vh - 4rem - 6rem); /* Subtract navbar + footer height */
            position: relative;
            z-index: 30;
            padding-bottom: 2rem; /* Add extra padding at bottom */
        }
        
        @media (max-width: 640px) {
            .main-content {
                min-height: calc(100vh - 4rem - 12rem); /* Adjust for taller footer on mobile */
                margin-left: 0;
                padding-bottom: 4rem;
            }
        }
        
        /* Footer styles */
        footer {
            background: rgba(15, 15, 18, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-top: 1px solid rgba(255, 255, 255, 0.05);
            width: 100%;
            z-index: 20;
            margin-top: auto;
            position: relative; /* Ensure proper stacking */
            padding: 1.5rem 0;
        }
        
        .footer-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1.5rem 1rem;
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #1e1e24;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #3a3a43;
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: #4a4a55;
        }
        
        /* Custom styles */
        .bg-dark-card {
            background-color: rgba(26, 26, 31, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.05);
        }
        
        .bg-dark-lighter {
            background-color: rgba(32, 32, 38, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }
        
        .menu-item {
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .menu-item::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            height: 100%;
            width: 3px;
            background: #ef4444;
            transform: scaleY(0);
            transition: transform 0.3s ease;
        }
        
        .menu-item:hover::before {
            transform: scaleY(1);
        }
        
        .menu-item.active {
            background-color: rgba(239, 68, 68, 0.1);
            color: #fff;
        }
        
        .menu-item.active::before {
            transform: scaleY(1);
        }
        
        .menu-item.active i {
            color: #ef4444;
        }
        
        .navbar {
            background-color: rgba(15, 15, 18, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(45, 45, 53, 0.5);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }
        
        .navbar-search {
            background-color: rgba(26, 26, 31, 0.8);
            border: 1px solid rgba(45, 45, 53, 0.8);
            transition: all 0.3s ease;
        }
        
        .navbar-search:focus {
            border-color: rgba(239, 68, 68, 0.5);
            box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.25);
        }
        
        .glass-card {
            background-color: rgba(26, 26, 31, 0.6);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.05);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .progress-bar {
            height: 8px;
            background-color: rgba(45, 45, 53, 0.5);
            border-radius: 4px;
            margin-bottom: 10px;
            overflow: hidden;
        }
        
        .progress-bar-fill {
            height: 100%;
            border-radius: 4px;
            transition: width 0.5s ease;
        }
        
        .progress-bar-fill.ram {
            background: linear-gradient(to right, #4f46e5, #818cf8);
        }
        
        .progress-bar-fill.disk {
            background: linear-gradient(to right, #10b981, #34d399);
        }
        
        .progress-bar-fill.cpu {
            background: linear-gradient(to right, #f59e0b, #fbbf24);
        }
        
        .progress-bar-fill.servers {
            background: linear-gradient(to right, #8b5cf6, #a78bfa);
        }
        
        /* Mobile Responsive Styles */
        @media (max-width: 767px) {
            .sidebar {
                transform: translateX(-100%);
                width: 80%; /* Wider sidebar on mobile */
                max-width: 16rem;
            }
            
            .sidebar.active {
                transform: translateX(0);
            }
            
            .main-content {
                margin-left: 0;
                width: 100%;
                padding: 0.5rem;
            }
        }
    </style>
</head>
<body class="min-h-screen flex flex-col">
	<!-- Calculate server resources -->
	<%
		let ram = 0;
		let disk = 0;
		let cpu = 0;
		let servers = 0;
		
		if (pterodactyl && pterodactyl.relationships && pterodactyl.relationships.servers && pterodactyl.relationships.servers.data) {
			servers = pterodactyl.relationships.servers.data.length;
			
			for (let i = 0, len = pterodactyl.relationships.servers.data.length; i < len; i++) {
				ram = ram + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.memory == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.memory : 0);
				disk = disk + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.disk == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.disk : 0);
				cpu = cpu + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.cpu == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.cpu : 0);
			}
		}
		
		const userData = {
			id: userinfo.id,
			username: userinfo.username || userinfo.email.split('@')[0],
			email: userinfo.email,
			isAdmin: typeof req.session !== 'undefined' ? req.session.isAdmin : false
		};
		
		const packageData = typeof packages !== 'undefined' ? packages : {
			ram: 0,
			disk: 0,
			cpu: 0,
			servers: 0
		};
		
		// Calculate total resources (package + extra)
		const extraData = typeof extraresources !== 'undefined' ? extraresources : {
			ram: 0,
			disk: 0,
			cpu: 0,
			servers: 0
		};
		
		const totalRam = packageData.ram + extraData.ram;
		const totalDisk = packageData.disk + extraData.disk;
		const totalCpu = packageData.cpu + extraData.cpu;
		const totalServers = packageData.servers + extraData.servers;
		
		// Available resources
		const availableRam = totalRam - ram;
		const availableDisk = totalDisk - disk;
		const availableCpu = totalCpu - cpu;
		const availableServers = totalServers - servers;
		
		// Calculate progress percentages with safety checks
		const ramWidth = totalRam > 0 ? Math.min(100, Math.round((ram / totalRam) * 100)) : 0;
		const diskWidth = totalDisk > 0 ? Math.min(100, Math.round((disk / totalDisk) * 100)) : 0;
		const cpuWidth = totalCpu > 0 ? Math.min(100, Math.round((cpu / totalCpu) * 100)) : 0;
		const serversWidth = totalServers > 0 ? Math.min(100, Math.round((servers / totalServers) * 100)) : 0;
	%>

	<!-- Notification Toast Container -->
	<div id="notification-container" class="fixed top-4 right-4 z-50 flex flex-col items-end space-y-2"></div>

	<!-- Include Header Component -->
    <%- include('./components/header', { userData: userData, settings: settings, currentPage: currentPage }) %>

	<!-- Main Content Section (flex-grow to push footer down) -->
	<div class="flex flex-grow h-full pt-16">
		<!-- Include Sidebar Component -->
        <%- include('./components/sidebar', { userData: userData, settings: settings, currentPage: currentPage }) %>

		<!-- Main Content Area -->
		<div class="p-4 sm:ml-64 pt-5 w-full main-content flex-grow">
			<div class="p-4">
				<!-- Welcome Message -->
				<div class="mb-8 glass-card p-6 rounded-xl animate-fade-in">
					<h1 class="text-3xl font-bold mb-2">Create New Server</h1>
					<p class="text-gray-400">Configure and deploy your new game server with the available resources.</p>
				</div>

				<!-- Resource Stats -->
				<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8 animate-slide-up" style="animation-delay: 0.1s;">
					<!-- RAM Card -->
					<div class="gradient-border">
						<div class="stat-card h-full bg-dark-card rounded-lg p-6">
							<div class="flex items-center justify-between mb-4">
								<div class="flex items-center">
									<div class="w-12 h-12 rounded-lg bg-indigo-500/20 flex items-center justify-center mr-3">
										<i class="fas fa-memory text-indigo-400 text-xl"></i>
									</div>
									<div class="ml-4">
										<h3 class="text-lg font-semibold text-white">Available RAM</h3>
										<p class="text-gray-400 text-sm">Memory Resources</p>
									</div>
								</div>
								<span class="text-xl font-bold text-white"><%= availableRam %> <span class="text-gray-400 text-sm">/ <%= totalRam %> MB</span></span>
							</div>
							<div class="progress-bar">
								<div class="progress-bar-fill ram" style="width: <%= ramWidth %>%;"></div>
							</div>
						</div>
					</div>
					
					<!-- Disk Card -->
					<div class="gradient-border">
						<div class="stat-card h-full bg-dark-card rounded-lg p-6">
							<div class="flex items-center justify-between mb-4">
								<div class="flex items-center">
									<div class="w-12 h-12 rounded-lg bg-green-500/20 flex items-center justify-center mr-3">
										<i class="fas fa-hdd text-green-400 text-xl"></i>
									</div>
									<div class="ml-4">
										<h3 class="text-lg font-semibold text-white">Available Disk</h3>
										<p class="text-gray-400 text-sm">Storage Resources</p>
									</div>
								</div>
								<span class="text-xl font-bold text-white"><%= availableDisk %> <span class="text-gray-400 text-sm">/ <%= totalDisk %> MB</span></span>
							</div>
							<div class="progress-bar">
								<div class="progress-bar-fill disk" style="width: <%= diskWidth %>%;"></div>
							</div>
						</div>
					</div>
					
					<!-- CPU Card -->
					<div class="gradient-border">
						<div class="stat-card h-full bg-dark-card rounded-lg p-6">
							<div class="flex items-center justify-between mb-4">
								<div class="flex items-center">
									<div class="w-12 h-12 rounded-lg bg-amber-500/20 flex items-center justify-center mr-3">
										<i class="fas fa-microchip text-amber-400 text-xl"></i>
									</div>
									<div class="ml-4">
										<h3 class="text-lg font-semibold text-white">Available CPU</h3>
										<p class="text-gray-400 text-sm">Processor Resources</p>
									</div>
								</div>
								<span class="text-xl font-bold text-white"><%= availableCpu %> <span class="text-gray-400 text-sm">/ <%= totalCpu %>%</span></span>
							</div>
							<div class="progress-bar">
								<div class="progress-bar-fill cpu" style="width: <%= cpuWidth %>%;"></div>
							</div>
						</div>
					</div>
					
					<!-- Servers Card -->
					<div class="gradient-border">
						<div class="stat-card h-full bg-dark-card rounded-lg p-6">
							<div class="flex items-center justify-between mb-4">
								<div class="flex items-center">
									<div class="w-12 h-12 rounded-lg bg-purple-500/20 flex items-center justify-center mr-3">
										<i class="fas fa-server text-purple-400 text-xl"></i>
									</div>
									<div class="ml-4">
										<h3 class="text-lg font-semibold text-white">Available Servers</h3>
										<p class="text-gray-400 text-sm">Server Slots</p>
									</div>
								</div>
								<span class="text-xl font-bold text-white"><%= availableServers %> <span class="text-gray-400 text-sm">/ <%= totalServers %></span></span>
							</div>
							<div class="progress-bar">
								<div class="progress-bar-fill servers" style="width: <%= serversWidth %>%;"></div>
							</div>
						</div>
					</div>
				</div>

				<!-- Error Messages -->
				<% if (req.query.err) { %>
					<div class="bg-red-500/10 border border-red-500/30 rounded-lg p-4 mb-6">
						<div class="flex items-start">
							<div class="flex-shrink-0">
								<i class="fas fa-exclamation-triangle text-red-400 text-xl"></i>
							</div>
							<div class="ml-3">
								<h3 class="text-lg font-medium text-red-400">
									<% if (req.query.err === 'RAMEXCEED') { %>
										Not Enough RAM
									<% } else if (req.query.err === 'DISKEXCEED') { %>
										Not Enough Disk Space
									<% } else if (req.query.err === 'CPUEXCEED') { %>
										Not Enough CPU Resources
									<% } else if (req.query.err === 'SERVEREXCEED') { %>
										Server Limit Reached
									<% } else if (req.query.err === 'MISSINGVARIABLE') { %>
										Missing Required Information
									<% } else if (req.query.err === 'NOTENOUGHRAM') { %>
										Minimum RAM Requirement Not Met
									<% } else if (req.query.err === 'NOTENOUGHDISK') { %>
										Minimum Disk Requirement Not Met
									<% } else if (req.query.err === 'NOTENOUGHCPU') { %>
										Minimum CPU Requirement Not Met
									<% } else if (req.query.err === 'CONNECTIONERROR') { %>
										Connection Error
									<% } else if (req.query.err === 'NOALLOCATIONS') { %>
										No Available Allocations
									<% } else if (req.query.err === 'INVALIDLOCATION') { %>
										Invalid Location Selected
									<% } else { %>
										Error Creating Server
									<% } %>
								</h3>
								<div class="mt-2 text-sm text-gray-200">
									<% if (req.query.err === 'RAMEXCEED') { %>
										You don't have enough RAM available to create this server. You requested <%= req.query.err_ram %> MB but you only have <%= availableRam %> MB available.
									<% } else if (req.query.err === 'DISKEXCEED') { %>
										You don't have enough disk space available to create this server. You requested <%= req.query.err_disk %> MB but you only have <%= availableDisk %> MB available.
									<% } else if (req.query.err === 'CPUEXCEED') { %>
										You don't have enough CPU resources available to create this server. You requested <%= req.query.err_cpu %>% but you only have <%= availableCpu %>% available.
									<% } else if (req.query.err === 'SERVEREXCEED') { %>
										You have reached your maximum server limit. You need to upgrade your plan or purchase more server slots from the store to create additional servers.
									<% } else if (req.query.err === 'MISSINGVARIABLE') { %>
										Please fill in all required fields to create a server.
									<% } else if (req.query.err === 'NOTENOUGHRAM') { %>
										The minimum RAM requirement is 1024 MB. Please allocate at least 1024 MB of RAM to your server.
									<% } else if (req.query.err === 'NOTENOUGHDISK') { %>
										The minimum disk requirement is 1024 MB. Please allocate at least 1024 MB of disk space to your server.
									<% } else if (req.query.err === 'NOTENOUGHCPU') { %>
										The minimum CPU requirement is 10%. Please allocate at least 10% CPU to your server.
									<% } else if (req.query.err === 'CONNECTIONERROR') { %>
										Could not establish a connection to the game server node. This usually indicates a network issue between the panel and the node. Please try again in a few minutes or contact an administrator if the problem persists.
									<% } else if (req.query.err === 'NOALLOCATIONS') { %>
										The server could not be created because there are no available allocations (IP addresses and ports) on the selected node. Please try a different location or contact an administrator to add more allocations.
									<% } else if (req.query.err === 'INVALIDLOCATION') { %>
										The selected location is not valid or is not available for your account. Please choose a different location and try again.
									<% } else { %>
										An unexpected error occurred while trying to create your server. Please try again or contact support if the problem persists.
									<% } %>
								</div>
							</div>
						</div>
					</div>
				<% } %>

				<!-- Create Server Form -->
				<div class="glass-card rounded-xl border border-gray-700 p-6 mb-8">
					<form action="/api/servers/create" method="POST" id="createServerForm">
						<!-- Server Name -->
						<div class="mb-4">
							<label class="form-label">Server Name</label>
							<input type="text" name="name" class="form-input" placeholder="Enter server name" required>
							<p class="form-helper">Choose a unique name for your server</p>
						</div>

						<!-- Server Description -->
						<div class="mb-4">
							<label class="form-label">Server Description</label>
							<textarea name="description" class="form-input" rows="3" placeholder="Enter server description"></textarea>
							<p class="form-helper">Brief description of your server's purpose</p>
						</div>

						<!-- Server Type -->
						<div class="mb-4">
							<label class="form-label">Server Type</label>
							<select name="egg" class="form-input" required>
								<option value="">Select server type</option>
								<% if (typeof nests !== 'undefined' && nests.length > 0) { %>
									<% nests.forEach(nest => { %>
										<optgroup label="<%= nest.name %>">
											<% if (typeof eggs !== 'undefined' && eggs[nest.id]) { %>
												<% eggs[nest.id].forEach(egg => { %>
													<option value="<%= egg.id %>" data-nest="<%= nest.id %>"><%= egg.name %></option>
												<% }); %>
											<% } %>
										</optgroup>
									<% }); %>
								<% } else { %>
									<option value="1">Default Server</option>
								<% } %>
							</select>
							<p class="form-helper">Choose the game type for your server</p>
						</div>

						<!-- Egg-specific Variables -->
						<div id="eggVariables" class="mb-6 p-4 border border-gray-700/50 rounded-lg bg-dark-lighter/50 hidden">
							<h3 class="text-lg font-semibold mb-4">Server Configuration</h3>
							<div id="variableContainer" class="grid grid-cols-1 md:grid-cols-2 gap-4">
								<!-- Variables will be added here dynamically -->
							</div>
						</div>

						<!-- Resource Allocation -->
						<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-4">
							<div>
								<label class="form-label">RAM (MB)</label>
								<input type="number" name="ram" class="form-input" min="512" max="<%= availableRam %>" value="1024" required>
								<p class="form-helper">Available: <%= availableRam %> MB</p>
							</div>
							<div>
								<label class="form-label">Disk (MB)</label>
								<input type="number" name="disk" class="form-input" min="1024" max="<%= availableDisk %>" value="2048" required>
								<p class="form-helper">Available: <%= availableDisk %> MB</p>
							</div>
							<div>
								<label class="form-label">CPU (%)</label>
								<input type="number" name="cpu" class="form-input" min="50" max="<%= availableCpu %>" value="100" required>
								<p class="form-helper">Available: <%= availableCpu %>%</p>
							</div>
						</div>

						<!-- Server Location -->
						<div class="mb-6">
							<label class="form-label">Server Location</label>
							<select name="location" class="form-input" required>
								<option value="">Select location</option>
								<% if (typeof locations !== 'undefined' && locations.length > 0) { %>
									<% locations.forEach(location => { %>
										<option value="<%= location.id %>"><%= location.short %><% if (location.long) { %> - <%= location.long %><% } %></option>
									<% }); %>
								<% } else { %>
									<option value="1">Default Location</option>
								<% } %>
							</select>
							<p class="form-helper">Choose the region where your server will be hosted</p>
						</div>

						<!-- Submit Button -->
						<div class="flex justify-end mt-6">
							<button type="submit" class="btn-primary">
								<i class="fas fa-plus mr-2"></i>
								Create Server
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>

	<!-- Include Footer Component -->
    <%- include('./components/footer', { settings: settings }) %>

    <!-- Include Scripts Component -->
    <%- include('./components/scripts') %>

	<!-- Form-specific scripts -->
	<script>
		// Handle form submission
		document.addEventListener('DOMContentLoaded', function() {
			// Form submission handler for create server form
			const createServerForm = document.getElementById('createServerForm');
			if (createServerForm) {
				createServerForm.addEventListener('submit', function(e) {
					// Add any form validation if needed
					// For example, check if required fields are filled
					const name = document.querySelector('input[name="name"]').value;
					const ram = document.querySelector('input[name="ram"]').value;
					const disk = document.querySelector('input[name="disk"]').value;
					const cpu = document.querySelector('input[name="cpu"]').value;
					const egg = document.querySelector('select[name="egg"]').value;
					const location = document.querySelector('select[name="location"]').value;
					
					if (!name || !ram || !disk || !cpu || !egg || !location) {
						e.preventDefault();
						showNotification('error', 'Please fill in all required fields');
						return false;
					}
					
					// Show loading state
					const submitBtn = createServerForm.querySelector('button[type="submit"]');
					submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Creating...';
					submitBtn.disabled = true;
				});
			}
			
			// Dynamic egg variables handler
			const eggSelect = document.querySelector('select[name="egg"]');
			const eggVariables = document.getElementById('eggVariables');
			const variableContainer = document.getElementById('variableContainer');

			if (eggSelect && eggVariables && variableContainer) {
				// Load egg variables when egg type is selected
				eggSelect.addEventListener('change', async () => {
					const eggId = eggSelect.value;
					if (!eggId) {
						eggVariables.classList.add('hidden');
						return;
					}

					// Clear previous variables
					variableContainer.innerHTML = '';

					try {
						// Show loading indicator
						eggVariables.classList.remove('hidden');
						variableContainer.innerHTML = '<div class="text-center p-4"><i class="fas fa-spinner fa-spin text-2xl text-primary-600"></i><p class="mt-2 text-gray-400">Loading server configuration options...</p></div>';
						
						// Load egg variables using the API
						await loadEggVariables(eggId);
					} catch (error) {
						console.error('Error loading egg variables:', error);
						variableContainer.innerHTML = '<div class="p-4 text-red-500"><i class="fas fa-exclamation-triangle mr-2"></i>Failed to load server configuration options. Please try again.</div>';
						showNotification('error', 'Failed to load server configuration options');
					}
				});
			}

			// Function to load egg variables from API
			async function loadEggVariables(eggId) {
				try {
					// Fetch required variables from API
					const response = await fetch(`/api/egg/${eggId}/required-variables`);
					if (!response.ok) {
						throw new Error('Failed to fetch egg variables');
					}
					
					const data = await response.json();
					const variables = data.variables || [];
					
					// Clear loading indicator
					variableContainer.innerHTML = '';
					
					if (variables.length === 0) {
						// If no variables, hide the section or show a message
						if (variableContainer.childElementCount === 0) {
							eggVariables.classList.add('hidden');
						}
						return;
					}
					
					// Show the variables section
					eggVariables.classList.remove('hidden');
					
					// Add input fields for each variable
					variables.forEach(variable => {
						const fieldId = `env_${variable.env_variable.toLowerCase()}`;
						const fieldName = variable.env_variable.toLowerCase();
						
						const variableField = document.createElement('div');
						variableField.innerHTML = `
							<label class="form-label">${variable.name}${variable.rules.includes('required') ? ' <span class="text-red-500">*</span>' : ''}</label>
							<input type="text" id="${fieldId}" name="${fieldName}" class="form-input" 
								placeholder="${variable.description}" value="${variable.default_value || ''}" ${variable.rules.includes('required') ? 'required' : ''}>
							<p class="form-helper">${variable.description}</p>
						`;
						
						variableContainer.appendChild(variableField);
					});
					
					// Check if we have a missing variable in the URL query
					const urlParams = new URLSearchParams(window.location.search);
					const missingVar = urlParams.get('missing');
					if (missingVar) {
						const missingField = document.querySelector(`input[name="${missingVar}"]`);
						if (missingField) {
							missingField.classList.add('border-red-500');
							missingField.focus();
							
							// Add error message
							const errorMsg = document.createElement('p');
							errorMsg.className = 'text-red-500 text-sm mt-1';
							errorMsg.textContent = 'This field is required';
							missingField.insertAdjacentElement('afterend', errorMsg);
							
							// Show notification
							showNotification('error', 'Please fill in all required fields');
						}
					}
				} catch (error) {
					console.error('Error in loadEggVariables:', error);
					throw error;
				}
			}
			
			// Notification function
			window.showNotification = function(type, message, duration = 5000) {
				const container = document.getElementById('notification-container');
				if (!container) return;
				
				const notification = document.createElement('div');
				notification.className = `notification ${type}`;
				notification.innerHTML = `
					<div class="flex items-center">
						<i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-info-circle'} mr-2"></i>
						<span>${message}</span>
					</div>
					<button class="ml-2 text-white opacity-75 hover:opacity-100" onclick="this.parentElement.remove()">
						<i class="fas fa-times"></i>
					</button>
				`;
				
				container.appendChild(notification);
				
				// Show the notification with animation
				setTimeout(() => notification.classList.add('show'), 10);
				
				// Auto-close after duration
				if (duration > 0) {
					setTimeout(() => {
						notification.classList.remove('show');
						setTimeout(() => notification.remove(), 300);
					}, duration);
				}
			}
		});
	</script>
</body>
</html>