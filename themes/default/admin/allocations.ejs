<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Allocation Management | Flaxy Nodes</title>
    <link rel="icon" type="image/png" href="./assets/img/FlaxyNodes_logo.gif"/>
    
    <!-- Fonts and Icons -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Poppins', 'sans-serif'],
                    },
                    colors: {
                        primary: {
                            50: '#eef2ff',
                            100: '#e0e7ff',
                            200: '#c7d2fe',
                            300: '#a5b4fc',
                            400: '#818cf8',
                            500: '#6366f1',
                            600: '#4f46e5',
                            700: '#4338ca',
                            800: '#3730a3',
                            900: '#312e81',
                            950: '#1e1b4b',
                        },
                        dark: {
                            base: '#0f0f12',
                            light: '#1a1a21',
                            lighter: '#24242e',
                            card: '#1a1a21'
                        }
                    },
                    animation: {
                        'fade-in': 'fadeIn 0.5s ease-in-out',
                        'float': 'float 3s ease-in-out infinite',
                    },
                    keyframes: {
                        fadeIn: {
                            '0%': { opacity: '0' },
                            '100%': { opacity: '1' },
                        },
                        float: {
                            '0%, 100%': { transform: 'translateY(0)' },
                            '50%': { transform: 'translateY(-10px)' },
                        }
                    }
                }
            }
        }
    </script>
    
    <style>
        body {
            background-color: #0f0f12;
            color: #f5f5f7;
            font-family: 'Poppins', sans-serif;
        }
        
        .glass-card {
            background: rgba(26, 26, 31, 0.7);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .btn-primary {
            background-color: #6366f1;
            border-radius: 0.5rem;
            padding: 0.5rem 1rem;
            transition: all 0.3s ease;
        }
        
        .btn-primary:hover {
            background-color: #4f46e5;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(99, 102, 241, 0.2);
        }

        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #1e1e24;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #3a3a43;
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: #4a4a55;
        }
    </style>
</head>
<body class="min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <div class="flex items-center justify-between mb-8">
            <h1 class="text-3xl font-bold">Allocation Management</h1>
            <div class="flex space-x-3">
                <button type="button" class="btn-primary text-white font-medium" data-bs-toggle="modal" data-bs-target="#createAllocationModal">
                    <i class="fas fa-plus mr-2"></i> Create Allocation
                </button>
                <button type="button" class="px-4 py-2 bg-indigo-600/50 hover:bg-indigo-700/50 text-white rounded-lg transition-colors duration-200 flex items-center" data-bs-toggle="modal" data-bs-target="#bulkCreateModal">
                    <i class="fas fa-th mr-2"></i> Bulk Create
                </button>
            </div>
        </div>
        
        <!-- Introduction Card -->
        <div class="glass-card rounded-2xl p-6 mb-8 animate-fade-in">
            <div class="flex items-start">
                <div class="w-12 h-12 rounded-full bg-primary-500/10 flex items-center justify-center mr-4">
                    <i class="fas fa-network-wired text-primary-500 text-xl"></i>
                </div>
                <div>
                    <h2 class="text-xl font-semibold mb-2">Allocations</h2>
                    <p class="text-gray-300">Allocations are IP and port combinations assigned to nodes, which can be assigned to servers. Each server needs at least one allocation to be accessible.</p>
                </div>
            </div>
        </div>
        
        <!-- Node Filter and Search -->
        <div class="glass-card rounded-2xl p-6 mb-8 animate-fade-in">
            <div class="flex flex-col md:flex-row gap-4">
                <div class="flex-1">
                    <label for="searchAllocation" class="block text-sm font-medium text-gray-400 mb-1">Search Allocations</label>
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                            <i class="fas fa-search text-gray-500"></i>
                        </div>
                        <input type="text" id="searchAllocation" class="w-full pl-10 pr-4 py-2 bg-dark-lighter text-white rounded-lg border border-gray-700 focus:border-primary-500 focus:ring-2 focus:ring-primary-500 focus:outline-none" placeholder="Search by IP, port, or alias...">
                    </div>
                </div>
                <div class="w-full md:w-64">
                    <label for="nodeFilter" class="block text-sm font-medium text-gray-400 mb-1">Filter by Node</label>
                    <select id="nodeFilter" class="w-full py-2 px-3 bg-dark-lighter text-white rounded-lg border border-gray-700 focus:border-primary-500 focus:ring-2 focus:ring-primary-500 focus:outline-none">
                        <option value="">All Nodes</option>
                        <% if (nodes && nodes.length > 0) { %>
                            <% nodes.forEach(node => { %>
                                <option value="<%= node.id %>"><%= node.name %></option>
                            <% }); %>
                        <% } %>
                    </select>
                </div>
                <div class="w-full md:w-64">
                    <label for="statusFilter" class="block text-sm font-medium text-gray-400 mb-1">Filter by Status</label>
                    <select id="statusFilter" class="w-full py-2 px-3 bg-dark-lighter text-white rounded-lg border border-gray-700 focus:border-primary-500 focus:ring-2 focus:ring-primary-500 focus:outline-none">
                        <option value="">All Status</option>
                        <option value="assigned">Assigned</option>
                        <option value="unassigned">Unassigned</option>
                    </select>
                </div>
                <div class="w-full md:w-auto flex items-end">
                    <button type="button" class="w-full md:w-auto px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors duration-200">
                        <i class="fas fa-filter mr-2"></i> Apply Filters
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Allocations Table -->
        <div class="glass-card rounded-2xl p-6 mb-8 animate-fade-in">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-xl font-semibold">All Allocations</h2>
            </div>
            
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead>
                        <tr class="text-left text-gray-400 text-sm border-b border-gray-700">
                            <th class="pb-3 font-medium">IP Address</th>
                            <th class="pb-3 font-medium">Port</th>
                            <th class="pb-3 font-medium">Alias</th>
                            <th class="pb-3 font-medium">Node</th>
                            <th class="pb-3 font-medium">Status</th>
                            <th class="pb-3 font-medium">Assigned To</th>
                            <th class="pb-3 font-medium">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (allocations && allocations.length > 0) { %>
                            <% allocations.forEach(allocation => { %>
                                <tr class="border-b border-gray-700/50 hover:bg-dark-lighter/30 transition-colors duration-150">
                                    <td class="py-4"><code class="bg-dark-lighter px-2 py-1 rounded text-sm"><%= allocation.ip %></code></td>
                                    <td class="py-4"><code class="bg-dark-lighter px-2 py-1 rounded text-sm"><%= allocation.port %></code></td>
                                    <td class="py-4"><%= allocation.alias || '-' %></td>
                                    <td class="py-4">
                                        <div class="flex items-center">
                                            <div class="w-8 h-8 rounded-full bg-primary-500/10 flex items-center justify-center mr-3">
                                                <i class="fas fa-microchip text-primary-500"></i>
                                            </div>
                                            <span><%= allocation.node_name || 'Unknown' %></span>
                                        </div>
                                    </td>
                                    <td class="py-4">
                                        <% if (allocation.assigned) { %>
                                            <span class="px-2 py-1 rounded-full text-xs font-medium bg-emerald-900/30 text-emerald-400">
                                                Assigned
                                            </span>
                                        <% } else { %>
                                            <span class="px-2 py-1 rounded-full text-xs font-medium bg-blue-900/30 text-blue-400">
                                                Unassigned
                                            </span>
                                        <% } %>
                                    </td>
                                    <td class="py-4"><%= allocation.assigned_to || '-' %></td>
                                    <td class="py-4">
                                        <div class="flex space-x-2">
                                            <button onclick="editAllocation('<%= allocation.id %>')" class="p-2 rounded-lg bg-blue-500/10 text-blue-400 hover:bg-blue-500/20 transition-colors duration-200" title="Edit Allocation">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <% if (!allocation.assigned) { %>
                                                <button onclick="deleteAllocation('<%= allocation.id %>')" class="p-2 rounded-lg bg-red-500/10 text-red-400 hover:bg-red-500/20 transition-colors duration-200" title="Delete Allocation">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            <% } else { %>
                                                <button disabled class="p-2 rounded-lg bg-gray-500/10 text-gray-400 cursor-not-allowed" title="Cannot delete assigned allocation">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            <% } %>
                                        </div>
                                    </td>
                                </tr>
                            <% }); %>
                        <% } else { %>
                            <tr>
                                <td colspan="7" class="py-4 text-center text-gray-400">No allocations found</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
            
            <!-- Pagination -->
            <div class="mt-6 flex justify-between items-center flex-wrap">
                <div class="text-sm text-gray-400">
                    Showing <span class="font-semibold">1-10</span> of <span class="font-semibold"><%= allocations ? allocations.length : 0 %></span> allocations
                </div>
                <div class="flex space-x-1 mt-4 sm:mt-0">
                    <button class="px-3 py-1 rounded bg-dark-lighter text-gray-400 disabled:opacity-50 disabled:cursor-not-allowed">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <button class="px-3 py-1 rounded bg-primary-600 text-white">1</button>
                    <button class="px-3 py-1 rounded bg-dark-lighter text-gray-400 hover:bg-dark-base">2</button>
                    <button class="px-3 py-1 rounded bg-dark-lighter text-gray-400 hover:bg-dark-base">3</button>
                    <button class="px-3 py-1 rounded bg-dark-lighter text-gray-400 hover:bg-dark-base">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Create Allocation Modal -->
    <div class="fixed inset-0 z-50 hidden items-center justify-center overflow-y-auto overflow-x-hidden" id="createAllocationModal" tabindex="-1" aria-labelledby="createAllocationModalLabel" aria-hidden="true">
        <div class="fixed inset-0 bg-black bg-opacity-50 transition-opacity"></div>
        <div class="relative max-w-md w-full p-6 mx-auto my-8">
            <div class="bg-dark-light rounded-xl shadow-xl border border-gray-700 p-6">
                <div class="flex items-start justify-between mb-4">
                    <h3 class="text-xl font-semibold text-white" id="createAllocationModalLabel">Create New Allocation</h3>
                    <button type="button" class="text-gray-400 hover:text-white" data-bs-dismiss="modal" aria-label="Close">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form action="/admin/allocations/create" method="POST">
                    <div class="space-y-4">
                        <div>
                            <label for="node_id" class="block text-sm font-medium text-gray-400 mb-1">Node</label>
                            <select id="node_id" name="node_id" class="w-full py-2 px-3 bg-dark-lighter text-white rounded-lg border border-gray-700 focus:border-primary-500 focus:ring-2 focus:ring-primary-500 focus:outline-none" required>
                                <option value="">Select Node</option>
                                <% if (nodes && nodes.length > 0) { %>
                                    <% nodes.forEach(node => { %>
                                        <option value="<%= node.id %>"><%= node.name %></option>
                                    <% }); %>
                                <% } %>
                            </select>
                        </div>
                        <div>
                            <label for="ip" class="block text-sm font-medium text-gray-400 mb-1">IP Address</label>
                            <input type="text" id="ip" name="ip" class="w-full py-2 px-3 bg-dark-lighter text-white rounded-lg border border-gray-700 focus:border-primary-500 focus:ring-2 focus:ring-primary-500 focus:outline-none" placeholder="0.0.0.0" required>
                        </div>
                        <div>
                            <label for="port" class="block text-sm font-medium text-gray-400 mb-1">Port</label>
                            <input type="number" id="port" name="port" class="w-full py-2 px-3 bg-dark-lighter text-white rounded-lg border border-gray-700 focus:border-primary-500 focus:ring-2 focus:ring-primary-500 focus:outline-none" placeholder="25565" min="1" max="65535" required>
                        </div>
                        <div>
                            <label for="alias" class="block text-sm font-medium text-gray-400 mb-1">Alias (Optional)</label>
                            <input type="text" id="alias" name="alias" class="w-full py-2 px-3 bg-dark-lighter text-white rounded-lg border border-gray-700 focus:border-primary-500 focus:ring-2 focus:ring-primary-500 focus:outline-none" placeholder="Minecraft Server">
                        </div>
                    </div>
                    <div class="flex items-center justify-end mt-6">
                        <button type="button" class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors duration-200 mr-3" data-bs-dismiss="modal">
                            Cancel
                        </button>
                        <button type="submit" class="px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors duration-200">
                            Create Allocation
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <!-- Bulk Create Allocations Modal -->
    <div class="fixed inset-0 z-50 hidden items-center justify-center overflow-y-auto overflow-x-hidden" id="bulkCreateModal" tabindex="-1" aria-labelledby="bulkCreateModalLabel" aria-hidden="true">
        <div class="fixed inset-0 bg-black bg-opacity-50 transition-opacity"></div>
        <div class="relative max-w-md w-full p-6 mx-auto my-8">
            <div class="bg-dark-light rounded-xl shadow-xl border border-gray-700 p-6">
                <div class="flex items-start justify-between mb-4">
                    <h3 class="text-xl font-semibold text-white" id="bulkCreateModalLabel">Bulk Create Allocations</h3>
                    <button type="button" class="text-gray-400 hover:text-white" data-bs-dismiss="modal" aria-label="Close">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form action="/admin/allocations/bulk" method="POST">
                    <div class="space-y-4">
                        <div>
                            <label for="bulk_node_id" class="block text-sm font-medium text-gray-400 mb-1">Node</label>
                            <select id="bulk_node_id" name="node_id" class="w-full py-2 px-3 bg-dark-lighter text-white rounded-lg border border-gray-700 focus:border-primary-500 focus:ring-2 focus:ring-primary-500 focus:outline-none" required>
                                <option value="">Select Node</option>
                                <% if (nodes && nodes.length > 0) { %>
                                    <% nodes.forEach(node => { %>
                                        <option value="<%= node.id %>"><%= node.name %></option>
                                    <% }); %>
                                <% } %>
                            </select>
                        </div>
                        <div>
                            <label for="bulk_ip" class="block text-sm font-medium text-gray-400 mb-1">IP Address</label>
                            <input type="text" id="bulk_ip" name="ip" class="w-full py-2 px-3 bg-dark-lighter text-white rounded-lg border border-gray-700 focus:border-primary-500 focus:ring-2 focus:ring-primary-500 focus:outline-none" placeholder="0.0.0.0" required>
                        </div>
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label for="bulk_port_start" class="block text-sm font-medium text-gray-400 mb-1">Starting Port</label>
                                <input type="number" id="bulk_port_start" name="port_start" class="w-full py-2 px-3 bg-dark-lighter text-white rounded-lg border border-gray-700 focus:border-primary-500 focus:ring-2 focus:ring-primary-500 focus:outline-none" placeholder="25565" min="1" max="65535" required>
                            </div>
                            <div>
                                <label for="bulk_port_end" class="block text-sm font-medium text-gray-400 mb-1">Ending Port</label>
                                <input type="number" id="bulk_port_end" name="port_end" class="w-full py-2 px-3 bg-dark-lighter text-white rounded-lg border border-gray-700 focus:border-primary-500 focus:ring-2 focus:ring-primary-500 focus:outline-none" placeholder="25575" min="1" max="65535" required>
                            </div>
                        </div>
                    </div>
                    <div class="flex items-center justify-end mt-6">
                        <button type="button" class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors duration-200 mr-3" data-bs-dismiss="modal">
                            Cancel
                        </button>
                        <button type="submit" class="px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors duration-200">
                            Create Allocations
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <script>
        // Delete Allocation Function
        function deleteAllocation(allocationId) {
            if (confirm('Are you sure you want to delete this allocation? This action cannot be undone.')) {
                window.location.href = `/admin/allocations/${allocationId}/delete`;
            }
        }
        
        // Edit Allocation Function
        function editAllocation(allocationId) {
            window.location.href = `/admin/allocations/${allocationId}/edit`;
        }
        
        // Modal Controls
        document.addEventListener('DOMContentLoaded', function() {
            const modalIds = ['createAllocationModal', 'bulkCreateModal'];
            
            modalIds.forEach(modalId => {
                const modalElement = document.getElementById(modalId);
                const toggleBtns = document.querySelectorAll(`[data-bs-toggle="modal"][data-bs-target="#${modalId}"]`);
                const closeBtns = modalElement.querySelectorAll('[data-bs-dismiss="modal"]');
                
                toggleBtns.forEach(btn => {
                    btn.addEventListener('click', function() {
                        modalElement.classList.remove('hidden');
                        modalElement.classList.add('flex');
                    });
                });
                
                closeBtns.forEach(btn => {
                    btn.addEventListener('click', function() {
                        modalElement.classList.add('hidden');
                        modalElement.classList.remove('flex');
                    });
                });
                
                // Close modal when clicking outside
                modalElement.addEventListener('click', function(event) {
                    if (event.target === modalElement) {
                        modalElement.classList.add('hidden');
                        modalElement.classList.remove('flex');
                    }
                });
            });
            
            // Filter functionality
            const searchInput = document.getElementById('searchAllocation');
            const nodeFilter = document.getElementById('nodeFilter');
            const statusFilter = document.getElementById('statusFilter');
            
            if (searchInput) {
                searchInput.addEventListener('keyup', filterAllocations);
            }
            
            if (nodeFilter) {
                nodeFilter.addEventListener('change', filterAllocations);
            }
            
            if (statusFilter) {
                statusFilter.addEventListener('change', filterAllocations);
            }
            
            function filterAllocations() {
                const searchValue = searchInput.value.toLowerCase();
                const nodeValue = nodeFilter.value;
                const statusValue = statusFilter.value;
                
                const tableRows = document.querySelectorAll('tbody tr');
                
                tableRows.forEach(row => {
                    const ip = row.querySelector('td:nth-child(1)').textContent.toLowerCase();
                    const port = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
                    const alias = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
                    const node = row.querySelector('td:nth-child(4)').textContent.toLowerCase();
                    const status = row.querySelector('td:nth-child(5)').textContent.toLowerCase();
                    
                    let showRow = true;
                    
                    // Search filter
                    if (searchValue && !(ip.includes(searchValue) || port.includes(searchValue) || alias.includes(searchValue))) {
                        showRow = false;
                    }
                    
                    // Node filter
                    if (nodeValue && !node.includes(nodeValue)) {
                        showRow = false;
                    }
                    
                    // Status filter
                    if (statusValue && !status.includes(statusValue)) {
                        showRow = false;
                    }
                    
                    row.style.display = showRow ? '' : 'none';
                });
            }
        });
    </script>
</body>
</html> 