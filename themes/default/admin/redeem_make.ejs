<%
// Set the current page for active menu highlighting
const currentPage = 'admin_redeem';

// Set the page title
const pageTitle = title || 'Redeem Codes - Admin';

// Get user data from pterodactyl session
const userData = {
	id: req.session.pterodactyl.id,
	username: req.session.pterodactyl.username,
	email: req.session.pterodactyl.email,
	isAdmin: req.session.isAdmin
};

// Set up admin stats based on available data
const totalUsers = typeof req.session.allUsers !== 'undefined' ? req.session.allUsers.length : 0;
const totalServers = typeof req.session.allServers !== 'undefined' ? req.session.allServers.length : 0;
const activeUsers = Math.floor(totalUsers * 0.8); // Placeholder - replace with actual data
const revenue = Math.floor(Math.random() * 5000); // Placeholder - replace with actual data
%>

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta name="description" content="Admin Redeem Code Management">
	<meta name="theme-color" content="#0f0f12">
	
	<!-- Security Headers -->
	<meta http-equiv="Content-Security-Policy" content="default-src 'self' https: 'unsafe-inline' 'unsafe-eval'; img-src 'self' https: data:; font-src 'self' https: data:;">
	<meta http-equiv="X-Content-Type-Options" content="nosniff">
	<meta http-equiv="X-Frame-Options" content="SAMEORIGIN">
	<meta http-equiv="X-XSS-Protection" content="1; mode=block">
	
	<title><%= pageTitle %></title>
	<link rel="icon" type="image/png" href="/assets/img/Dashashtra_Logo.gif"/>
	
	<!-- Fonts and Icons -->
	<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
	<link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@500&display=swap" rel="stylesheet">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
	
	<!-- Tailwind CSS -->
	<link href="/assets/css/styles.css" rel="stylesheet">
	<script>
		tailwind.config = {
			darkMode: 'class',
			theme: {
				extend: {
					fontFamily: {
						sans: ['Poppins', 'sans-serif'],
					},
					colors: {
						primary: {
							50: '#fff5f5',
							100: '#fee2e2',
							200: '#fecaca',
							300: '#fca5a5',
							400: '#f87171',
							500: '#ef4444',
							600: '#dc2626',
							700: '#b91c1c',
							800: '#991b1b',
							900: '#7f1d1d',
							950: '#450a0a',
						},
						dark: {
							base: '#0f0f12',
							light: '#1a1a21',
							lighter: '#24242e',
							card: '#1a1a21'
						}
					},
					animation: {
						'fade-in': 'fadeIn 0.5s ease-in-out',
						'pulse-slow': 'pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite',
						'float': 'float 3s ease-in-out infinite',
					},
					keyframes: {
						fadeIn: {
							'0%': { opacity: '0' },
							'100%': { opacity: '1' },
						},
						float: {
							'0%, 100%': { transform: 'translateY(0)' },
							'50%': { transform: 'translateY(-10px)' },
						}
					},
					boxShadow: {
						'glow': '0 0 15px rgba(239, 68, 68, 0.5)',
						'card': '0 8px 24px rgba(0, 0, 0, 0.12)',
					}
				}
			}
		}
	</script>
	
	<style>
		body {
			background-color: #0f0f12;
			color: #f5f5f7;
			font-family: 'Poppins', sans-serif;
			background-image: radial-gradient(circle at 50% 50%, rgba(239, 68, 68, 0.1) 0%, transparent 50%);
			min-height: 100vh;
			display: flex;
			flex-direction: column;
		}
		
		.signature-font {
			font-family: 'Dancing Script', cursive;
			font-size: 18px;
		}
		
		/* Form styling */
		.form-input {
			background-color: rgba(26, 26, 31, 0.8);
			border: 1px solid rgba(45, 45, 53, 0.8);
			color: #f5f5f7;
			transition: all 0.3s ease;
			border-radius: 0.5rem;
			padding: 0.75rem 1rem;
			width: 100%;
		}
		
		.form-input:focus {
			border-color: rgba(239, 68, 68, 0.5);
			box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.2);
			outline: none;
		}
		
		.form-label {
			color: #a1a1aa;
			font-weight: 500;
			margin-bottom: 0.5rem;
			display: block;
		}
		
		.form-helper {
			color: #71717a;
			font-size: 0.875rem;
			margin-top: 0.25rem;
		}
		
		.form-error {
			color: #ef4444;
			font-size: 0.875rem;
			margin-top: 0.25rem;
		}
		
		.gradient-border {
			position: relative;
			border-radius: 0.75rem;
			overflow: hidden;
		}
		
		.gradient-border::before {
			content: "";
			position: absolute;
			inset: 0;
			border-radius: 0.75rem;
			padding: 1px;
			background: linear-gradient(45deg, #ef4444, #f87171, #dc2626);
			-webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
			mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
			-webkit-mask-composite: xor;
			mask-composite: exclude;
			z-index: 0;
			opacity: 0.3;
			transition: opacity 0.3s ease;
		}
		
		.gradient-border:hover::before {
			opacity: 1;
		}
		
		/* Create server page specific styles */
		.btn-primary {
			background: linear-gradient(135deg, #dc2626 0%, #ef4444 100%);
			transition: all 0.3s ease;
			box-shadow: 0 4px 12px rgba(239, 68, 68, 0.25);
			border-radius: 0.5rem;
			padding: 0.75rem 1.5rem;
			font-weight: 500;
			color: white;
			display: inline-flex;
			align-items: center;
			justify-content: center;
		}
		
		.btn-primary:hover {
			background: linear-gradient(135deg, #b91c1c 0%, #dc2626 100%);
			transform: translateY(-2px);
			box-shadow: 0 6px 16px rgba(239, 68, 68, 0.3);
		}
		
		.btn-primary:active {
			transform: translateY(0);
		}
		
		/* Notification styles */
		.notification {
			position: fixed;
			top: 20px;
			right: 20px;
			padding: 12px 16px;
			border-radius: 8px;
			background-color: #1a1a21;
			color: white;
			font-weight: 500;
			max-width: 350px;
			z-index: 9999;
			transform: translateX(120%);
			transition: transform 0.3s ease-out;
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
			display: flex;
			align-items: center;
			justify-content: space-between;
			border-left: 4px solid #3b82f6;
		}
		
		.notification.success {
			border-left-color: #10b981;
		}
		
		.notification.error {
			border-left-color: #ef4444;
		}
		
		.notification.warning {
			border-left-color: #f59e0b;
		}
		
		.notification.info {
			border-left-color: #3b82f6;
		}
		
		.notification.show {
			transform: translateX(0);
		}
		
		/* Main layout wrapper */
		.dashboard-layout {
			display: flex;
			flex: 1;
			min-height: calc(100vh - 4rem); /* Subtract navbar height */
			position: relative;
		}
		
		/* Sidebar styles */
		.sidebar {
			background-color: rgba(22, 22, 24, 0.8);
			border-right: 1px solid rgba(45, 45, 53, 0.5);
			backdrop-filter: blur(10px);
			-webkit-backdrop-filter: blur(10px);
			box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
			position: fixed;
			left: 0;
			top: 4rem; /* Height of navbar */
			bottom: 0;
			width: 16rem; /* 64px */
			z-index: 40;
			transition: transform 0.3s ease;
		}
		
		/* Main content area */
		.main-content {
			flex: 1;
			margin-left: 16rem; /* Same as sidebar width */
			padding: 1rem;
			min-height: calc(100vh - 4rem - 6rem); /* Subtract navbar + footer height */
			position: relative;
			z-index: 30;
			padding-bottom: 2rem; /* Add extra padding at bottom */
		}
		
		@media (max-width: 640px) {
			.main-content {
				min-height: calc(100vh - 4rem - 12rem); /* Adjust for taller footer on mobile */
				margin-left: 0;
				padding-bottom: 4rem;
			}
		}
		
		/* Footer styles */
		footer {
			background: rgba(15, 15, 18, 0.8);
			backdrop-filter: blur(10px);
			-webkit-backdrop-filter: blur(10px);
			border-top: 1px solid rgba(255, 255, 255, 0.05);
			width: 100%;
			z-index: 20;
			margin-top: auto;
			position: relative; /* Ensure proper stacking */
			padding: 1.5rem 0;
		}
		
		.footer-content {
			max-width: 1200px;
			margin: 0 auto;
			padding: 1.5rem 1rem;
		}
		
		/* Custom scrollbar */
		::-webkit-scrollbar {
			width: 8px;
			height: 8px;
		}
		
		::-webkit-scrollbar-track {
			background: #1e1e24;
		}
		
		::-webkit-scrollbar-thumb {
			background: #3a3a43;
			border-radius: 4px;
		}
		
		::-webkit-scrollbar-thumb:hover {
			background: #4a4a55;
		}
		
		/* Custom styles */
		.bg-dark-card {
			background-color: rgba(26, 26, 31, 0.8);
			backdrop-filter: blur(10px);
			-webkit-backdrop-filter: blur(10px);
			border: 1px solid rgba(255, 255, 255, 0.05);
		}
		
		.bg-dark-lighter {
			background-color: rgba(32, 32, 38, 0.8);
			backdrop-filter: blur(10px);
			-webkit-backdrop-filter: blur(10px);
		}
		
		.menu-item {
			transition: all 0.3s ease;
			position: relative;
			overflow: hidden;
		}
		
		.menu-item::before {
			content: '';
			position: absolute;
			left: 0;
			top: 0;
			height: 100%;
			width: 3px;
			background: #ef4444;
			transform: scaleY(0);
			transition: transform 0.3s ease;
		}
		
		.menu-item:hover::before {
			transform: scaleY(1);
		}
		
		.menu-item.active {
			background-color: rgba(239, 68, 68, 0.1);
			color: #fff;
		}
		
		.menu-item.active::before {
			transform: scaleY(1);
		}
		
		.menu-item.active i {
			color: #ef4444;
		}
		
		.navbar {
			background-color: rgba(15, 15, 18, 0.8);
			backdrop-filter: blur(10px);
			-webkit-backdrop-filter: blur(10px);
			border-bottom: 1px solid rgba(45, 45, 53, 0.5);
			box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
		}
		
		.navbar-search {
			background-color: rgba(26, 26, 31, 0.8);
			border: 1px solid rgba(45, 45, 53, 0.8);
			transition: all 0.3s ease;
		}
		
		.navbar-search:focus {
			border-color: rgba(239, 68, 68, 0.5);
			box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.25);
		}
		
		.glass-card {
			background-color: rgba(26, 26, 31, 0.6);
			backdrop-filter: blur(10px);
			-webkit-backdrop-filter: blur(10px);
			border: 1px solid rgba(255, 255, 255, 0.05);
			box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
		}
		
		.progress-bar {
			height: 8px;
			background-color: rgba(45, 45, 53, 0.5);
			border-radius: 4px;
			margin-bottom: 10px;
			overflow: hidden;
		}
		
		.progress-bar-fill {
			height: 100%;
			border-radius: 4px;
			transition: width 0.5s ease;
		}
		
		.progress-bar-fill.ram {
			background: linear-gradient(to right, #4f46e5, #818cf8);
		}
		
		.progress-bar-fill.disk {
			background: linear-gradient(to right, #10b981, #34d399);
		}
		
		.progress-bar-fill.cpu {
			background: linear-gradient(to right, #f59e0b, #fbbf24);
		}
		
		.progress-bar-fill.servers {
			background: linear-gradient(to right, #8b5cf6, #a78bfa);
		}
		
		/* Mobile Responsive Styles */
		@media (max-width: 767px) {
			.sidebar {
				transform: translateX(-100%);
				width: 80%; /* Wider sidebar on mobile */
				max-width: 16rem;
			}
			
			.sidebar.active {
				transform: translateX(0);
			}
			
			.main-content {
				margin-left: 0;
				width: 100%;
				padding: 0.5rem;
			}
		}
	</style>
</head>
<body class="min-h-screen bg-dark-base">

	<%- include('../components/admin_header', { userData: userData, settings: settings, currentPage: currentPage }) %>

	<div class="flex h-screen pt-16">
		<!-- Sidebar -->
		<%- include('../components/admin_sidebar', { userData: userData, settings: settings, currentPage: currentPage }) %>

		<!-- Main Content -->
		<div class="p-4 sm:ml-64 pt-5 w-full main-content min-h-screen flex flex-col">
			<div class="container mx-auto px-4 py-8">
				<!-- Page Header -->
				<div class="mb-8 glass-card p-6 rounded-xl animate-fade-in">
					<div class="flex items-center justify-between">
						<div>
							<h1 class="text-3xl font-bold mb-2">Redeem Code Management</h1>
							<p class="text-gray-400">Create and manage redeem codes for users to claim credits.</p>
						</div>
						<div class="w-12 h-12 rounded-full bg-primary-500/10 flex items-center justify-center">
							<i class="fas fa-gift text-primary-500 text-xl"></i>
						</div>
					</div>
				</div>

				<!-- Create Redeem Code Form -->
				<div class="mb-8 glass-card p-6 rounded-xl animate-fade-in">
					<h2 class="text-2xl font-semibold mb-6 flex items-center">
						<i class="fas fa-plus-circle text-primary-500 mr-3"></i>
						Create New Redeem Code
					</h2>
					<form id="createRedeemForm" class="space-y-6">
						<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
							<!-- Credits Amount -->
							<div>
								<label class="block text-sm font-medium text-gray-400 mb-2">Credits Amount</label>
								<input type="number" name="credits_amount" required min="1"
									class="form-input bg-dark-lighter border border-gray-700 rounded-lg px-4 py-2.5 w-full text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-300"
									placeholder="Enter amount of credits">
								<p class="mt-2 text-sm text-gray-500">Amount of credits to be awarded</p>
							</div>

							<!-- Max Uses -->
							<div>
								<label class="block text-sm font-medium text-gray-400 mb-2">Maximum Uses</label>
								<input type="number" name="max_uses" required min="1"
									class="form-input bg-dark-lighter border border-gray-700 rounded-lg px-4 py-2.5 w-full text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-300"
									placeholder="Enter maximum uses">
								<p class="mt-2 text-sm text-gray-500">How many times this code can be used</p>
							</div>

							<!-- Expiration Date -->
							<div>
								<label class="block text-sm font-medium text-gray-400 mb-2">Expiration Date (Optional)</label>
								<input type="datetime-local" name="expires_at"
									class="form-input bg-dark-lighter border border-gray-700 rounded-lg px-4 py-2.5 w-full text-white focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-300">
								<p class="mt-2 text-sm text-gray-500">When this code will expire</p>
							</div>
						</div>

						<div class="flex justify-end mt-6">
							<button type="submit"
								class="btn-primary bg-gradient-to-r from-primary-600 to-primary-500 text-white px-6 py-2.5 rounded-lg font-medium transition-all duration-300 hover:from-primary-700 hover:to-primary-600 transform hover:-translate-y-0.5 shadow-lg hover:shadow-primary-500/25 flex items-center">
								<i class="fas fa-plus mr-2"></i>
								Create Code
							</button>
						</div>
					</form>
				</div>

				<!-- Existing Redeem Codes -->
				<div class="glass-card rounded-xl p-6 animate-fade-in">
					<h2 class="text-2xl font-semibold mb-6 flex items-center">
						<i class="fas fa-list text-primary-500 mr-3"></i>
						Existing Redeem Codes
					</h2>
					<div class="overflow-x-auto">
						<table class="w-full">
							<thead>
								<tr class="text-left text-gray-400 text-sm border-b border-gray-700">
									<th class="pb-3 font-medium">Code</th>
									<th class="pb-3 font-medium">Credits</th>
									<th class="pb-3 font-medium">Uses</th>
									<th class="pb-3 font-medium">Expires</th>
									<th class="pb-3 font-medium">Created</th>
									<th class="pb-3 font-medium">Actions</th>
								</tr>
							</thead>
							<tbody id="redeemCodesTable">
								<!-- Codes will be loaded here -->
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Include Footer -->
	<%- include('../components/admin_footer', { settings: settings }) %>

	<!-- Include Scripts Component -->
	<%- include('../components/scripts') %>

	<!-- Notification Container -->
	<div id="notification-container" class="fixed top-4 right-4 z-50 space-y-2"></div>

	<!-- Redeem Code Management Script -->
	<script>
		// Load existing redeem codes
		async function loadRedeemCodes() {
			const tableBody = document.getElementById('redeemCodesTable');
			if (!tableBody) return;
			
			try {
				const response = await fetch('/api/redeem/list');
				if (!response.ok) {
					throw new Error(`HTTP error! status: ${response.status}`);
				}
				
				const data = await response.json();
				
				if (data.success) {
					tableBody.innerHTML = '';
					
					if (data.codes.length === 0) {
						tableBody.innerHTML = `
							<tr>
								<td colspan="6" class="py-8 text-center">
									<div class="flex flex-col items-center justify-center space-y-4">
										<div class="w-16 h-16 rounded-full bg-gray-800/50 flex items-center justify-center">
											<i class="fas fa-gift text-2xl text-gray-600"></i>
										</div>
										<div class="text-gray-400">No redeem codes found</div>
										<button onclick="document.querySelector('#createRedeemForm').scrollIntoView({behavior: 'smooth'})" 
											class="text-primary-500 hover:text-primary-400 transition-colors">
											Create your first code
										</button>
									</div>
								</td>
							</tr>
						`;
						return;
					}
					
					data.codes.forEach(code => {
						const row = document.createElement('tr');
						row.className = 'border-b border-gray-700/50 hover:bg-dark-lighter/30 transition-colors duration-150';
						
						const expiresAt = code.expires_at ? new Date(code.expires_at).toLocaleString() : 'Never';
						const createdAt = new Date(code.created_at).toLocaleString();
						
						// Calculate status
						let status = 'Active';
						let statusClass = 'text-green-400';
						if (code.uses_count >= code.max_uses) {
							status = 'Used';
							statusClass = 'text-red-400';
						} else if (code.expires_at && new Date(code.expires_at) < new Date()) {
							status = 'Expired';
							statusClass = 'text-yellow-400';
						}
						
						row.innerHTML = `
							<td class="py-4">
								<div class="flex items-center space-x-2">
									<span class="font-mono ${statusClass}">${code.code}</span>
									<span class="px-2 py-0.5 rounded-full text-xs ${statusClass} bg-${statusClass.replace('text-', '')}/10">
										${status}
									</span>
								</div>
							</td>
							<td class="py-4">
								<span class="font-mono">${code.credits_amount.toLocaleString()}</span>
							</td>
							<td class="py-4">
								<div class="flex items-center space-x-2">
									<div class="w-20 h-2 bg-gray-700 rounded-full overflow-hidden">
										<div class="h-full ${code.uses_count >= code.max_uses ? 'bg-red-500' : 'bg-green-500'}"
											style="width: ${(code.uses_count / code.max_uses) * 100}%"></div>
									</div>
									<span class="${code.uses_count >= code.max_uses ? 'text-red-400' : 'text-green-400'}">
										${code.uses_count}/${code.max_uses}
									</span>
								</div>
							</td>
							<td class="py-4">${expiresAt}</td>
							<td class="py-4">${createdAt}</td>
							<td class="py-4">
								<div class="flex items-center space-x-2">
									<button onclick="copyCode('${code.code}')" 
										class="p-2 rounded-lg bg-blue-500/10 text-blue-400 hover:bg-blue-500/20 transition-colors duration-200" 
										title="Copy Code">
										<i class="fas fa-copy"></i>
									</button>
									<button onclick="deleteCode('${code.id}')" 
										class="p-2 rounded-lg bg-red-500/10 text-red-400 hover:bg-red-500/20 transition-colors duration-200" 
										title="Delete Code">
										<i class="fas fa-trash"></i>
									</button>
								</div>
							</td>
						`;
						
						tableBody.appendChild(row);
					});
				} else {
					throw new Error(data.message || 'Failed to load redeem codes');
				}
			} catch (error) {
				console.error('Error loading redeem codes:', error);
				showNotification('Error loading redeem codes', 'error', error.message);
				
				tableBody.innerHTML = `
					<tr>
						<td colspan="6" class="py-8 text-center">
							<div class="flex flex-col items-center justify-center space-y-4">
								<div class="w-16 h-16 rounded-full bg-red-500/10 flex items-center justify-center">
									<i class="fas fa-exclamation-circle text-2xl text-red-500"></i>
								</div>
								<div class="text-red-400">Failed to load redeem codes</div>
								<button onclick="loadRedeemCodes()" 
									class="text-primary-500 hover:text-primary-400 transition-colors">
									Try again
								</button>
							</div>
						</td>
					</tr>
				`;
			}
		}

		// Copy code to clipboard
		async function copyCode(code) {
			try {
				await navigator.clipboard.writeText(code);
				showNotification('Code copied to clipboard!', 'success', code);
			} catch (error) {
				console.error('Error copying code:', error);
				showNotification('Error copying code', 'error', error.message);
			}
		}

		// Create new redeem code
		document.getElementById('createRedeemForm').addEventListener('submit', async (e) => {
			e.preventDefault();
			
			const submitButton = e.target.querySelector('button[type="submit"]');
			const originalButtonHtml = submitButton.innerHTML;
			
			// Show loading state
			submitButton.disabled = true;
			submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Creating...';
			
			const formData = new FormData(e.target);
			const data = {
				credits_amount: parseInt(formData.get('credits_amount')),
				max_uses: parseInt(formData.get('max_uses')),
				expires_at: formData.get('expires_at') || null
			};
			
			try {
				// Validate input
				if (!data.credits_amount || data.credits_amount <= 0) {
					throw new Error('Credits amount must be a positive number');
				}
				if (!data.max_uses || data.max_uses <= 0) {
					throw new Error('Maximum uses must be a positive number');
				}
				
				const response = await fetch('/api/redeem/create', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify(data)
				});
				
				const result = await response.json();
				
				if (result.success) {
					showNotification('Redeem code created successfully', 'success', result.details);
					e.target.reset();
					loadRedeemCodes();
					
					// Show the code in a modal
					const modal = document.createElement('div');
					modal.className = 'fixed inset-0 flex items-center justify-center z-50';
					modal.innerHTML = `
						<div class="fixed inset-0 bg-black/50 backdrop-blur-sm"></div>
						<div class="relative bg-dark-light rounded-lg p-6 max-w-md w-full mx-4 animate-fade-in">
							<div class="absolute top-4 right-4">
								<button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-white">
									<i class="fas fa-times"></i>
								</button>
							</div>
							<div class="text-center">
								<div class="mb-4 inline-flex items-center justify-center w-12 h-12 rounded-full bg-green-500/10 text-green-500">
									<i class="fas fa-check-circle text-2xl"></i>
								</div>
								<h3 class="text-xl font-semibold mb-2">New Redeem Code Created</h3>
								<p class="text-gray-400 mb-4">Make sure to copy this code now. You won't be able to see it again!</p>
							</div>
							<div class="bg-dark-lighter p-4 rounded-lg mb-4 relative group">
								<code class="text-lg font-mono text-primary-400 block text-center">${result.code}</code>
								<div class="absolute inset-0 bg-dark-lighter/50 opacity-0 group-hover:opacity-100 flex items-center justify-center transition-opacity">
									<button onclick="copyCode('${result.code}')" class="px-4 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors">
										<i class="fas fa-copy mr-2"></i> Copy Code
									</button>
								</div>
							</div>
							<div class="space-y-2 mb-4 text-sm text-gray-400">
								<div class="flex justify-between">
									<span>Credits Amount:</span>
									<span class="font-mono">${result.details.credits_amount}</span>
								</div>
								<div class="flex justify-between">
									<span>Maximum Uses:</span>
									<span class="font-mono">${result.details.max_uses}</span>
								</div>
								<div class="flex justify-between">
									<span>Expires:</span>
									<span class="font-mono">${result.details.expires_at}</span>
								</div>
							</div>
							<div class="flex justify-end space-x-4">
								<button onclick="copyCode('${result.code}')" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
									<i class="fas fa-copy mr-2"></i> Copy Code
								</button>
								<button onclick="this.closest('.fixed').remove()" class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700">
									Close
								</button>
							</div>
						</div>
					`;
					document.body.appendChild(modal);
				} else {
					showNotification(result.message || 'Error creating redeem code', 'error', result.details);
				}
			} catch (error) {
				console.error('Error creating redeem code:', error);
				showNotification(error.message || 'Error creating redeem code', 'error');
			} finally {
				// Restore button state
				submitButton.disabled = false;
				submitButton.innerHTML = originalButtonHtml;
			}
		});

		// Delete redeem code
		async function deleteCode(id) {
			const modal = document.createElement('div');
			modal.className = 'fixed inset-0 flex items-center justify-center z-50';
			modal.innerHTML = `
				<div class="fixed inset-0 bg-black/50 backdrop-blur-sm"></div>
				<div class="relative bg-dark-light rounded-lg p-6 max-w-md w-full mx-4 animate-fade-in">
					<div class="text-center">
						<div class="mb-4 inline-flex items-center justify-center w-12 h-12 rounded-full bg-red-500/10 text-red-500">
							<i class="fas fa-exclamation-triangle text-2xl"></i>
						</div>
						<h3 class="text-xl font-semibold mb-2">Delete Redeem Code</h3>
						<p class="text-gray-400 mb-6">Are you sure you want to delete this redeem code? This action cannot be undone.</p>
					</div>
					<div class="flex justify-end space-x-4">
						<button onclick="confirmDelete('${id}')" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 flex items-center">
							<i class="fas fa-trash-alt mr-2"></i>
							Delete
						</button>
						<button onclick="this.closest('.fixed').remove()" class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700">
							Cancel
						</button>
					</div>
				</div>
			`;
			document.body.appendChild(modal);
		}

		// Confirm delete action
		async function confirmDelete(id) {
			const modal = document.querySelector('.fixed.inset-0.flex');
			const deleteButton = modal.querySelector('button');
			const originalButtonHtml = deleteButton.innerHTML;
			
			try {
				// Show loading state
				deleteButton.disabled = true;
				deleteButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Deleting...';
				
				const response = await fetch(`/api/redeem/${id}`, {
					method: 'DELETE'
				});
				
				const data = await response.json();
				
				if (data.success) {
					showNotification('Redeem code deleted successfully', 'success');
					loadRedeemCodes();
				} else {
					showNotification(data.message || 'Error deleting redeem code', 'error', data.error);
				}
			} catch (error) {
				console.error('Error deleting redeem code:', error);
				showNotification('Error deleting redeem code', 'error', error.message);
			} finally {
				// Remove the modal
				if (modal) modal.remove();
			}
		}

		// Show notification
		function showNotification(message, type = 'info', details = null) {
			const container = document.getElementById('notification-container');
			if (!container) return;
			
			const notification = document.createElement('div');
			notification.className = `notification ${type} transform translate-x-full`;
			
			const iconClass = 
				type === 'success' ? 'fa-check-circle' : 
				type === 'error' ? 'fa-exclamation-circle' : 
				'fa-info-circle';
			
			let detailsHtml = '';
			if (details) {
				detailsHtml = `
					<div class="mt-2 text-sm opacity-80">
						${typeof details === 'object' ? 
							Object.entries(details)
								.map(([key, value]) => `<div>${key}: ${value}</div>`)
								.join('') : 
							details}
					</div>
				`;
			}
			
			notification.innerHTML = `
				<div class="flex items-center p-4 mb-4 text-sm rounded-lg
					${type === 'success' ? 'bg-green-900/30 text-green-400 border border-green-500/20' :
					type === 'error' ? 'bg-red-900/30 text-red-400 border border-red-500/20' :
					'bg-blue-900/30 text-blue-400 border border-blue-500/20'}">
					<div class="flex-1">
						<div class="flex items-center">
							<i class="fas ${iconClass} mr-2"></i>
							<span class="font-medium">${message}</span>
						</div>
						${detailsHtml}
					</div>
					<button onclick="this.closest('.notification').remove()" class="ml-3 text-gray-400 hover:text-gray-300">
						<i class="fas fa-times"></i>
					</button>
				</div>
			`;
			
			container.appendChild(notification);
			
			// Trigger animation
			setTimeout(() => {
				notification.classList.remove('translate-x-full');
			}, 10);
			
			setTimeout(() => {
				notification.classList.add('translate-x-full');
				setTimeout(() => {
					if (notification.parentNode) {
						notification.parentNode.removeChild(notification);
					}
				}, 300);
			}, 8000); // Show for 8 seconds
		}

		// Load codes on page load
		document.addEventListener('DOMContentLoaded', loadRedeemCodes);
	</script>
</body>
</html> 