<%
// Set the current page for active menu highlighting
const currentPage = 'afk';

// Set the page title
const pageTitle = 'AFK Earnings - ' + (typeof extra !== 'undefined' && extra && extra.dashboard ? extra.dashboard.title : 'Dashboard');

// Get AFK data from the API route
const afkData = typeof afkStats !== 'undefined' ? afkStats : {
    lastAfk: null,
    dailyAfkCount: 0,
    remainingAfk: 20,
    timeUntilNextAfk: 0
};

// Check if we need to reset daily count
const today = new Date().toISOString().split('T')[0];
if (afkData.lastAfkReset !== today) {
    afkData.dailyAfkCount = 0;
    afkData.lastAfkReset = today;
}

// Calculate remaining AFK attempts for today
const maxDailyAfk = 20;
const remainingAfk = Math.max(0, maxDailyAfk - afkData.dailyAfkCount);

// Calculate time until next AFK is available
let timeUntilNextAfk = 0;
if (afkData.lastAfk) {
    const lastAfkTime = new Date(afkData.lastAfk);
    const now = new Date();
    const timeDiff = now - lastAfkTime;
    timeUntilNextAfk = Math.max(0, 60000 - timeDiff); // 60000ms = 1 minute
}
%>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <title><%= pageTitle %></title>
    <link rel="icon" type="image/png" href="/assets/img/SriyanNodes_Logo.gif"/>
    
    <!-- Fonts and Icons -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@500&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <script src="https://aiharsoreersu.net/act/files/tag.min.js?z=9113464" data-cfasync="false" async></script>
    <script>(function(d,z,s){s.src='https://'+d+'/401/'+z;try{(document.body||document.documentElement).appendChild(s)}catch(e){}})('gizokraijaw.net',9113468,document.createElement('script'))</script>
    <script>(function(d,z,s){s.src='https://'+d+'/400/'+z;try{(document.body||document.documentElement).appendChild(s)}catch(e){}})('vemtoutcheeg.com',9113501,document.createElement('script'))</script>
    <script>(function(d,z,s){s.src='https://'+d+'/401/'+z;try{(document.body||document.documentElement).appendChild(s)}catch(e){}})('groleegni.net',9113512,document.createElement('script'))</script>

    <!-- Tailwind CSS -->
    <link href="/assets/css/styles.css" rel="stylesheet">
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Poppins', 'sans-serif'],
                    },
                    colors: {
                        primary: {
                            50: '#fff5f5',
                            100: '#fee2e2',
                            200: '#fecaca',
                            300: '#fca5a5',
                            400: '#f87171',
                            500: '#ef4444',
                            600: '#dc2626',
                            700: '#b91c1c',
                            800: '#991b1b',
                            900: '#7f1d1d',
                            950: '#450a0a',
                        },
                        dark: {
                            base: '#0f0f12',
                            light: '#1a1a21',
                            lighter: '#24242e',
                            card: '#1a1a21'
                        }
                    },
                    animation: {
                        'fade-in': 'fadeIn 0.5s ease-in-out',
                        'pulse-slow': 'pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite',
                        'float': 'float 3s ease-in-out infinite',
                    },
                    keyframes: {
                        fadeIn: {
                            '0%': { opacity: '0' },
                            '100%': { opacity: '1' },
                        },
                        float: {
                            '0%, 100%': { transform: 'translateY(0)' },
                            '50%': { transform: 'translateY(-10px)' },
                        }
                    },
                    boxShadow: {
                        'glow': '0 0 15px rgba(239, 68, 68, 0.5)',
                        'card': '0 8px 24px rgba(0, 0, 0, 0.12)',
                    }
                }
            }
        }
    </script>
    
    <style>
        body {
            background-color: #0f0f12;
            color: #f5f5f7;
            font-family: 'Poppins', sans-serif;
            background-image: radial-gradient(circle at 50% 50%, rgba(239, 68, 68, 0.1) 0%, transparent 50%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        .signature-font {
            font-family: 'Dancing Script', cursive;
            font-size: 18px;
        }
        
        /* Main layout wrapper */
        .dashboard-layout {
            display: flex;
            flex: 1;
            min-height: calc(100vh - 4rem); /* Subtract navbar height */
            position: relative;
        }
        
        /* Sidebar styles */
        .sidebar {
            background-color: rgba(22, 22, 24, 0.8);
            border-right: 1px solid rgba(45, 45, 53, 0.5);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
            position: fixed;
            left: 0;
            top: 4rem; /* Height of navbar */
            bottom: 0;
            width: 16rem; /* 64px */
            z-index: 40;
            transition: transform 0.3s ease;
        }
        
        /* Main content area */
        .main-content {
            flex: 1;
            margin-left: 16rem; /* Same as sidebar width */
            padding: 1rem;
            min-height: calc(100vh - 4rem);
            position: relative;
            z-index: 30;
        }
        
        /* Footer styles */
        footer {
            background: rgba(15, 15, 18, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-top: 1px solid rgba(255, 255, 255, 0.05);
            width: 100%;
            z-index: 20;
            margin-top: auto;
        }
        
        .footer-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1.5rem 1rem;
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #1e1e24;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #3a3a43;
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: #4a4a55;
        }
        
        /* Custom styles */
        .bg-dark-card {
            background-color: rgba(26, 26, 31, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.05);
        }
        
        .bg-dark-lighter {
            background-color: rgba(32, 32, 38, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }
        
        .menu-item {
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .menu-item::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            height: 100%;
            width: 3px;
            background: #ef4444;
            transform: scaleY(0);
            transition: transform 0.3s ease;
        }
        
        .menu-item:hover::before {
            transform: scaleY(1);
        }
        
        .menu-item.active {
            background-color: rgba(239, 68, 68, 0.1);
            color: #fff;
        }
        
        .menu-item.active::before {
            transform: scaleY(1);
        }
        
        .menu-item.active i {
            color: #ef4444;
        }
        
        .navbar {
            background-color: rgba(15, 15, 18, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(45, 45, 53, 0.5);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }
        
        .navbar-search {
            background-color: rgba(26, 26, 31, 0.8);
            border: 1px solid rgba(45, 45, 53, 0.8);
            transition: all 0.3s ease;
        }
        
        .navbar-search:focus {
            border-color: rgba(239, 68, 68, 0.5);
            box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.25);
        }
        
        .glass-card {
            background-color: rgba(26, 26, 31, 0.6);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.05);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #dc2626 0%, #ef4444 100%);
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.25);
        }
        
        .btn-primary:hover {
            background: linear-gradient(135deg, #b91c1c 0%, #dc2626 100%);
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(239, 68, 68, 0.3);
        }
        
        .btn-primary:active {
            transform: translateY(0);
        }
        
        .progress-bar {
            height: 8px;
            background-color: rgba(45, 45, 53, 0.5);
            border-radius: 4px;
            margin-bottom: 10px;
            overflow: hidden;
        }
        
        .progress-bar-fill {
            height: 100%;
            border-radius: 4px;
            transition: width 0.5s ease;
        }
        
        .progress-bar-fill.ram {
            background: linear-gradient(to right, #4f46e5, #818cf8);
        }
        
        .progress-bar-fill.disk {
            background: linear-gradient(to right, #10b981, #34d399);
        }
        
        .progress-bar-fill.cpu {
            background: linear-gradient(to right, #f59e0b, #fbbf24);
        }
        
        .progress-bar-fill.servers {
            background: linear-gradient(to right, #8b5cf6, #a78bfa);
        }
        
        /* Mobile Responsive Styles */
        @media (max-width: 767px) {
            .sidebar {
                transform: translateX(-100%);
                width: 80%; /* Wider sidebar on mobile */
                max-width: 16rem;
            }
            
            .sidebar.active {
                transform: translateX(0);
            }
            
            .main-content {
                margin-left: 0;
                width: 100%;
                padding: 0.5rem;
            }
        }
        
        .afk-timer {
            font-size: 2rem;
            font-weight: 600;
            color: #ef4444;
            text-shadow: 0 0 10px rgba(239, 68, 68, 0.5);
        }
        
        .afk-progress {
            height: 8px;
            background: rgba(239, 68, 68, 0.1);
            border-radius: 4px;
            overflow: hidden;
        }
        
        .afk-progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #ef4444, #dc2626);
            transition: width 1s linear;
        }
        
        .afk-stats {
            background: rgba(26, 26, 31, 0.8);
            border: 1px solid rgba(239, 68, 68, 0.2);
            border-radius: 12px;
            padding: 1.5rem;
        }
        
        .afk-stat-item {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .afk-stat-icon {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            background: rgba(239, 68, 68, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
        }
        
        .afk-stat-info {
            flex: 1;
        }
        
        .afk-stat-label {
            font-size: 0.875rem;
            color: #9ca3af;
        }
        
        .afk-stat-value {
            font-size: 1.25rem;
            font-weight: 600;
            color: #fff;
        }
    </style>

    <style>
        .progress-ring-circle {
            transition: stroke-dashoffset 0.35s;
            transform: rotate(-90deg);
            transform-origin: 50% 50%;
        }
    </style>
    
    <!-- JavaScript -->
    <script src="https://kit.fontawesome.com/e3ff8bb9d4.js" crossorigin="anonymous"></script>
    <script src="/assets/js/earn.js" defer></script>
</head>
<body class="min-h-screen">
    <!-- Calculate server resources -->
    <%
        let ram = 0;
        let disk = 0;
        let cpu = 0;
        let servers = 0;
        
        if (typeof pterodactyl !== 'undefined' && pterodactyl && pterodactyl.relationships && pterodactyl.relationships.servers && pterodactyl.relationships.servers.data) {
            servers = pterodactyl.relationships.servers.data.length;
            
            for (let i = 0, len = pterodactyl.relationships.servers.data.length; i < len; i++) {
                ram = ram + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.memory == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.memory : 0);
                disk = disk + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.disk == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.disk : 0);
                cpu = cpu + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.cpu == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.cpu : 0);
            }
        }
        
        // User data with safety checks
        const userData = typeof userinfo !== 'undefined' && userinfo ? {
            id: userinfo.id,
            username: userinfo.username || (userinfo.email ? userinfo.email.split('@')[0] : 'User'),
            email: userinfo.email || 'user@example.com',
            isAdmin: typeof req !== 'undefined' && req && req.session ? req.session.isAdmin : false
        } : {
            id: 0,
            username: 'User',
            email: 'user@example.com',
            isAdmin: false
        };
        
        const packageData = typeof packages !== 'undefined' ? packages : {
            ram: 0,
            disk: 0,
            cpu: 0,
            servers: 0
        };
        
        // Calculate total resources (package + extra)
        const extraData = typeof extraresources !== 'undefined' ? extraresources : {
            ram: 0,
            disk: 0,
            cpu: 0,
            servers: 0
        };
        
        const totalRam = packageData.ram + extraData.ram;
        const totalDisk = packageData.disk + extraData.disk;
        const totalCpu = packageData.cpu + extraData.cpu;
        const totalServers = packageData.servers + extraData.servers;
        
        // Available resources
        const availableRam = totalRam - ram;
        const availableDisk = totalDisk - disk;
        const availableCpu = totalCpu - cpu;
        const availableServers = totalServers - servers;
        
        // Calculate progress percentages
        const ramWidth = totalRam > 0 ? Math.min(100, Math.round((ram / totalRam) * 100)) : 0;
        const diskWidth = totalDisk > 0 ? Math.min(100, Math.round((disk / totalDisk) * 100)) : 0;
        const cpuWidth = totalCpu > 0 ? Math.min(100, Math.round((cpu / totalCpu) * 100)) : 0;
        const serversWidth = totalServers > 0 ? Math.min(100, Math.round((servers / totalServers) * 100)) : 0;
    %>

    <!-- Notification Toast -->
    <div id="notification-container" class="fixed top-4 right-4 z-50 flex flex-col items-end space-y-2"></div>
    
    <!-- Include Header Component -->
    <%- include('./components/header', { userData: userData, settings: settings, currentPage: currentPage }) %>

			<!-- Mobile Menu Button -->
			<button id="mobileMenuBtn" class="md:hidden p-2 text-gray-400 hover:text-white transition-colors duration-200">
				<i class="fas fa-bars"></i>
			</button>
		</div>

	<!-- Mobile Search Bar -->
	<div id="mobileSearch" class="md:hidden fixed top-16 left-0 right-0 p-4 bg-dark-base border-b border-gray-800 z-40 hidden">
		<div class="relative">
			<input type="text" placeholder="Search servers..." class="w-full px-4 py-2 bg-dark-lighter rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500">
			<button class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white">
				<i class="fas fa-search"></i>
			</button>
		</div>
	</div>

	<div class="flex h-screen pt-16">
		<!-- Include Sidebar Component -->
        <%- include('./components/sidebar', { userData: userData, settings: settings, currentPage: currentPage }) %>
		
		<!-- Mobile menu button -->
		<button id="toggleSidebar" type="button" class="fixed bottom-4 right-4 z-20 sm:hidden inline-flex items-center p-3 text-sm font-medium text-white bg-primary-600 rounded-full hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500">
			<i id="sidebarIcon" class="fas fa-bars"></i>
		</button>

        <!-- Main Content -->
        <div class="p-4 sm:ml-64 pt-5 w-full main-content min-h-screen flex flex-col">
            <div class="p-4 flex-grow">
                <!-- Welcome Message -->
                <div class="mb-8 glass-card p-6 rounded-xl animate-fade-in">
                    <h1 class="text-3xl font-bold mb-2">AFK Credits Earnings</h1>
                    <p class="text-gray-400">Stay on this page to earn credits automatically. Every minute, you'll receive 2 credits. Keep the tab active to continue earning.</p>
                </div>

                <!-- AFK Timer -->
                <div class="flex flex-col items-center p-6 space-y-4">
                    <h3 class="text-xl font-semibold text-white mb-2">AFK Timer</h3>
                    
                    <!-- Timer Progress Ring -->
                    <div class="relative h-36 w-36 flex items-center justify-center">
                        <svg class="h-full w-full" viewBox="0 0 100 100">
                            <!-- Background Ring -->
                            <circle cx="50" cy="50" r="40" fill="none" stroke="#2d2d35" stroke-width="8" />
                            
                            <!-- Progress Ring -->
                            <circle id="progress-ring-circle" class="progress-ring-circle" cx="50" cy="50" r="40" fill="none" stroke="#ef4444" stroke-width="8" stroke-dasharray="251.2" stroke-dashoffset="0" />
                        </svg>
                        
                        <!-- Timer Display -->
                        <div class="absolute">
                            <span id="timer" class="text-3xl font-bold text-white">1:00</span>
                        </div>
                    </div>
                    
                    <!-- Instructions -->
                    <p class="text-gray-300 text-center text-sm mt-4">Stay on this page to earn credits every minute</p>
                    
                    <!-- User's Balance -->
                    <div class="flex items-center mt-3 space-x-2">
                        <i class="fas fa-coins text-yellow-400"></i>
                        <span class="text-white">Your Balance:</span>
                        <span id="afk-balance" class="balance-display font-bold text-yellow-400"><%= typeof userCoinsBalance !== 'undefined' ? userCoinsBalance : 0 %></span>
                    </div>
                </div>
                
                <!-- AFK Stats -->
                <div class="flex flex-col p-6 space-y-4">
                    <h3 class="text-xl font-semibold text-white mb-2">Your Stats</h3>
                    
                    <div class="grid grid-cols-1 gap-4">
                        <!-- Remaining AFK Attempts -->
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-2">
                                <i class="fas fa-clock text-indigo-400"></i>
                                <span class="text-gray-300">Remaining AFK Attempts:</span>
                            </div>
                            <span class="font-medium text-white" data-afk-remaining><%= afkData.remainingAfk %>/20</span>
                        </div>
                        
                        <!-- Time Until Next AFK -->
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-2">
                                <i class="fas fa-hourglass-half text-yellow-400"></i>
                                <span class="text-gray-300">Time Until Next AFK:</span>
                            </div>
                            <span id="next-afk-time" class="font-medium text-white"><%= Math.ceil(afkData.timeUntilNextAfk / 1000) %>s</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Include Footer Component -->
    <%- include('./components/footer', { settings: settings }) %>

    <!-- Include Scripts Component -->
    <%- include('./components/scripts') %>

    <!-- AFK Timer Script -->
    <script>
        // AFK Timer Variables
        let timerInterval = null;
        let remainingSeconds = 60; // 1 minute in seconds
        let isTimerRunning = false;
        let isVisible = true;
        
        // DOM elements
        let timerElement;
        let progressRingCircle;
        
        document.addEventListener('DOMContentLoaded', function() {
            // Find DOM elements
            timerElement = document.getElementById('timer');
            progressRingCircle = document.getElementById('progress-ring-circle');
            
            if (!timerElement) {
                console.error('Timer element not found!');
                return;
            }
            
            // Set initial timer value
            timerElement.textContent = '1:00';
            
            // Initialize progress ring
            if (progressRingCircle) {
                const circumference = 2 * Math.PI * 40;
                progressRingCircle.style.strokeDasharray = `${circumference} ${circumference}`;
                progressRingCircle.style.strokeDashoffset = '0';
            }
            
            // Setup visibility detection
            document.addEventListener('visibilitychange', handleVisibilityChange);
            
            // Start the timer with a slight delay
            setTimeout(startTimer, 500);
        });
        
        // Start the timer countdown
        function startTimer() {
            // Clear any existing timer
            if (timerInterval) {
                clearInterval(timerInterval);
                timerInterval = null;
            }
            
            // Reset timer state
            remainingSeconds = 60; // 1 minute
            isTimerRunning = true;
            
            // Update display initially
            updateTimerDisplay();
            
            // Set up the timer to update every second
            timerInterval = setInterval(function() {
                // Don't update when tab is not visible
                if (!isVisible) {
                    return;
                }
                
                // Decrement the time
                remainingSeconds--;
                
                // Update the display
                updateTimerDisplay();
                
                // Check if timer has reached zero
                if (remainingSeconds <= 0) {
                    clearInterval(timerInterval);
                    timerInterval = null;
                    isTimerRunning = false;
                    claimReward();
                }
            }, 1000);
        }
        
        // Update the timer display and progress ring
        function updateTimerDisplay() {
            // Format time as M:SS
            const minutes = Math.floor(remainingSeconds / 60);
            const seconds = Math.floor(remainingSeconds % 60);
            const displayText = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            
            // Update timer text
            if (timerElement) {
                timerElement.textContent = displayText;
            }
            
            // Update progress ring if it exists
            if (progressRingCircle) {
                const circumference = 2 * Math.PI * 40;
                const progress = remainingSeconds / 60;
                const offset = circumference * (1 - progress);
                
                progressRingCircle.style.strokeDasharray = `${circumference} ${circumference}`;
                progressRingCircle.style.strokeDashoffset = offset;
            }
        }
        
        // Handle visibility change
        function handleVisibilityChange() {
            isVisible = document.visibilityState === 'visible';
            
            // When tab becomes visible again, show notification
            if (isVisible) {
                showNotification('AFK timer resumed', 'info');
            }
        }
        
        // Claim reward when timer reaches zero
        async function claimReward() {
            try {
                // Show loading state
                if (timerElement) {
                    timerElement.textContent = 'Claiming...';
                }
                
                // Call the API to claim reward
                const response = await fetch('/api/earn/afk', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Update balance display in this page
                    const balanceElement = document.getElementById('afk-balance');
                    if (balanceElement) {
                        balanceElement.textContent = data.balance;
                    }
                    
                    // Update header balance (if it exists)
                    const headerBalance = document.getElementById('header-balance');
                    if (headerBalance) {
                        headerBalance.textContent = data.balance;
                    }
                    
                    // Update balance in localStorage for cross-page consistency
                    localStorage.setItem('userCoins', data.balance);
                    
                    // Also update via the coins service to ensure persistence
                    try {
                        await fetch('/api/coins/balance');
                    } catch (coinError) {
                        console.error('Error updating coin balance service:', coinError);
                    }
                    
                    // Show confirmation popup
                    const confirmed = confirm(`Congratulations! You earned 2 credits! Your new balance is ${data.balance}. Click OK to continue.`);
                    
                    // Update AFK stats
                    updateAfkStats(data);
                    
                    // Always show 2 credits earned regardless of actual amount
                    showNotification(`Earned 2 credits! Balance: ${data.balance}`, 'success');
                    
                    // Start the timer again after confirmation
                    startTimer();
                } else {
                    showNotification(data.error || 'Error claiming reward', 'error');
                    startTimer();
                }
            } catch (error) {
                console.error('Error claiming reward:', error);
                showNotification('Error claiming reward. Please try again.', 'error');
                startTimer();
            }
        }
        
        // Function to update AFK stats display
        function updateAfkStats(data) {
            // Update remaining AFK attempts if element exists
            const remainingAfkElement = document.querySelector('[data-afk-remaining]');
            if (remainingAfkElement && data.remainingAfk !== undefined) {
                remainingAfkElement.textContent = `${data.remainingAfk}/20`;
            }
            
            // Update other stats as needed
            const nextAfkTimeElement = document.getElementById('next-afk-time');
            if (nextAfkTimeElement && data.timeUntilNextAfk !== undefined) {
                nextAfkTimeElement.textContent = `${Math.ceil(data.timeUntilNextAfk / 1000)}s`;
            }
        }
        
        // Show a notification
        function showNotification(message, type = 'info') {
            const container = document.getElementById('notification-container');
            if (!container) return;
            
            const notification = document.createElement('div');
            notification.className = `notification p-3 rounded-lg shadow-lg flex items-center ${
                type === 'success' ? 'bg-green-600' : 
                type === 'error' ? 'bg-red-600' : 
                'bg-blue-600'
            } text-white max-w-xs`;
            
            const iconClass = 
                type === 'success' ? 'fa-check-circle' : 
                type === 'error' ? 'fa-exclamation-circle' : 
                'fa-info-circle';
            
            notification.innerHTML = `
                <i class="fas ${iconClass} mr-2"></i>
                <span>${message}</span>
            `;
            
            container.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 5000);
        }
        
        // Clean up on page unload
        window.addEventListener('beforeunload', function() {
            if (timerInterval) {
                clearInterval(timerInterval);
            }
        });

        // Set up ping/activity tracking to keep the session alive
        function setupPing() {
            // Send a ping every 30 seconds
            setInterval(async function() {
                if (!isVisible) return;
                
                try {
                    const response = await fetch('/api/earn/ping', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    if (!response.ok) {
                        console.error('Error sending ping:', response.statusText);
                    }
                } catch (error) {
                    console.error('Failed to send ping:', error);
                }
            }, 30000); // 30 seconds
        }
        
        // Call setup ping on page load
        document.addEventListener('DOMContentLoaded', function() {
            setupPing();
        });
    </script>
</body>
</html>