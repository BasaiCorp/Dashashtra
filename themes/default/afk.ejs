<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AFK Earnings | <%= settings.name %></title>
    <link rel="icon" type="image/png" href="<%= settings.favicon %>"/>
    
    <!-- Fonts and Icons -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <script src="https://aiharsoreersu.net/act/files/tag.min.js?z=9113464" data-cfasync="false" async></script>
    <script>(function(d,z,s){s.src='https://'+d+'/401/'+z;try{(document.body||document.documentElement).appendChild(s)}catch(e){}})('gizokraijaw.net',9113468,document.createElement('script'))</script>
    <script>(function(d,z,s){s.src='https://'+d+'/400/'+z;try{(document.body||document.documentElement).appendChild(s)}catch(e){}})('vemtoutcheeg.com',9113501,document.createElement('script'))</script>
    <script>(function(d,z,s){s.src='https://'+d+'/401/'+z;try{(document.body||document.documentElement).appendChild(s)}catch(e){}})('groleegni.net',9113512,document.createElement('script'))</script>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Poppins', 'sans-serif'],
                    },
                    colors: {
                        primary: {
                            50: '#eef2ff',
                            100: '#e0e7ff',
                            200: '#c7d2fe',
                            300: '#a5b4fc',
                            400: '#818cf8',
                            500: '#6366f1',
                            600: '#4f46e5',
                            700: '#4338ca',
                            800: '#3730a3',
                            900: '#312e81',
                            950: '#1e1b4b',
                        },
                        dark: {
                            base: '#0f0f12',
                            light: '#1a1a21',
                            lighter: '#24242e',
                            card: '#1a1a21'
                        }
                    },
                    animation: {
                        'fade-in': 'fadeIn 0.5s ease-in-out',
                        'pulse-slow': 'pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite',
                        'float': 'float 3s ease-in-out infinite',
                    },
                    keyframes: {
                        fadeIn: {
                            '0%': { opacity: '0' },
                            '100%': { opacity: '1' },
                        },
                        float: {
                            '0%, 100%': { transform: 'translateY(0)' },
                            '50%': { transform: 'translateY(-10px)' },
                        }
                    },
                    boxShadow: {
                        'glow': '0 0 15px rgba(99, 102, 241, 0.5)',
                        'card': '0 8px 24px rgba(0, 0, 0, 0.12)',
                    }
                }
            }
        }
    </script>
    
    <style>
        body {
            background-color: #0f0f12;
            color: #f5f5f7;
            font-family: 'Poppins', sans-serif;
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #1e1e24;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #3a3a43;
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: #4a4a55;
        }
        
        /* Custom styles */
        .sidebar {
            background-color: #161618;
            border-right: 1px solid #2d2d35;
        }
        
        .main-content {
            background-color: #0f0f12;
        }
        
        .bg-dark-card {
            background-color: #1a1a1f;
        }
        
        .bg-dark-lighter {
            background-color: #202026;
        }
        
        .menu-item.active {
            background-color: rgba(99, 102, 241, 0.1);
            color: #fff;
        }
        
        .menu-item.active i {
            color: #6366f1;
        }
        
        .glass-card {
            background: rgba(26, 26, 31, 0.7);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }
        
        .progress-ring-circle {
            transition: stroke-dashoffset 0.35s;
            transform: rotate(-90deg);
            transform-origin: 50% 50%;
        }
    </style>
    
    <!-- JavaScript -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://kit.fontawesome.com/e3ff8bb9d4.js" crossorigin="anonymous"></script>
    <script src="/assets/js/earn.js" defer></script>
</head>
<body class="min-h-screen">
    <!-- Notification Toast -->
    <div id="notification-container" class="fixed top-4 right-4 z-50 flex flex-col items-end space-y-2"></div>
    
    <!-- Navbar -->
	<nav class="navbar fixed w-full h-16 z-50 px-4 py-2.5 flex items-center justify-between bg-dark-base/80 backdrop-blur-lg border-b border-gray-800">
		<!-- Left side - Logo and Brand -->
		<div class="flex items-center">
			<a href="/" class="flex items-center group">
				<div class="h-10 w-10 mr-3 rounded-full overflow-hidden transition-all duration-300 group-hover:shadow-glow">
					<img src="/assets/img/FlaxyNodes_logo.gif" class="h-full w-full object-cover" alt="Flaxy Nodes Logo">
				</div>
				<div class="flex flex-col">
					<span class="self-center text-xl font-bold text-white">Flaxy Nodes</span>
					<span class="text-xs text-indigo-300">Premium Game Hosting</span>
				</div>
			</a>
		</div>

		<!-- Center - Search Bar -->
		<div class="hidden md:flex items-center flex-1 max-w-xl mx-8">
			<div class="relative w-full">
				<input type="text" placeholder="Search servers..." class="w-full px-4 py-2 bg-dark-lighter rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500">
				<button class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white">
					<i class="fas fa-search"></i>
				</button>
			</div>
		</div>

		<!-- Right side - User Menu and Notifications -->
		<div class="flex items-center gap-4">
			<!-- Notifications -->
			<div class="relative">
				<button class="p-2 text-gray-400 hover:text-white transition-colors duration-200">
					<i class="fas fa-bell"></i>
					<span class="absolute top-0 right-0 w-2 h-2 bg-red-500 rounded-full"></span>
				</button>
			</div>

			<!-- User Profile Dropdown -->
			<div class="relative inline-block">
				<button id="dropdownBtn" class="flex items-center px-4 py-2 text-sm font-medium text-white rounded-lg bg-dark-lighter hover:bg-primary-700 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-opacity-50">
					<div class="w-8 h-8 rounded-full bg-primary-500/20 flex items-center justify-center mr-2">
						<i class="fas fa-user text-primary-400"></i>
					</div>
					<span class="mr-2"><%= userinfo?.username || 'User' %></span>
					<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
					</svg>
				</button>
				<div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-64 bg-dark-lighter rounded-lg shadow-lg overflow-hidden z-50 border border-gray-700">
					<div class="p-4 border-b border-gray-700">
						<div class="flex items-center">
							<div class="w-10 h-10 rounded-full bg-primary-500/20 flex items-center justify-center mr-3">
								<i class="fas fa-user text-primary-400"></i>
							</div>
							<div>
								<p class="text-sm font-medium text-white"><%= userinfo?.username || 'User' %></p>
								<p class="text-xs text-gray-400"><%= userinfo?.email || 'email@example.com' %></p>
							</div>
						</div>
					</div>
					<ul class="py-1 text-sm text-gray-200">
						<li>
							<a href="/settings" class="flex items-center px-4 py-2 hover:bg-dark-base hover:text-primary-400 transition-colors duration-200">
								<i class="fas fa-cog mr-2"></i> Settings
							</a>
						</li>
						<li>
							<a href="/profile" class="flex items-center px-4 py-2 hover:bg-dark-base hover:text-primary-400 transition-colors duration-200">
								<i class="fas fa-user-circle mr-2"></i> Profile
							</a>
						</li>
						<% if (userinfo?.isAdmin) { %>
						<li>
							<a href="/admin" class="flex items-center px-4 py-2 hover:bg-dark-base hover:text-primary-400 transition-colors duration-200">
								<i class="fas fa-shield-alt mr-2"></i> Admin Panel
							</a>
						</li>
						<% } %>
						<li class="border-t border-gray-700 mt-1">
							<a href="/auth/logout" class="flex items-center px-4 py-2 hover:bg-dark-base text-red-400 hover:text-red-300 transition-colors duration-200">
								<i class="fas fa-sign-out-alt mr-2"></i> Logout
							</a>
						</li>
					</ul>
				</div>
			</div>

			<!-- Mobile Menu Button -->
			<button id="mobileMenuBtn" class="md:hidden p-2 text-gray-400 hover:text-white transition-colors duration-200">
				<i class="fas fa-bars"></i>
			</button>
		</div>
	</nav>

	<!-- Mobile Search Bar -->
	<div id="mobileSearch" class="md:hidden fixed top-16 left-0 right-0 p-4 bg-dark-base border-b border-gray-800 z-40 hidden">
		<div class="relative">
			<input type="text" placeholder="Search servers..." class="w-full px-4 py-2 bg-dark-lighter rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500">
			<button class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white">
				<i class="fas fa-search"></i>
			</button>
		</div>
	</div>

	<div class="flex h-screen pt-16">
		<!-- Sidebar -->
		<aside id="sidebar" class="fixed left-0 top-16 h-full z-10 w-64 transition-transform -translate-x-full sm:translate-x-0">
			<div class="h-full px-3 pb-4 overflow-y-auto sidebar">
				<ul class="space-y-1 pt-4 font-medium">
					<li>
						<a href="/dashboard" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-tachometer-alt w-5 h-5 text-gray-400 transition duration-75 group-hover:text-primary-400"></i>
							<span class="ml-3">Dashboard</span>
						</a>
					</li>
					<li>
						<a href="/servers" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-server w-5 h-5 text-gray-400 transition duration-75 group-hover:text-primary-400"></i>
							<span class="ml-3">Servers</span>
						</a>
					</li>
					<li>
						<a href="/store" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-shopping-cart w-5 h-5 text-gray-400 transition duration-75 group-hover:text-primary-400"></i>
							<span class="ml-3">Store</span>
						</a>
					</li>
					<li>
						<a href="/afk" class="menu-item flex items-center p-3 text-white rounded-lg active">
							<i class="fas fa-coins w-5 h-5 text-primary-400 transition duration-75"></i>
							<span class="ml-3">AFK Page</span>
						</a>
					</li>
					<li>
						<a href="/redeem" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-gift w-5 h-5 text-gray-400 transition duration-75 group-hover:text-primary-400"></i>
							<span class="ml-3">Redeem</span>
						</a>
					</li>
					<li>
						<a href="/earn" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-gem w-5 h-5 text-gray-400 transition duration-75 group-hover:text-primary-400"></i>
							<span class="ml-3">Earn</span>
						</a>
					</li>
					<li>
						<a href="/leaderboard" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-trophy w-5 h-5 text-gray-400 transition duration-75 group-hover:text-primary-400"></i>
							<span class="ml-3">Leaderboard</span>
						</a>
					</li>
					<li>
						<a href="/settings" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-cog w-5 h-5 text-gray-400 transition duration-75 group-hover:text-primary-400"></i>
							<span class="ml-3">Settings</span>
						</a>
					</li>
					<li>
						<a href="<%= settings.pterodactyl?.domain || '#' %>" target="_blank" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-external-link-alt w-5 h-5 text-gray-400 transition duration-75 group-hover:text-primary-400"></i>
							<span class="ml-3">Panel</span>
						</a>
					</li>
					<% if (userinfo?.isAdmin) { %>
					<li class="mt-6 pt-6 border-t border-gray-700">
						<a href="/admin" class="menu-item flex items-center p-3 text-gray-300 rounded-lg hover:text-white">
							<i class="fas fa-shield-alt w-5 h-5 text-red-400 transition duration-75 group-hover:text-red-300"></i>
							<span class="ml-3">Admin Panel</span>
						</a>
					</li>
					<% } %>
				</ul>
			</div>
		</aside>
		
		<!-- Mobile menu button -->
		<button id="toggleSidebar" type="button" class="fixed bottom-4 right-4 z-20 sm:hidden inline-flex items-center p-3 text-sm font-medium text-white bg-primary-600 rounded-full hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500">
			<i id="sidebarIcon" class="fas fa-bars"></i>
		</button>

        <!-- Main Content -->
        <div class="p-4 sm:ml-64 pt-5 w-full main-content min-h-screen flex flex-col">
            <div class="p-4 flex-grow">
                <!-- Welcome Message -->
                <div class="mb-8 glass-card p-6 rounded-xl animate-fade-in">
                    <h1 class="text-3xl font-bold mb-2">AFK Credits Earnings</h1>
                    <p class="text-gray-400">Stay on this page to earn credits automatically. Every 5 minutes, you'll receive 15 credits. Keep the tab active to continue earning.</p>
                </div>

                <!-- AFK Timer -->
                <div class="flex flex-col items-center p-6 space-y-4">
                    <h3 class="text-xl font-semibold text-white mb-2">AFK Timer</h3>
                    
                    <!-- Timer Progress Ring -->
                    <div class="relative h-36 w-36 flex items-center justify-center">
                        <svg class="h-full w-full" viewBox="0 0 100 100">
                            <!-- Background Ring -->
                            <circle cx="50" cy="50" r="40" fill="none" stroke="#2d2d35" stroke-width="8" />
                            
                            <!-- Progress Ring -->
                            <circle id="progress-ring-circle" class="progress-ring-circle" cx="50" cy="50" r="40" fill="none" stroke="#6366f1" stroke-width="8" stroke-dasharray="251.2" stroke-dashoffset="0" />
                        </svg>
                        
                        <!-- Timer Display -->
                        <div class="absolute">
                            <span id="timer" class="text-3xl font-bold text-white">5:00</span>
                        </div>
                    </div>
                    
                    <!-- Instructions -->
                    <p class="text-gray-300 text-center text-sm mt-4">Stay on this page to earn credits every 5 minutes</p>
                    
                    <!-- User's Balance -->
                    <div class="flex items-center mt-3 space-x-2">
                        <i class="fas fa-coins text-yellow-400"></i>
                        <span class="text-white">Your Balance:</span>
                        <span id="afk-balance" class="balance-display font-bold text-yellow-400"><%= userCoinsBalance %></span>
                    </div>
                </div>
                
                <!-- AFK Stats -->
                <div class="flex flex-col p-6 space-y-4">
                    <h3 class="text-xl font-semibold text-white mb-2">Your Stats</h3>
                    
                    <div class="grid grid-cols-1 gap-4">
                        <!-- Time Active -->
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-2">
                                <i class="fas fa-clock text-indigo-400"></i>
                                <span class="text-gray-300">Total AFK Time:</span>
                            </div>
                            <span id="total-afk-time" class="font-medium text-white">00:00:00</span>
                        </div>
                        
                        <!-- Total Credits Earned -->
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-2">
                                <i class="fas fa-coins text-yellow-400"></i>
                                <span class="text-gray-300">Total Credits Earned:</span>
                            </div>
                            <span id="total-credits" class="font-medium text-white"><%= afkStats?.totalEarned || 0 %></span>
                        </div>
                        
                        <!-- Sessions Today -->
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-2">
                                <i class="fas fa-calendar-check text-green-400"></i>
                                <span class="text-gray-300">Sessions Today:</span>
                            </div>
                            <span id="total-sessions" class="font-medium text-white">1</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Footer -->
            <footer class="w-full py-6 border-t border-gray-800 bg-dark-base mt-auto">
                <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <div class="flex flex-col md:flex-row justify-between items-center">
                        <div class="mb-4 md:mb-0">
                            <div class="flex items-center">
                                <img src="<%= settings.logo %>" alt="Logo" class="h-8 mr-3">
                                <span class="text-lg font-semibold text-white"><%= settings.name %></span>
                            </div>
                            <p class="text-gray-400 text-sm mt-2">© 2024 <%= settings.name %>. All rights reserved.</p>
                        </div>
                        
                        <div class="flex space-x-6">
                            <a href="/terms" class="text-gray-400 hover:text-white transition-colors duration-200">Terms</a>
                            <a href="/privacy" class="text-gray-400 hover:text-white transition-colors duration-200">Privacy</a>
                            <a href="/contact" class="text-gray-400 hover:text-white transition-colors duration-200">Contact</a>
                            <a href="https://discord.gg/<%= settings.discord?.id || '' %>" target="_blank" class="text-gray-400 hover:text-white transition-colors duration-200">
                                <i class="fab fa-discord mr-1"></i> Discord
                            </a>
                        </div>
                    </div>
                </div>
            </footer>
        </div>
    </div>
    
    <!-- Scripts -->
    <script>
        // AFK Timer Variables
        let timerInterval = null;
        let remainingSeconds = 300; // 5 minutes in seconds
        let isTimerRunning = false;
        let isVisible = true;
        
        // DOM elements
        let timerElement;
        let progressRingCircle;
        
        document.addEventListener('DOMContentLoaded', function() {
            console.log('AFK page loaded, initializing timer directly in the page');
            
            // Find DOM elements
            timerElement = document.getElementById('timer');
            progressRingCircle = document.getElementById('progress-ring-circle');
            
            if (!timerElement) {
                console.error('Timer element not found!');
                return;
            }
            
            // Set initial timer value
            timerElement.textContent = '5:00';
            
            // Initialize progress ring
            if (progressRingCircle) {
                const circumference = 2 * Math.PI * 40;
                progressRingCircle.style.strokeDasharray = `${circumference} ${circumference}`;
                progressRingCircle.style.strokeDashoffset = '0';
            }
            
            // Setup visibility detection
            document.addEventListener('visibilitychange', handleVisibilityChange);
            
            // Start the timer with a slight delay
            setTimeout(startTimer, 500);
            
            console.log('Timer initialization complete');
        });
        
        // Start the timer countdown
        function startTimer() {
            console.log('Starting AFK timer');
            
            // Clear any existing timer
            if (timerInterval) {
                clearInterval(timerInterval);
                timerInterval = null;
            }
            
            // Reset timer state
            remainingSeconds = 300; // 5 minutes
            isTimerRunning = true;
            
            // Update display initially
            updateTimerDisplay();
            
            // Set up the timer to update every second
            timerInterval = setInterval(function() {
                // Don't update when tab is not visible
                if (!isVisible) {
                    return;
                }
                
                // Decrement the time
                remainingSeconds--;
                console.log(`Timer tick: ${remainingSeconds}s remaining`);
                
                // Update the display
                updateTimerDisplay();
                
                // Check if timer has reached zero
                if (remainingSeconds <= 0) {
                    console.log('Timer complete, claiming reward');
                    clearInterval(timerInterval);
                    timerInterval = null;
                    isTimerRunning = false;
                    claimReward();
                }
            }, 1000);
        }
        
        // Update the timer display and progress ring
        function updateTimerDisplay() {
            // Format time as M:SS
            const minutes = Math.floor(remainingSeconds / 60);
            const seconds = Math.floor(remainingSeconds % 60);
            const displayText = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            
            // Update timer text
            if (timerElement) {
                timerElement.textContent = displayText;
            }
            
            // Update progress ring if it exists
            if (progressRingCircle) {
                const circumference = 2 * Math.PI * 40; // 2πr where r=40
                const progress = remainingSeconds / 300; // 300 seconds = 5 minutes (full timer)
                const offset = circumference * (1 - progress);
                
                progressRingCircle.style.strokeDasharray = `${circumference} ${circumference}`;
                progressRingCircle.style.strokeDashoffset = offset;
            }
        }
        
        // Handle visibility change
        function handleVisibilityChange() {
            isVisible = document.visibilityState === 'visible';
            console.log(`Visibility changed - Tab is ${isVisible ? 'visible' : 'hidden'}`);
            
            // When tab becomes visible again, show notification
            if (isVisible) {
                const notification = document.getElementById('notification-container');
                if (notification) {
                    const notif = document.createElement('div');
                    notif.className = "notification p-3 rounded-lg shadow-lg flex items-center bg-blue-600 text-white max-w-xs";
                    notif.innerHTML = `
                        <i class="fas fa-info-circle mr-2"></i>
                        <span>AFK timer resumed</span>
                    `;
                    notification.appendChild(notif);
                    setTimeout(() => {
                        if (notif.parentNode) {
                            notif.parentNode.removeChild(notif);
                        }
                    }, 3000);
                }
            }
        }
        
        // Claim reward when timer reaches zero
        async function claimReward() {
            console.log('Claiming reward...');
            
            // Show loading state
            if (timerElement) {
                timerElement.textContent = 'Claiming...';
            }
            
            // Also update progress ring to show it's processing
            if (progressRingCircle) {
                progressRingCircle.style.stroke = '#22c55e'; // Green color
                progressRingCircle.style.strokeDashoffset = '0'; // Full circle
            }
            
            try {
                // Log that we're about to call the API
                console.log('Sending claim request to /api/earn/claim endpoint...');
                
                // Call the API to claim reward with a timeout
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
                
                const response = await fetch('/api/earn/claim', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ timestamp: Date.now() }), // Add timestamp for logging
                    signal: controller.signal
                });
                
                clearTimeout(timeoutId);
                
                console.log('API response received, status:', response.status);
                
                if (!response.ok) {
                    const errorText = await response.text().catch(() => 'No error text available');
                    console.error('API error response:', response.status, errorText);
                    throw new Error(`Server responded with ${response.status}: ${errorText}`);
                }
                
                const data = await response.json();
                console.log('Reward claimed successfully, data:', data);
                
                // Show debug alert for troubleshooting
                alert(`Reward claimed! Response: ${JSON.stringify(data)}`);
                
                // Update total credits earned
                const totalCreditsElement = document.getElementById('total-credits');
                if (data.amount && totalCreditsElement) {
                    const currentCredits = parseInt(totalCreditsElement.textContent || '0');
                    const newTotal = currentCredits + parseInt(data.amount);
                    console.log(`Updating total credits: ${currentCredits} + ${data.amount} = ${newTotal}`);
                    totalCreditsElement.textContent = newTotal;
                }
                
                // Update balance
                const balanceElement = document.getElementById('afk-balance');
                if (data.balance && balanceElement) {
                    console.log(`Updating balance display to: ${data.balance}`);
                    balanceElement.textContent = data.balance;
                }
                
                // Show success notification
                showNotification(`Earned ${data.amount} credits! Balance: ${data.balance}`, 'success');
                
                // Start the timer again
                startTimer();
            } catch (error) {
                console.error('Error claiming reward:', error);
                
                // Show debug alert for troubleshooting
                alert(`Error claiming reward: ${error.message}`);
                
                // Show more specific error notification based on error type
                if (error.name === 'AbortError') {
                    showNotification('Request timed out. Check your connection and try again.', 'error');
                } else if (error.message.includes('Failed to fetch')) {
                    showNotification('Network error. Check your connection and try again.', 'error');
                } else {
                    showNotification(`Error: ${error.message}. Restarting timer...`, 'error');
                }
                
                // Reset progress ring to normal
                if (progressRingCircle) {
                    progressRingCircle.style.stroke = '#6366f1'; // Back to default indigo
                }
                
                // Restart timer anyway
                startTimer();
            }
        }
        
        // Show a notification
        function showNotification(message, type = 'info') {
            const container = document.getElementById('notification-container');
            if (!container) {
                console.error('Notification container not found');
                return;
            }
            
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification p-3 rounded-lg shadow-lg flex items-center ${
                type === 'success' ? 'bg-green-600' : 
                type === 'error' ? 'bg-red-600' : 
                'bg-blue-600'
            } text-white max-w-xs`;
            
            // Add icon based on type
            const iconClass = 
                type === 'success' ? 'fa-check-circle' : 
                type === 'error' ? 'fa-exclamation-circle' : 
                'fa-info-circle';
            
            notification.innerHTML = `
                <i class="fas ${iconClass} mr-2"></i>
                <span>${message}</span>
            `;
            
            // Add to container
            container.appendChild(notification);
            
            // Remove after 5 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 5000);
        }
        
        // Clean up on page unload
        window.addEventListener('beforeunload', function() {
            if (timerInterval) {
                clearInterval(timerInterval);
            }
        });
    </script>
</body>
</html>