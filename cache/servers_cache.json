[
  {
    "object": "server",
    "attributes": {
      "id": 1,
      "external_id": null,
      "uuid": "785fdc0c-7e60-4791-9db7-11066bf6aba0",
      "identifier": "785fdc0c",
      "name": "FlaxyNodes Bot",
      "description": "",
      "status": null,
      "suspended": false,
      "limits": {
        "memory": 1024,
        "swap": 0,
        "disk": 1024,
        "io": 500,
        "cpu": 0,
        "threads": null,
        "oom_disabled": true
      },
      "feature_limits": {
        "databases": 0,
        "allocations": 0,
        "backups": 0
      },
      "user": 1,
      "node": 1,
      "allocation": 1,
      "nest": 4,
      "egg": 15,
      "container": {
        "startup_command": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; if [[ \"${MAIN_FILE}\" == \"*.js\" ]]; then /usr/local/bin/node \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; else /usr/local/bin/ts-node --esm \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; fi",
        "image": "ghcr.io/parkervcp/yolks:nodejs_21",
        "installed": 1,
        "environment": {
          "GIT_ADDRESS": "",
          "BRANCH": "",
          "USER_UPLOAD": "0",
          "AUTO_UPDATE": "0",
          "NODE_PACKAGES": "",
          "USERNAME": "",
          "ACCESS_TOKEN": "",
          "UNNODE_PACKAGES": "",
          "MAIN_FILE": "index.js",
          "NODE_ARGS": "",
          "STARTUP": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; if [[ \"${MAIN_FILE}\" == \"*.js\" ]]; then /usr/local/bin/node \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; else /usr/local/bin/ts-node --esm \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; fi",
          "P_SERVER_LOCATION": "Germany",
          "P_SERVER_UUID": "785fdc0c-7e60-4791-9db7-11066bf6aba0",
          "P_SERVER_ALLOCATION_LIMIT": 0
        }
      },
      "updated_at": "2025-03-27T07:50:30+00:00",
      "created_at": "2025-03-27T07:49:50+00:00",
      "relationships": {
        "allocations": {
          "object": "list",
          "data": [
            {
              "object": "allocation",
              "attributes": {
                "id": 1,
                "ip": "5.231.230.39",
                "alias": "fn-1.flaxynodes.fun",
                "port": 9999,
                "notes": null,
                "assigned": true
              }
            }
          ]
        },
        "user": {
          "object": "user",
          "attributes": {
            "id": 1,
            "external_id": null,
            "uuid": "e9367c74-11a5-4ead-ac44-3688c5cd7f54",
            "username": "exo1tap",
            "email": "exo1tap@loyalhood.xyz",
            "first_name": "exo1tap",
            "last_name": "exo1tap",
            "language": "en",
            "root_admin": true,
            "2fa": false,
            "created_at": "2025-03-27T07:41:47+00:00",
            "updated_at": "2025-03-27T07:41:47+00:00"
          }
        },
        "nest": {
          "object": "nest",
          "attributes": {
            "id": 4,
            "uuid": "785563b5-48d4-44e5-b907-998fe591585c",
            "author": "support@pterodactyl.io",
            "name": "Rust",
            "description": "Rust - A game where you must fight to survive.",
            "created_at": "2025-03-27T07:41:46+00:00",
            "updated_at": "2025-03-27T07:41:46+00:00"
          }
        },
        "egg": {
          "object": "egg",
          "attributes": {
            "id": 15,
            "uuid": "0af1a3a0-0391-44b4-8025-7394394bfe0c",
            "name": "node.js generic",
            "nest": 4,
            "author": "parker@parkervcp.com",
            "description": "a generic node.js egg\r\n\r\nThis will clone a git repo. it defaults to master if no branch is specified.\r\n\r\nInstalls the node_modules on install. If you set user_upload then I assume you know what you are doing.",
            "docker_image": "ghcr.io/parkervcp/yolks:nodejs_21",
            "docker_images": {
              "Nodejs 21": "ghcr.io/parkervcp/yolks:nodejs_21",
              "Nodejs 20": "ghcr.io/parkervcp/yolks:nodejs_20",
              "Nodejs 19": "ghcr.io/parkervcp/yolks:nodejs_19",
              "Nodejs 18": "ghcr.io/parkervcp/yolks:nodejs_18",
              "Nodejs 17": "ghcr.io/parkervcp/yolks:nodejs_17",
              "Nodejs 16": "ghcr.io/parkervcp/yolks:nodejs_16",
              "Nodejs 14": "ghcr.io/parkervcp/yolks:nodejs_14",
              "Nodejs 12": "ghcr.io/parkervcp/yolks:nodejs_12"
            },
            "config": {
              "files": {},
              "startup": {
                "done": [
                  "change this text 1",
                  "change this text 2"
                ]
              },
              "stop": "^C",
              "logs": [],
              "file_denylist": [],
              "extends": null
            },
            "startup": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; if [[ \"${MAIN_FILE}\" == \"*.js\" ]]; then /usr/local/bin/node \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; else /usr/local/bin/ts-node --esm \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; fi",
            "script": {
              "privileged": true,
              "install": "#!/bin/bash\r\n# NodeJS App Installation Script\r\n#\r\n# Server Files: /mnt/server\r\napt update\r\napt install -y git curl jq file unzip make gcc g++ python3 python3-dev python3-pip libtool\r\n\r\necho -e \"updating npm. please wait...\"\r\nnpm install npm@latest --location=global\r\n\r\nmkdir -p /mnt/server\r\ncd /mnt/server\r\n\r\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n    echo -e \"assuming user knows what they are doing have a good day.\"\r\n    exit 0\r\nfi\r\n\r\n## add git ending if it's not on the address\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=${GIT_ADDRESS}.git\r\nfi\r\n\r\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo -e \"using anon api call\"\r\nelse\r\n    GIT_ADDRESS=\"https://${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d/ -f3-)\"\r\nfi\r\n\r\n## pull git js repo\r\nif [ \"$(ls -A /mnt/server)\" ]; then\r\n    echo -e \"/mnt/server directory is not empty.\"\r\n    if [ -d .git ]; then\r\n        echo -e \".git directory exists\"\r\n        if [ -f .git/config ]; then\r\n            echo -e \"loading info from git config\"\r\n            ORIGIN=$(git config --get remote.origin.url)\r\n        else\r\n            echo -e \"files found with no git config\"\r\n            echo -e \"closing out without touching things to not break anything\"\r\n            exit 10\r\n        fi\r\n    fi\r\n\r\n    if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n        echo \"pulling latest from github\"\r\n        git pull\r\n    fi\r\nelse\r\n    echo -e \"/mnt/server is empty.\\ncloning files into repo\"\r\n    if [ -z ${BRANCH} ]; then\r\n        echo -e \"cloning default branch\"\r\n        git clone ${GIT_ADDRESS} .\r\n    else\r\n        echo -e \"cloning ${BRANCH}'\"\r\n        git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n    fi\r\n\r\nfi\r\n\r\necho \"Installing nodejs packages\"\r\nif [[ ! -z ${NODE_PACKAGES} ]]; then\r\n    /usr/local/bin/npm install ${NODE_PACKAGES}\r\nfi\r\n\r\nif [ -f /mnt/server/package.json ]; then\r\n    /usr/local/bin/npm install --production\r\nfi\r\n\r\necho -e \"install complete\"\r\nexit 0",
              "entry": "bash",
              "container": "node:18-bookworm-slim",
              "extends": null
            },
            "created_at": "2025-03-27T07:47:43+00:00",
            "updated_at": "2025-03-27T07:47:43+00:00"
          }
        }
      }
    }
  },
  {
    "object": "server",
    "attributes": {
      "id": 2,
      "external_id": null,
      "uuid": "dae94778-c195-464b-8295-3cabd0a08814",
      "identifier": "dae94778",
      "name": "MongoDB (Bot)",
      "description": "",
      "status": null,
      "suspended": false,
      "limits": {
        "memory": 1024,
        "swap": 0,
        "disk": 2048,
        "io": 500,
        "cpu": 0,
        "threads": null,
        "oom_disabled": true
      },
      "feature_limits": {
        "databases": 0,
        "allocations": 5,
        "backups": 5
      },
      "user": 1,
      "node": 1,
      "allocation": 2,
      "nest": 4,
      "egg": 16,
      "container": {
        "startup_command": "mongod --fork --dbpath /home/container/mongodb/ --port ${SERVER_PORT} --bind_ip 0.0.0.0 --logpath /home/container/logs/mongo.log -f /home/container/mongod.conf; until nc -z -v -w5 127.0.0.1 ${SERVER_PORT}; do echo 'Waiting for mongodb connection...'; sleep 5; done; mongosh --username ${MONGO_USER} --password ${MONGO_USER_PASS} --host 127.0.0.1:${SERVER_PORT} && mongosh --eval \"db.getSiblingDB('admin').shutdownServer()\" 127.0.0.1:${SERVER_PORT}",
        "image": "ghcr.io/parkervcp/yolks:mongodb_7",
        "installed": 1,
        "environment": {
          "MONGO_USER": "admin",
          "MONGO_USER_PASS": "admin",
          "STARTUP": "mongod --fork --dbpath /home/container/mongodb/ --port ${SERVER_PORT} --bind_ip 0.0.0.0 --logpath /home/container/logs/mongo.log -f /home/container/mongod.conf; until nc -z -v -w5 127.0.0.1 ${SERVER_PORT}; do echo 'Waiting for mongodb connection...'; sleep 5; done; mongosh --username ${MONGO_USER} --password ${MONGO_USER_PASS} --host 127.0.0.1:${SERVER_PORT} && mongosh --eval \"db.getSiblingDB('admin').shutdownServer()\" 127.0.0.1:${SERVER_PORT}",
          "P_SERVER_LOCATION": "Germany",
          "P_SERVER_UUID": "dae94778-c195-464b-8295-3cabd0a08814",
          "P_SERVER_ALLOCATION_LIMIT": 5
        }
      },
      "updated_at": "2025-03-27T08:18:35+00:00",
      "created_at": "2025-03-27T08:18:30+00:00",
      "relationships": {
        "allocations": {
          "object": "list",
          "data": [
            {
              "object": "allocation",
              "attributes": {
                "id": 2,
                "ip": "5.231.230.39",
                "alias": "fn-1.flaxynodes.fun",
                "port": 9998,
                "notes": null,
                "assigned": true
              }
            }
          ]
        },
        "user": {
          "object": "user",
          "attributes": {
            "id": 1,
            "external_id": null,
            "uuid": "e9367c74-11a5-4ead-ac44-3688c5cd7f54",
            "username": "exo1tap",
            "email": "exo1tap@loyalhood.xyz",
            "first_name": "exo1tap",
            "last_name": "exo1tap",
            "language": "en",
            "root_admin": true,
            "2fa": false,
            "created_at": "2025-03-27T07:41:47+00:00",
            "updated_at": "2025-03-27T07:41:47+00:00"
          }
        },
        "nest": {
          "object": "nest",
          "attributes": {
            "id": 4,
            "uuid": "785563b5-48d4-44e5-b907-998fe591585c",
            "author": "support@pterodactyl.io",
            "name": "Rust",
            "description": "Rust - A game where you must fight to survive.",
            "created_at": "2025-03-27T07:41:46+00:00",
            "updated_at": "2025-03-27T07:41:46+00:00"
          }
        },
        "egg": {
          "object": "egg",
          "attributes": {
            "id": 16,
            "uuid": "1bd371be-ebab-437e-8cbd-441a6b146899",
            "name": "MongoDB 7",
            "nest": 4,
            "author": "parker@parkervcp.com",
            "description": "MongoDB is a general purpose, document-based, distributed database built for modern application developers and for my butt era.",
            "docker_image": "ghcr.io/parkervcp/yolks:mongodb_7",
            "docker_images": {
              "MongoDB_7": "ghcr.io/parkervcp/yolks:mongodb_7"
            },
            "config": {
              "files": {
                "mongod.conf": {
                  "parser": "file",
                  "find": {
                    "#security:": "security: \r\n  authorization: \"enabled\""
                  }
                }
              },
              "startup": {
                "done": "child process started successfully"
              },
              "stop": "exit",
              "logs": [],
              "file_denylist": [],
              "extends": null
            },
            "startup": "mongod --fork --dbpath /home/container/mongodb/ --port ${SERVER_PORT} --bind_ip 0.0.0.0 --logpath /home/container/logs/mongo.log -f /home/container/mongod.conf; until nc -z -v -w5 127.0.0.1 ${SERVER_PORT}; do echo 'Waiting for mongodb connection...'; sleep 5; done; mongosh --username ${MONGO_USER} --password ${MONGO_USER_PASS} --host 127.0.0.1:${SERVER_PORT} && mongosh --eval \"db.getSiblingDB('admin').shutdownServer()\" 127.0.0.1:${SERVER_PORT}",
            "script": {
              "privileged": true,
              "install": "#!/bin/bash \r\nif [ ! -d /mnt/server/ ]; then\r\n    mkdir -p /mnt/server/\r\nfi\r\n\r\ncd /mnt/server/\r\n\r\ncp /etc/mongod.conf.orig /mnt/server/mongod.conf\r\n\r\nmkdir mongodb logs\r\n\r\nmongod --port 27017 --dbpath /mnt/server/mongodb/ --logpath /mnt/server/logs/mongo.log --fork\r\n\r\nmongosh --eval \"db.getSiblingDB('admin').createUser({user: '${MONGO_USER}', pwd: '${MONGO_USER_PASS}', roles: ['root']})\"\r\n\r\nmongosh --eval \"db.getSiblingDB('admin').shutdownServer()\"\r\n\r\n## install end\r\necho \"-----------------------------------------\"\r\necho \"Installation completed...\"\r\necho \"-----------------------------------------\"",
              "entry": "bash",
              "container": "mongo:7-jammy",
              "extends": null
            },
            "created_at": "2025-03-27T08:15:33+00:00",
            "updated_at": "2025-03-27T08:15:33+00:00"
          }
        }
      }
    }
  },
  {
    "object": "server",
    "attributes": {
      "id": 3,
      "external_id": null,
      "uuid": "3440d34e-c531-4099-bc11-11ace7f4a8b1",
      "identifier": "3440d34e",
      "name": "Prathmesh's Portfolio",
      "description": "POrtfolio",
      "status": null,
      "suspended": false,
      "limits": {
        "memory": 0,
        "swap": 0,
        "disk": 0,
        "io": 500,
        "cpu": 0,
        "threads": null,
        "oom_disabled": true
      },
      "feature_limits": {
        "databases": 5,
        "allocations": 5,
        "backups": 5
      },
      "user": 3,
      "node": 1,
      "allocation": 95,
      "nest": 5,
      "egg": 17,
      "container": {
        "startup_command": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; if [[ \"${MAIN_FILE}\" == \"*.js\" ]]; then /usr/local/bin/node \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; else /usr/local/bin/ts-node --esm \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; fi",
        "image": "ghcr.io/parkervcp/yolks:nodejs_22",
        "installed": 1,
        "environment": {
          "GIT_ADDRESS": "",
          "BRANCH": "",
          "USER_UPLOAD": "0",
          "AUTO_UPDATE": "0",
          "NODE_PACKAGES": "",
          "USERNAME": "",
          "ACCESS_TOKEN": "",
          "UNNODE_PACKAGES": "",
          "MAIN_FILE": "index.js",
          "NODE_ARGS": "",
          "STARTUP": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; if [[ \"${MAIN_FILE}\" == \"*.js\" ]]; then /usr/local/bin/node \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; else /usr/local/bin/ts-node --esm \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; fi",
          "P_SERVER_LOCATION": "Germany",
          "P_SERVER_UUID": "3440d34e-c531-4099-bc11-11ace7f4a8b1",
          "P_SERVER_ALLOCATION_LIMIT": 5
        }
      },
      "updated_at": "2025-03-27T10:48:56+00:00",
      "created_at": "2025-03-27T10:48:16+00:00",
      "relationships": {
        "allocations": {
          "object": "list",
          "data": [
            {
              "object": "allocation",
              "attributes": {
                "id": 95,
                "ip": "5.231.230.39",
                "alias": "fn-1.flaxynodes.fun",
                "port": 2048,
                "notes": null,
                "assigned": true
              }
            },
            {
              "object": "allocation",
              "attributes": {
                "id": 98,
                "ip": "5.231.230.39",
                "alias": "fn-1.flaxynodes.fun",
                "port": 10002,
                "notes": null,
                "assigned": true
              }
            }
          ]
        },
        "user": {
          "object": "user",
          "attributes": {
            "id": 3,
            "external_id": null,
            "uuid": "9e98d355-0d59-4a45-9dee-28f85520f4f9",
            "username": "prath",
            "email": "prathmesh@flaxynodes.fun",
            "first_name": "prath",
            "last_name": "prath",
            "language": "en",
            "root_admin": true,
            "2fa": false,
            "created_at": "2025-03-27T10:28:34+00:00",
            "updated_at": "2025-03-27T10:28:34+00:00"
          }
        },
        "nest": {
          "object": "nest",
          "attributes": {
            "id": 5,
            "uuid": "538ec76c-f92f-43c6-8f33-71659f7aa5aa",
            "author": "loyalhoodro@gmail.com",
            "name": "Node Js Eggs",
            "description": "by Prathmesh </>",
            "created_at": "2025-03-27T10:43:00+00:00",
            "updated_at": "2025-03-27T10:43:00+00:00"
          }
        },
        "egg": {
          "object": "egg",
          "attributes": {
            "id": 17,
            "uuid": "0e3dfd0b-be5f-44ed-bb4e-9999ee9fbbc3",
            "name": "node.js generic",
            "nest": 5,
            "author": "parker@parkervcp.com",
            "description": "a generic node.js egg\r\n\r\nThis will clone a git repo. it defaults to master if no branch is specified.\r\n\r\nInstalls the node_modules on install. If you set user_upload then I assume you know what you are doing.",
            "docker_image": "ghcr.io/parkervcp/yolks:nodejs_22",
            "docker_images": {
              "Nodejs 22": "ghcr.io/parkervcp/yolks:nodejs_22",
              "Nodejs 21": "ghcr.io/parkervcp/yolks:nodejs_21",
              "Nodejs 20": "ghcr.io/parkervcp/yolks:nodejs_20",
              "Nodejs 19": "ghcr.io/parkervcp/yolks:nodejs_19",
              "Nodejs 18": "ghcr.io/parkervcp/yolks:nodejs_18",
              "Nodejs 17": "ghcr.io/parkervcp/yolks:nodejs_17",
              "Nodejs 16": "ghcr.io/parkervcp/yolks:nodejs_16",
              "Nodejs 14": "ghcr.io/parkervcp/yolks:nodejs_14",
              "Nodejs 12": "ghcr.io/parkervcp/yolks:nodejs_12"
            },
            "config": {
              "files": {},
              "startup": {
                "done": [
                  "change this text 1",
                  "change this text 2"
                ]
              },
              "stop": "^C",
              "logs": [],
              "file_denylist": [],
              "extends": null
            },
            "startup": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; if [[ \"${MAIN_FILE}\" == \"*.js\" ]]; then /usr/local/bin/node \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; else /usr/local/bin/ts-node --esm \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; fi",
            "script": {
              "privileged": true,
              "install": "#!/bin/bash\r\n# NodeJS App Installation Script\r\n#\r\n# Server Files: /mnt/server\r\napt update\r\napt install -y git curl jq file unzip make gcc g++ python3 python3-dev python3-pip libtool\r\n\r\necho -e \"updating npm. please wait...\"\r\nnpm install npm@latest --location=global\r\n\r\nmkdir -p /mnt/server\r\ncd /mnt/server\r\n\r\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n    echo -e \"assuming user knows what they are doing have a good day.\"\r\n    exit 0\r\nfi\r\n\r\n## add git ending if it's not on the address\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=${GIT_ADDRESS}.git\r\nfi\r\n\r\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo -e \"using anon api call\"\r\nelse\r\n    GIT_ADDRESS=\"https://${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d/ -f3-)\"\r\nfi\r\n\r\n## pull git js repo\r\nif [ \"$(ls -A /mnt/server)\" ]; then\r\n    echo -e \"/mnt/server directory is not empty.\"\r\n    if [ -d .git ]; then\r\n        echo -e \".git directory exists\"\r\n        if [ -f .git/config ]; then\r\n            echo -e \"loading info from git config\"\r\n            ORIGIN=$(git config --get remote.origin.url)\r\n        else\r\n            echo -e \"files found with no git config\"\r\n            echo -e \"closing out without touching things to not break anything\"\r\n            exit 10\r\n        fi\r\n    fi\r\n\r\n    if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n        echo \"pulling latest from github\"\r\n        git pull\r\n    fi\r\nelse\r\n    echo -e \"/mnt/server is empty.\\ncloning files into repo\"\r\n    if [ -z ${BRANCH} ]; then\r\n        echo -e \"cloning default branch\"\r\n        git clone ${GIT_ADDRESS} .\r\n    else\r\n        echo -e \"cloning ${BRANCH}'\"\r\n        git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n    fi\r\n\r\nfi\r\n\r\necho \"Installing nodejs packages\"\r\nif [[ ! -z ${NODE_PACKAGES} ]]; then\r\n    /usr/local/bin/npm install ${NODE_PACKAGES}\r\nfi\r\n\r\nif [ -f /mnt/server/package.json ]; then\r\n    /usr/local/bin/npm install --production\r\nfi\r\n\r\necho -e \"install complete\"\r\nexit 0",
              "entry": "bash",
              "container": "node:18-bookworm-slim",
              "extends": null
            },
            "created_at": "2025-03-27T10:43:38+00:00",
            "updated_at": "2025-03-27T10:44:02+00:00"
          }
        }
      }
    }
  },
  {
    "object": "server",
    "attributes": {
      "id": 5,
      "external_id": null,
      "uuid": "7d221b7f-1542-454e-969d-8878823dbfa1",
      "identifier": "7d221b7f",
      "name": "Tonight gamerz [exp - 20april]",
      "description": "",
      "status": null,
      "suspended": false,
      "limits": {
        "memory": 8000,
        "swap": 0,
        "disk": 40000,
        "io": 500,
        "cpu": 200,
        "threads": null,
        "oom_disabled": true
      },
      "feature_limits": {
        "databases": 0,
        "allocations": 0,
        "backups": 1
      },
      "user": 8,
      "node": 2,
      "allocation": 3,
      "nest": 1,
      "egg": 2,
      "container": {
        "startup_command": "java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar {{SERVER_JARFILE}}",
        "image": "ghcr.io/pterodactyl/yolks:java_17",
        "installed": 1,
        "environment": {
          "MINECRAFT_VERSION": "1.20.1",
          "SERVER_JARFILE": "server.jar",
          "DL_PATH": "",
          "BUILD_NUMBER": "latest",
          "STARTUP": "java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar {{SERVER_JARFILE}}",
          "P_SERVER_LOCATION": "India 1",
          "P_SERVER_UUID": "7d221b7f-1542-454e-969d-8878823dbfa1",
          "P_SERVER_ALLOCATION_LIMIT": 0
        }
      },
      "updated_at": "2025-03-27T15:53:17+00:00",
      "created_at": "2025-03-27T15:47:15+00:00",
      "relationships": {
        "allocations": {
          "object": "list",
          "data": [
            {
              "object": "allocation",
              "attributes": {
                "id": 3,
                "ip": "163.61.39.238",
                "alias": "india01.flaxynodes.fun",
                "port": 6000,
                "notes": null,
                "assigned": true
              }
            }
          ]
        },
        "user": {
          "object": "user",
          "attributes": {
            "id": 8,
            "external_id": null,
            "uuid": "65105639-7620-4f93-adb1-c10545da9af7",
            "username": "tonight",
            "email": "tonight@flaxynodes.fun",
            "first_name": "Tonight",
            "last_name": "Tonight",
            "language": "en",
            "root_admin": false,
            "2fa": false,
            "created_at": "2025-03-27T15:46:30+00:00",
            "updated_at": "2025-03-27T15:46:30+00:00"
          }
        },
        "nest": {
          "object": "nest",
          "attributes": {
            "id": 1,
            "uuid": "c097599c-d18c-4cfb-8954-77a278917211",
            "author": "support@pterodactyl.io",
            "name": "Minecraft",
            "description": "Minecraft - the classic game from Mojang. With support for Vanilla MC, Spigot, and many others!",
            "created_at": "2025-03-27T07:41:46+00:00",
            "updated_at": "2025-03-27T07:41:46+00:00"
          }
        },
        "egg": {
          "object": "egg",
          "attributes": {
            "id": 2,
            "uuid": "8786df23-c2bf-4c6a-b437-b877cd30893f",
            "name": "Paper",
            "nest": 1,
            "author": "parker@pterodactyl.io",
            "description": "High performance Spigot fork that aims to fix gameplay and mechanics inconsistencies.",
            "docker_image": "ghcr.io/pterodactyl/yolks:java_21",
            "docker_images": {
              "Java 21": "ghcr.io/pterodactyl/yolks:java_21",
              "Java 17": "ghcr.io/pterodactyl/yolks:java_17",
              "Java 16": "ghcr.io/pterodactyl/yolks:java_16",
              "Java 11": "ghcr.io/pterodactyl/yolks:java_11",
              "Java 8": "ghcr.io/pterodactyl/yolks:java_8"
            },
            "config": {
              "files": {
                "server.properties": {
                  "parser": "properties",
                  "find": {
                    "server-ip": "0.0.0.0",
                    "server-port": "{{server.build.default.port}}",
                    "query.port": "{{server.build.default.port}}"
                  }
                }
              },
              "startup": {
                "done": ")! For help, type "
              },
              "stop": "stop",
              "logs": [],
              "file_denylist": [],
              "extends": null
            },
            "startup": "java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar {{SERVER_JARFILE}}",
            "script": {
              "privileged": true,
              "install": "#!/bin/ash\r\n# Paper Installation Script\r\n#\r\n# Server Files: /mnt/server\r\nPROJECT=paper\r\n\r\nif [ -n \"${DL_PATH}\" ]; then\r\n\techo -e \"Using supplied download url: ${DL_PATH}\"\r\n\tDOWNLOAD_URL=`eval echo $(echo ${DL_PATH} | sed -e 's/{{/${/g' -e 's/}}/}/g')`\r\nelse\r\n\tVER_EXISTS=`curl -s https://api.papermc.io/v2/projects/${PROJECT} | jq -r --arg VERSION $MINECRAFT_VERSION '.versions[] | contains($VERSION)' | grep -m1 true`\r\n\tLATEST_VERSION=`curl -s https://api.papermc.io/v2/projects/${PROJECT} | jq -r '.versions' | jq -r '.[-1]'`\r\n\r\n\tif [ \"${VER_EXISTS}\" == \"true\" ]; then\r\n\t\techo -e \"Version is valid. Using version ${MINECRAFT_VERSION}\"\r\n\telse\r\n\t\techo -e \"Specified version not found. Defaulting to the latest ${PROJECT} version\"\r\n\t\tMINECRAFT_VERSION=${LATEST_VERSION}\r\n\tfi\r\n\r\n\tBUILD_EXISTS=`curl -s https://api.papermc.io/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION} | jq -r --arg BUILD ${BUILD_NUMBER} '.builds[] | tostring | contains($BUILD)' | grep -m1 true`\r\n\tLATEST_BUILD=`curl -s https://api.papermc.io/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION} | jq -r '.builds' | jq -r '.[-1]'`\r\n\r\n\tif [ \"${BUILD_EXISTS}\" == \"true\" ]; then\r\n\t\techo -e \"Build is valid for version ${MINECRAFT_VERSION}. Using build ${BUILD_NUMBER}\"\r\n\telse\r\n\t\techo -e \"Using the latest ${PROJECT} build for version ${MINECRAFT_VERSION}\"\r\n\t\tBUILD_NUMBER=${LATEST_BUILD}\r\n\tfi\r\n\r\n\tJAR_NAME=${PROJECT}-${MINECRAFT_VERSION}-${BUILD_NUMBER}.jar\r\n\r\n\techo \"Version being downloaded\"\r\n\techo -e \"MC Version: ${MINECRAFT_VERSION}\"\r\n\techo -e \"Build: ${BUILD_NUMBER}\"\r\n\techo -e \"JAR Name of Build: ${JAR_NAME}\"\r\n\tDOWNLOAD_URL=https://api.papermc.io/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION}/builds/${BUILD_NUMBER}/downloads/${JAR_NAME}\r\nfi\r\n\r\ncd /mnt/server\r\n\r\necho -e \"Running curl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\"\r\n\r\nif [ -f ${SERVER_JARFILE} ]; then\r\n\tmv ${SERVER_JARFILE} ${SERVER_JARFILE}.old\r\nfi\r\n\r\ncurl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\r\n\r\nif [ ! -f server.properties ]; then\r\n    echo -e \"Downloading MC server.properties\"\r\n    curl -o server.properties https://raw.githubusercontent.com/parkervcp/eggs/master/minecraft/java/server.properties\r\nfi",
              "entry": "ash",
              "container": "ghcr.io/pterodactyl/installers:alpine",
              "extends": null
            },
            "created_at": "2025-03-27T07:41:46+00:00",
            "updated_at": "2025-03-27T07:41:46+00:00"
          }
        }
      }
    }
  },
  {
    "object": "server",
    "attributes": {
      "id": 6,
      "external_id": null,
      "uuid": "72ac5c3b-121a-49bd-b59a-81bc2003d3ea",
      "identifier": "72ac5c3b",
      "name": "Flaxy Nodes Bot",
      "description": "bot code",
      "status": null,
      "suspended": false,
      "limits": {
        "memory": 0,
        "swap": 0,
        "disk": 0,
        "io": 500,
        "cpu": 0,
        "threads": null,
        "oom_disabled": true
      },
      "feature_limits": {
        "databases": 2,
        "allocations": 2,
        "backups": 2
      },
      "user": 3,
      "node": 1,
      "allocation": 96,
      "nest": 6,
      "egg": 18,
      "container": {
        "startup_command": "go run main.go",
        "image": "golang:1.24",
        "installed": 1,
        "environment": {
          "BOT_TOKEN": "YOUR_DISCORD_BOT_TOKEN",
          "STARTUP_FILE": "main.go",
          "STARTUP": "go run main.go",
          "P_SERVER_LOCATION": "Germany",
          "P_SERVER_UUID": "72ac5c3b-121a-49bd-b59a-81bc2003d3ea",
          "P_SERVER_ALLOCATION_LIMIT": 2
        }
      },
      "updated_at": "2025-03-28T03:18:14+00:00",
      "created_at": "2025-03-28T03:17:51+00:00",
      "relationships": {
        "allocations": {
          "object": "list",
          "data": [
            {
              "object": "allocation",
              "attributes": {
                "id": 96,
                "ip": "5.231.230.39",
                "alias": "fn-1.flaxynodes.fun",
                "port": 10000,
                "notes": null,
                "assigned": true
              }
            }
          ]
        },
        "user": {
          "object": "user",
          "attributes": {
            "id": 3,
            "external_id": null,
            "uuid": "9e98d355-0d59-4a45-9dee-28f85520f4f9",
            "username": "prath",
            "email": "prathmesh@flaxynodes.fun",
            "first_name": "prath",
            "last_name": "prath",
            "language": "en",
            "root_admin": true,
            "2fa": false,
            "created_at": "2025-03-27T10:28:34+00:00",
            "updated_at": "2025-03-27T10:28:34+00:00"
          }
        },
        "nest": {
          "object": "nest",
          "attributes": {
            "id": 6,
            "uuid": "53d24954-b102-4618-904c-fd0d4a6d7e10",
            "author": "loyalhoodro@gmail.com",
            "name": "Discord Bot",
            "description": "By Prathmesh </>",
            "created_at": "2025-03-28T03:08:30+00:00",
            "updated_at": "2025-03-28T03:08:30+00:00"
          }
        },
        "egg": {
          "object": "egg",
          "attributes": {
            "id": 18,
            "uuid": "f456a60f-8725-4bfd-936d-99a3bdb4775e",
            "name": "Golang Discord Bot",
            "nest": 6,
            "author": "loyalhoodro@gmail.com",
            "description": "self made egg by Prathmesh </>",
            "docker_image": "golang:1.24",
            "docker_images": {
              "golang:1.24": "golang:1.24"
            },
            "config": {
              "files": {
                "config.json": {
                  "parser": "json",
                  "find": {
                    "BOT_TOKEN": "YOUR_BOT_TOKEN"
                  }
                }
              },
              "startup": {
                "done": "Bot is running.",
                "userInteraction": false
              },
              "stop": "^C",
              "logs": {
                "done": "Bot is running.",
                "log": "logs/latest.log"
              },
              "file_denylist": null,
              "extends": null
            },
            "startup": "go run {{STARTUP_FILE}}",
            "script": {
              "privileged": true,
              "install": "#!/bin/bash\r\n# Install Go dependencies\r\ngo mod tidy\r\ngo build -o bot",
              "entry": "ash",
              "container": "alpine:3.4",
              "extends": null
            },
            "created_at": "2025-03-28T03:12:40+00:00",
            "updated_at": "2025-03-28T03:20:55+00:00"
          }
        }
      }
    }
  }
]