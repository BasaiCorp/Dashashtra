[
  {
    "id": 1,
    "uuid": "07f95a0d-9bde-4b24-8f71-113f610d7c02",
    "author": "support@pterodactyl.io",
    "name": "Minecraft",
    "description": "Minecraft - the classic game from Mojang. With support for Vanilla MC, Spigot, and many others!",
    "created_at": "2025-03-20T07:43:02+00:00",
    "updated_at": "2025-03-20T07:43:02+00:00",
    "relationships": {
      "eggs": {
        "object": "list",
        "data": [
          {
            "object": "egg",
            "attributes": {
              "id": 1,
              "uuid": "d16acaac-139f-44c5-ac99-bd086a1e070f",
              "name": "Bungeecord",
              "nest": 1,
              "author": "support@pterodactyl.io",
              "description": "For a long time, Minecraft server owners have had a dream that encompasses a free, easy, and reliable way to connect multiple Minecraft servers together. BungeeCord is the answer to said dream. Whether you are a small server wishing to string multiple game-modes together, or the owner of the ShotBow Network, BungeeCord is the ideal solution for you. With the help of BungeeCord, you will be able to unlock your community's full potential.",
              "docker_image": "ghcr.io/pterodactyl/yolks:java_21",
              "docker_images": {
                "Java 21": "ghcr.io/pterodactyl/yolks:java_21",
                "Java 17": "ghcr.io/pterodactyl/yolks:java_17",
                "Java 16": "ghcr.io/pterodactyl/yolks:java_16",
                "Java 11": "ghcr.io/pterodactyl/yolks:java_11",
                "Java 8": "ghcr.io/pterodactyl/yolks:java_8"
              },
              "config": {
                "files": {
                  "config.yml": {
                    "parser": "yaml",
                    "find": {
                      "listeners[0].query_port": "{{server.build.default.port}}",
                      "listeners[0].host": "0.0.0.0:{{server.build.default.port}}",
                      "servers.*.address": {
                        "regex:^(127\\.0\\.0\\.1|localhost)(:\\d{1,5})?$": "{{config.docker.interface}}$2"
                      }
                    }
                  }
                },
                "startup": {
                  "done": "Listening on "
                },
                "stop": "end",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "java -Xms128M -XX:MaxRAMPercentage=95.0 -jar {{SERVER_JARFILE}}",
              "script": {
                "privileged": true,
                "install": "#!/bin/ash\r\n# Bungeecord Installation Script\r\n#\r\n# Server Files: /mnt/server\r\n\r\ncd /mnt/server\r\n\r\nif [ -z \"${BUNGEE_VERSION}\" ] || [ \"${BUNGEE_VERSION}\" == \"latest\" ]; then\r\n    BUNGEE_VERSION=\"lastStableBuild\"\r\nfi\r\n\r\ncurl -o ${SERVER_JARFILE} https://ci.md-5.net/job/BungeeCord/${BUNGEE_VERSION}/artifact/bootstrap/target/BungeeCord.jar",
                "entry": "ash",
                "container": "ghcr.io/pterodactyl/installers:alpine",
                "extends": null
              },
              "created_at": "2025-03-20T07:43:02+00:00",
              "updated_at": "2025-03-20T07:43:02+00:00"
            }
          },
          {
            "object": "egg",
            "attributes": {
              "id": 2,
              "uuid": "f1f12e5b-db29-47e5-958a-e9a87948cd57",
              "name": "Paper",
              "nest": 1,
              "author": "parker@pterodactyl.io",
              "description": "High performance Spigot fork that aims to fix gameplay and mechanics inconsistencies.",
              "docker_image": "ghcr.io/pterodactyl/yolks:java_21",
              "docker_images": {
                "Java 21": "ghcr.io/pterodactyl/yolks:java_21",
                "Java 17": "ghcr.io/pterodactyl/yolks:java_17",
                "Java 16": "ghcr.io/pterodactyl/yolks:java_16",
                "Java 11": "ghcr.io/pterodactyl/yolks:java_11",
                "Java 8": "ghcr.io/pterodactyl/yolks:java_8"
              },
              "config": {
                "files": {
                  "server.properties": {
                    "parser": "properties",
                    "find": {
                      "server-ip": "0.0.0.0",
                      "server-port": "{{server.build.default.port}}",
                      "query.port": "{{server.build.default.port}}"
                    }
                  }
                },
                "startup": {
                  "done": ")! For help, type "
                },
                "stop": "stop",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar {{SERVER_JARFILE}}",
              "script": {
                "privileged": true,
                "install": "#!/bin/ash\r\n# Paper Installation Script\r\n#\r\n# Server Files: /mnt/server\r\nPROJECT=paper\r\n\r\nif [ -n \"${DL_PATH}\" ]; then\r\n\techo -e \"Using supplied download url: ${DL_PATH}\"\r\n\tDOWNLOAD_URL=`eval echo $(echo ${DL_PATH} | sed -e 's/{{/${/g' -e 's/}}/}/g')`\r\nelse\r\n\tVER_EXISTS=`curl -s https://api.papermc.io/v2/projects/${PROJECT} | jq -r --arg VERSION $MINECRAFT_VERSION '.versions[] | contains($VERSION)' | grep -m1 true`\r\n\tLATEST_VERSION=`curl -s https://api.papermc.io/v2/projects/${PROJECT} | jq -r '.versions' | jq -r '.[-1]'`\r\n\r\n\tif [ \"${VER_EXISTS}\" == \"true\" ]; then\r\n\t\techo -e \"Version is valid. Using version ${MINECRAFT_VERSION}\"\r\n\telse\r\n\t\techo -e \"Specified version not found. Defaulting to the latest ${PROJECT} version\"\r\n\t\tMINECRAFT_VERSION=${LATEST_VERSION}\r\n\tfi\r\n\r\n\tBUILD_EXISTS=`curl -s https://api.papermc.io/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION} | jq -r --arg BUILD ${BUILD_NUMBER} '.builds[] | tostring | contains($BUILD)' | grep -m1 true`\r\n\tLATEST_BUILD=`curl -s https://api.papermc.io/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION} | jq -r '.builds' | jq -r '.[-1]'`\r\n\r\n\tif [ \"${BUILD_EXISTS}\" == \"true\" ]; then\r\n\t\techo -e \"Build is valid for version ${MINECRAFT_VERSION}. Using build ${BUILD_NUMBER}\"\r\n\telse\r\n\t\techo -e \"Using the latest ${PROJECT} build for version ${MINECRAFT_VERSION}\"\r\n\t\tBUILD_NUMBER=${LATEST_BUILD}\r\n\tfi\r\n\r\n\tJAR_NAME=${PROJECT}-${MINECRAFT_VERSION}-${BUILD_NUMBER}.jar\r\n\r\n\techo \"Version being downloaded\"\r\n\techo -e \"MC Version: ${MINECRAFT_VERSION}\"\r\n\techo -e \"Build: ${BUILD_NUMBER}\"\r\n\techo -e \"JAR Name of Build: ${JAR_NAME}\"\r\n\tDOWNLOAD_URL=https://api.papermc.io/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION}/builds/${BUILD_NUMBER}/downloads/${JAR_NAME}\r\nfi\r\n\r\ncd /mnt/server\r\n\r\necho -e \"Running curl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\"\r\n\r\nif [ -f ${SERVER_JARFILE} ]; then\r\n\tmv ${SERVER_JARFILE} ${SERVER_JARFILE}.old\r\nfi\r\n\r\ncurl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\r\n\r\nif [ ! -f server.properties ]; then\r\n    echo -e \"Downloading MC server.properties\"\r\n    curl -o server.properties https://raw.githubusercontent.com/parkervcp/eggs/master/minecraft/java/server.properties\r\nfi",
                "entry": "ash",
                "container": "ghcr.io/pterodactyl/installers:alpine",
                "extends": null
              },
              "created_at": "2025-03-20T07:43:02+00:00",
              "updated_at": "2025-03-20T07:43:02+00:00"
            }
          },
          {
            "object": "egg",
            "attributes": {
              "id": 3,
              "uuid": "fff62d17-9e3b-4f14-a46c-732a4164cda2",
              "name": "Vanilla Minecraft",
              "nest": 1,
              "author": "support@pterodactyl.io",
              "description": "Minecraft is a game about placing blocks and going on adventures. Explore randomly generated worlds and build amazing things from the simplest of homes to the grandest of castles. Play in Creative Mode with unlimited resources or mine deep in Survival Mode, crafting weapons and armor to fend off dangerous mobs. Do all this alone or with friends.",
              "docker_image": "ghcr.io/pterodactyl/yolks:java_21",
              "docker_images": {
                "Java 21": "ghcr.io/pterodactyl/yolks:java_21",
                "Java 17": "ghcr.io/pterodactyl/yolks:java_17",
                "Java 16": "ghcr.io/pterodactyl/yolks:java_16",
                "Java 11": "ghcr.io/pterodactyl/yolks:java_11",
                "Java 8": "ghcr.io/pterodactyl/yolks:java_8"
              },
              "config": {
                "files": {
                  "server.properties": {
                    "parser": "properties",
                    "find": {
                      "server-ip": "0.0.0.0",
                      "server-port": "{{server.build.default.port}}",
                      "query.port": "{{server.build.default.port}}"
                    }
                  }
                },
                "startup": {
                  "done": ")! For help, type "
                },
                "stop": "stop",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "java -Xms128M -XX:MaxRAMPercentage=95.0 -jar {{SERVER_JARFILE}}",
              "script": {
                "privileged": true,
                "install": "#!/bin/ash\r\n# Vanilla MC Installation Script\r\n#\r\n# Server Files: /mnt/server\r\nmkdir -p /mnt/server\r\ncd /mnt/server\r\n\r\nLATEST_VERSION=`curl https://launchermeta.mojang.com/mc/game/version_manifest.json | jq -r '.latest.release'`\r\nLATEST_SNAPSHOT_VERSION=`curl https://launchermeta.mojang.com/mc/game/version_manifest.json | jq -r '.latest.snapshot'`\r\n\r\necho -e \"latest version is $LATEST_VERSION\"\r\necho -e \"latest snapshot is $LATEST_SNAPSHOT_VERSION\"\r\n\r\nif [ -z \"$VANILLA_VERSION\" ] || [ \"$VANILLA_VERSION\" == \"latest\" ]; then\r\n  MANIFEST_URL=$(curl -sSL https://launchermeta.mojang.com/mc/game/version_manifest.json | jq --arg VERSION $LATEST_VERSION -r '.versions | .[] | select(.id== $VERSION )|.url')\r\nelif [ \"$VANILLA_VERSION\" == \"snapshot\" ]; then\r\n  MANIFEST_URL=$(curl -sSL https://launchermeta.mojang.com/mc/game/version_manifest.json | jq --arg VERSION $LATEST_SNAPSHOT_VERSION -r '.versions | .[] | select(.id== $VERSION )|.url')\r\nelse\r\n  MANIFEST_URL=$(curl -sSL https://launchermeta.mojang.com/mc/game/version_manifest.json | jq --arg VERSION $VANILLA_VERSION -r '.versions | .[] | select(.id== $VERSION )|.url')\r\nfi\r\n\r\nDOWNLOAD_URL=$(curl ${MANIFEST_URL} | jq .downloads.server | jq -r '. | .url')\r\n\r\necho -e \"running: curl -o ${SERVER_JARFILE} $DOWNLOAD_URL\"\r\ncurl -o ${SERVER_JARFILE} $DOWNLOAD_URL\r\n\r\necho -e \"Install Complete\"",
                "entry": "ash",
                "container": "ghcr.io/pterodactyl/installers:alpine",
                "extends": null
              },
              "created_at": "2025-03-20T07:43:02+00:00",
              "updated_at": "2025-03-20T07:43:02+00:00"
            }
          },
          {
            "object": "egg",
            "attributes": {
              "id": 4,
              "uuid": "1019b0b0-9a38-494c-b20a-822f9f862e8d",
              "name": "Forge Minecraft",
              "nest": 1,
              "author": "support@pterodactyl.io",
              "description": "Minecraft Forge Server. Minecraft Forge is a modding API (Application Programming Interface), which makes it easier to create mods, and also make sure mods are compatible with each other.",
              "docker_image": "ghcr.io/pterodactyl/yolks:java_21",
              "docker_images": {
                "Java 21": "ghcr.io/pterodactyl/yolks:java_21",
                "Java 17": "ghcr.io/pterodactyl/yolks:java_17",
                "Java 16": "ghcr.io/pterodactyl/yolks:java_16",
                "Java 11": "ghcr.io/pterodactyl/yolks:java_11",
                "Java 8": "ghcr.io/pterodactyl/yolks:java_8"
              },
              "config": {
                "files": {
                  "server.properties": {
                    "parser": "properties",
                    "find": {
                      "server-ip": "0.0.0.0",
                      "server-port": "{{server.build.default.port}}",
                      "query.port": "{{server.build.default.port}}"
                    }
                  }
                },
                "startup": {
                  "done": ")! For help, type "
                },
                "stop": "stop",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true $( [[  ! -f unix_args.txt ]] && printf %s \"-jar {{SERVER_JARFILE}}\" || printf %s \"@unix_args.txt\" )",
              "script": {
                "privileged": true,
                "install": "#!/bin/bash\r\n# Forge Installation Script\r\n#\r\n# Server Files: /mnt/server\r\napt update\r\napt install -y curl jq\r\n\r\nif [[ ! -d /mnt/server ]]; then\r\n  mkdir /mnt/server\r\nfi\r\n\r\ncd /mnt/server\r\n\r\n# Remove spaces from the version number to avoid issues with curl\r\nFORGE_VERSION=\"$(echo \"$FORGE_VERSION\" | tr -d ' ')\"\r\nMC_VERSION=\"$(echo \"$MC_VERSION\" | tr -d ' ')\"\r\n\r\nif [[ ! -z ${FORGE_VERSION} ]]; then\r\n  DOWNLOAD_LINK=https://maven.minecraftforge.net/net/minecraftforge/forge/${FORGE_VERSION}/forge-${FORGE_VERSION}\r\n  FORGE_JAR=forge-${FORGE_VERSION}*.jar\r\nelse\r\n  JSON_DATA=$(curl -sSL https://files.minecraftforge.net/maven/net/minecraftforge/forge/promotions_slim.json)\r\n\r\n  if [[ \"${MC_VERSION}\" == \"latest\" ]] || [[ \"${MC_VERSION}\" == \"\" ]]; then\r\n    echo -e \"getting latest version of forge.\"\r\n    MC_VERSION=$(echo -e ${JSON_DATA} | jq -r '.promos | del(.\"latest-1.7.10\") | del(.\"1.7.10-latest-1.7.10\") | to_entries[] | .key | select(contains(\"latest\")) | split(\"-\")[0]' | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n | tail -1)\r\n    BUILD_TYPE=latest\r\n  fi\r\n\r\n  if [[ \"${BUILD_TYPE}\" != \"recommended\" ]] && [[ \"${BUILD_TYPE}\" != \"latest\" ]]; then\r\n    BUILD_TYPE=recommended\r\n  fi\r\n\r\n  echo -e \"minecraft version: ${MC_VERSION}\"\r\n  echo -e \"build type: ${BUILD_TYPE}\"\r\n\r\n  ## some variables for getting versions and things\r\n  FILE_SITE=https://maven.minecraftforge.net/net/minecraftforge/forge/\r\n  VERSION_KEY=$(echo -e ${JSON_DATA} | jq -r --arg MC_VERSION \"${MC_VERSION}\" --arg BUILD_TYPE \"${BUILD_TYPE}\" '.promos | del(.\"latest-1.7.10\") | del(.\"1.7.10-latest-1.7.10\") | to_entries[] | .key | select(contains($MC_VERSION)) | select(contains($BUILD_TYPE))')\r\n\r\n  ## locating the forge version\r\n  if [[ \"${VERSION_KEY}\" == \"\" ]] && [[ \"${BUILD_TYPE}\" == \"recommended\" ]]; then\r\n    echo -e \"dropping back to latest from recommended due to there not being a recommended version of forge for the mc version requested.\"\r\n    VERSION_KEY=$(echo -e ${JSON_DATA} | jq -r --arg MC_VERSION \"${MC_VERSION}\" '.promos | del(.\"latest-1.7.10\") | del(.\"1.7.10-latest-1.7.10\") | to_entries[] | .key | select(contains($MC_VERSION)) | select(contains(\"latest\"))')\r\n  fi\r\n\r\n  ## Error if the mc version set wasn't valid.\r\n  if [ \"${VERSION_KEY}\" == \"\" ] || [ \"${VERSION_KEY}\" == \"null\" ]; then\r\n    echo -e \"The install failed because there is no valid version of forge for the version of minecraft selected.\"\r\n    exit 1\r\n  fi\r\n\r\n  FORGE_VERSION=$(echo -e ${JSON_DATA} | jq -r --arg VERSION_KEY \"$VERSION_KEY\" '.promos | .[$VERSION_KEY]')\r\n\r\n  if [[ \"${MC_VERSION}\" == \"1.7.10\" ]] || [[ \"${MC_VERSION}\" == \"1.8.9\" ]]; then\r\n    DOWNLOAD_LINK=${FILE_SITE}${MC_VERSION}-${FORGE_VERSION}-${MC_VERSION}/forge-${MC_VERSION}-${FORGE_VERSION}-${MC_VERSION}\r\n    FORGE_JAR=forge-${MC_VERSION}-${FORGE_VERSION}-${MC_VERSION}.jar\r\n    if [[ \"${MC_VERSION}\" == \"1.7.10\" ]]; then\r\n      FORGE_JAR=forge-${MC_VERSION}-${FORGE_VERSION}-${MC_VERSION}-universal.jar\r\n    fi\r\n  else\r\n    DOWNLOAD_LINK=${FILE_SITE}${MC_VERSION}-${FORGE_VERSION}/forge-${MC_VERSION}-${FORGE_VERSION}\r\n    FORGE_JAR=forge-${MC_VERSION}-${FORGE_VERSION}.jar\r\n  fi\r\nfi\r\n\r\n#Adding .jar when not eding by SERVER_JARFILE\r\nif [[ ! $SERVER_JARFILE = *\\.jar ]]; then\r\n  SERVER_JARFILE=\"$SERVER_JARFILE.jar\"\r\nfi\r\n\r\n#Downloading jars\r\necho -e \"Downloading forge version ${FORGE_VERSION}\"\r\necho -e \"Download link is ${DOWNLOAD_LINK}\"\r\n\r\nif [[ ! -z \"${DOWNLOAD_LINK}\" ]]; then\r\n  if curl --output /dev/null --silent --head --fail ${DOWNLOAD_LINK}-installer.jar; then\r\n    echo -e \"installer jar download link is valid.\"\r\n  else\r\n    echo -e \"link is invalid. Exiting now\"\r\n    exit 2\r\n  fi\r\nelse\r\n  echo -e \"no download link provided. Exiting now\"\r\n  exit 3\r\nfi\r\n\r\ncurl -s -o installer.jar -sS ${DOWNLOAD_LINK}-installer.jar\r\n\r\n#Checking if downloaded jars exist\r\nif [[ ! -f ./installer.jar ]]; then\r\n  echo \"!!! Error downloading forge version ${FORGE_VERSION} !!!\"\r\n  exit\r\nfi\r\n\r\nfunction  unix_args {\r\n  echo -e \"Detected Forge 1.17 or newer version. Setting up forge unix args.\"\r\n  ln -sf libraries/net/minecraftforge/forge/*/unix_args.txt unix_args.txt\r\n}\r\n\r\n# Delete args to support downgrading/upgrading\r\nrm -rf libraries/net/minecraftforge/forge\r\nrm unix_args.txt\r\n\r\n#Installing server\r\necho -e \"Installing forge server.\\n\"\r\njava -jar installer.jar --installServer || { echo -e \"\\nInstall failed using Forge version ${FORGE_VERSION} and Minecraft version ${MINECRAFT_VERSION}.\\nShould you be using unlimited memory value of 0, make sure to increase the default install resource limits in the Wings config or specify exact allocated memory in the server Build Configuration instead of 0! \\nOtherwise, the Forge installer will not have enough memory.\"; exit 4; }\r\n\r\n# Check if we need a symlink for 1.17+ Forge JPMS args\r\nif [[ $MC_VERSION =~ ^1\\.(17|18|19|20|21|22|23) || $FORGE_VERSION =~ ^1\\.(17|18|19|20|21|22|23) ]]; then\r\n  unix_args\r\n\r\n# Check if someone has set MC to latest but overwrote it with older Forge version, otherwise we would have false positives\r\nelif [[ $MC_VERSION == \"latest\" && $FORGE_VERSION =~ ^1\\.(17|18|19|20|21|22|23) ]]; then\r\n  unix_args\r\nelse\r\n  # For versions below 1.17 that ship with jar\r\n  mv $FORGE_JAR $SERVER_JARFILE\r\nfi\r\n\r\necho -e \"Deleting installer.jar file.\\n\"\r\nrm -rf installer.jar\r\necho -e \"Installation process is completed\"",
                "entry": "bash",
                "container": "openjdk:8-jdk-slim",
                "extends": null
              },
              "created_at": "2025-03-20T07:43:02+00:00",
              "updated_at": "2025-03-20T07:43:02+00:00"
            }
          },
          {
            "object": "egg",
            "attributes": {
              "id": 5,
              "uuid": "7eeeac12-59e5-49c4-bb5a-bb801fb0cb88",
              "name": "Sponge (SpongeVanilla)",
              "nest": 1,
              "author": "support@pterodactyl.io",
              "description": "SpongeVanilla is the SpongeAPI implementation for Vanilla Minecraft.",
              "docker_image": "ghcr.io/pterodactyl/yolks:java_21",
              "docker_images": {
                "Java 21": "ghcr.io/pterodactyl/yolks:java_21",
                "Java 16": "ghcr.io/pterodactyl/yolks:java_16",
                "Java 11": "ghcr.io/pterodactyl/yolks:java_11",
                "Java 8": "ghcr.io/pterodactyl/yolks:java_8"
              },
              "config": {
                "files": {
                  "server.properties": {
                    "parser": "properties",
                    "find": {
                      "server-ip": "0.0.0.0",
                      "server-port": "{{server.build.default.port}}",
                      "query.port": "{{server.build.default.port}}"
                    }
                  }
                },
                "startup": {
                  "done": ")! For help, type "
                },
                "stop": "stop",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "java -Xms128M -XX:MaxRAMPercentage=95.0 -jar {{SERVER_JARFILE}}",
              "script": {
                "privileged": true,
                "install": "#!/bin/ash\r\n# Sponge Installation Script\r\n#\r\n# Server Files: /mnt/server\r\n\r\ncd /mnt/server\r\n\r\ncurl -sSL \"https://repo.spongepowered.org/maven/org/spongepowered/spongevanilla/${SPONGE_VERSION}/spongevanilla-${SPONGE_VERSION}.jar\" -o ${SERVER_JARFILE}",
                "entry": "ash",
                "container": "ghcr.io/pterodactyl/installers:alpine",
                "extends": null
              },
              "created_at": "2025-03-20T07:43:02+00:00",
              "updated_at": "2025-03-20T07:43:02+00:00"
            }
          },
          {
            "object": "egg",
            "attributes": {
              "id": 15,
              "uuid": "96a316cb-dd42-4fa6-8e93-8339794e5ead",
              "name": "Velocity",
              "nest": 1,
              "author": "parker@parkervcp.com",
              "description": "Velocity is a Minecraft server proxy with unparalleled server support, scalability, and flexibility.",
              "docker_image": "ghcr.io/pterodactyl/yolks:java_21",
              "docker_images": {
                "Java 21": "ghcr.io/pterodactyl/yolks:java_21",
                "Java 17": "ghcr.io/pterodactyl/yolks:java_17",
                "Java 16": "ghcr.io/pterodactyl/yolks:java_16",
                "Java 11": "ghcr.io/pterodactyl/yolks:java_11",
                "Java 8": "ghcr.io/pterodactyl/yolks:java_8"
              },
              "config": {
                "files": {
                  "velocity.toml": {
                    "parser": "file",
                    "find": {
                      "bind = ": "bind = \"0.0.0.0:{{server.build.default.port}}\""
                    }
                  }
                },
                "startup": {
                  "done": "Done ("
                },
                "stop": "end",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "java -Xms128M -Xmx{{SERVER_MEMORY}}M -XX:+UseG1GC -XX:G1HeapRegionSize=4M -XX:+UnlockExperimentalVMOptions -XX:+ParallelRefProcEnabled -XX:+AlwaysPreTouch -XX:MaxInlineLevel=15 -jar {{SERVER_JARFILE}}",
              "script": {
                "privileged": true,
                "install": "#!/bin/ash\r\n# Velocity Proxy Installation Script\r\n#\r\n# Server Files: /mnt/server\r\nPROJECT=velocity\r\n\r\nif [[ -z ${VELOCITY_VERSION} ]] || [[ ${VELOCITY_VERSION} == \"latest\" ]]; then\r\n    VELOCITY_VERSION=\"latest\"\r\nfi\r\n\r\nif [[ -n \"${DOWNLOAD_LINK}\" ]]; then\r\n    echo -e \"Using supplied download url: ${DOWNLOAD_LINK}\"\r\n    DOWNLOAD_URL=$(eval echo $(echo ${DL_PATH} | sed -e 's/{{/${/g' -e 's/}}/}/g'))\r\nelse\r\n    VER_EXISTS=$(curl -s https://papermc.io/api/v2/projects/${PROJECT} | jq -r --arg VERSION $VELOCITY_VERSION '.versions[] | contains($VERSION)' | grep true)\r\n    LATEST_VERSION=$(curl -s https://papermc.io/api/v2/projects/${PROJECT} | jq -r '.versions' | jq -r '.[-1]')\r\n\r\nif [[ \"${VER_EXISTS}\" == \"true\" ]]; then\r\n    echo -e \"Version is valid. Using version ${VELOCITY_VERSION}\"\r\nelse\r\n    echo -e \"Using the latest ${PROJECT} version\"\r\n    VELOCITY_VERSION=${LATEST_VERSION}\r\nfi\r\n\r\nBUILD_EXISTS=$(curl -s https://papermc.io/api/v2/projects/${PROJECT}/versions/${VELOCITY_VERSION} | jq -r --arg BUILD ${BUILD_NUMBER} '.builds[] | tostring | contains($BUILD)' | grep true)\r\nLATEST_BUILD=$(curl -s https://papermc.io/api/v2/projects/${PROJECT}/versions/${VELOCITY_VERSION} | jq -r '.builds' | jq -r '.[-1]')\r\n\r\nif [[ \"${BUILD_EXISTS}\" == \"true\" ]]; then\r\n    echo -e \"Build is valid for version ${VELOCITY_VERSION}. Using build ${BUILD_NUMBER}\"\r\nelse\r\n    echo -e \"Using the latest ${PROJECT} build for version ${VELOCITY_VERSION}\"\r\n    BUILD_NUMBER=${LATEST_BUILD}\r\nfi\r\n\r\nJAR_NAME=${PROJECT}-${VELOCITY_VERSION}-${BUILD_NUMBER}.jar\r\necho \"Version being downloaded\"\r\necho -e \"Velocity Version: ${VELOCITY_VERSION}\"\r\necho -e \"Build: ${BUILD_NUMBER}\"\r\necho -e \"JAR Name of Build: ${JAR_NAME}\"\r\nDOWNLOAD_URL=https://papermc.io/api/v2/projects/${PROJECT}/versions/${VELOCITY_VERSION}/builds/${BUILD_NUMBER}/downloads/${JAR_NAME}\r\n\r\nfi\r\ncd /mnt/server\r\necho -e \"Running curl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\"\r\n\r\nif [[ -f ${SERVER_JARFILE} ]]; then\r\nmv ${SERVER_JARFILE} ${SERVER_JARFILE}.old\r\nfi\r\n\r\ncurl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\r\n\r\nif [[ -f velocity.toml ]]; then\r\n    echo -e \"velocity config file exists\"\r\nelse\r\n    echo -e \"downloading velocity config file.\"\r\n    curl https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/proxy/java/velocity/velocity.toml -o velocity.toml\r\nfi\r\n\r\nif [[ -f forwarding.secret ]]; then\r\n    echo -e \"velocity forwarding secret file already exists\"\r\nelse\r\n    echo -e \"creating forwarding secret file\"\r\n    touch forwarding.secret\r\n    date +%s | sha256sum | base64 | head -c 12 > forwarding.secret\r\nfi\r\n\r\necho -e \"install complete\"",
                "entry": "ash",
                "container": "ghcr.io/parkervcp/installers:alpine",
                "extends": null
              },
              "created_at": "2025-03-20T08:36:50+00:00",
              "updated_at": "2025-03-20T08:36:50+00:00"
            }
          },
          {
            "object": "egg",
            "attributes": {
              "id": 16,
              "uuid": "cc19791f-e98c-4f7e-b2fd-558bacbe6dcc",
              "name": "Waterfall",
              "nest": 1,
              "author": "hostmaster@waterfallgaming.net",
              "description": "Waterfall is a fork of the well-known BungeeCord server teleportation suite.",
              "docker_image": "ghcr.io/pterodactyl/yolks:java_17",
              "docker_images": {
                "ghcr.io/pterodactyl/yolks:java_17": "ghcr.io/pterodactyl/yolks:java_17",
                "ghcr.io/pterodactyl/yolks:java_16": "ghcr.io/pterodactyl/yolks:java_16",
                "ghcr.io/pterodactyl/yolks:java_11": "ghcr.io/pterodactyl/yolks:java_11",
                "ghcr.io/pterodactyl/yolks:java_8": "ghcr.io/pterodactyl/yolks:java_8"
              },
              "config": {
                "files": {
                  "config.yml": {
                    "parser": "yaml",
                    "find": {
                      "listeners[0].host": "0.0.0.0:{{server.build.default.port}}",
                      "servers.*.address": {
                        "127.0.0.1": "{{config.docker.interface}}",
                        "localhost": "{{config.docker.interface}}"
                      }
                    }
                  }
                },
                "startup": {
                  "done": "Listening on "
                },
                "stop": "end",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "java -Xms128M -Xmx{{SERVER_MEMORY}}M -Dterminal.jline=false -Dterminal.ansi=true -jar {{SERVER_JARFILE}}",
              "script": {
                "privileged": true,
                "install": "#!/bin/bash\r\n# Waterfall Installation Script\r\n#\r\n# Server Files: /mnt/server\r\nPROJECT=waterfall\r\n\r\napt update\r\napt install -y curl jq\r\n\r\nif [ -n \"${DL_LINK}\" ]; then\r\n\techo -e \"Using supplied download url: ${DL_LINK}\"\r\n\tDOWNLOAD_URL=`eval echo $(echo ${DL_LINK} | sed -e 's/{{/${/g' -e 's/}}/}/g')`\r\nelse\r\n\tVER_EXISTS=`curl -s https://papermc.io/api/v2/projects/${PROJECT} | jq -r --arg VERSION $MINECRAFT_VERSION '.versions[] | contains($VERSION)' | grep true`\r\n\tLATEST_VERSION=`curl -s https://papermc.io/api/v2/projects/${PROJECT} | jq -r '.versions' | jq -r '.[-1]'`\r\n\r\n\tif [ \"${VER_EXISTS}\" == \"true\" ]; then\r\n\t\techo -e \"Version is valid. Using version ${MINECRAFT_VERSION}\"\r\n\telse\r\n\t\techo -e \"Using the latest ${PROJECT} version\"\r\n\t\tMINECRAFT_VERSION=${LATEST_VERSION}\r\n\tfi\r\n\t\r\n\tBUILD_EXISTS=`curl -s https://papermc.io/api/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION} | jq -r --arg BUILD ${BUILD_NUMBER} '.builds[] | tostring | contains($BUILD)' | grep true`\r\n\tLATEST_BUILD=`curl -s https://papermc.io/api/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION} | jq -r '.builds' | jq -r '.[-1]'`\r\n\t\r\n\tif [ \"${BUILD_EXISTS}\" == \"true\" ]; then\r\n\t\techo -e \"Build is valid for version ${MINECRAFT_VERSION}. Using build ${BUILD_NUMBER}\"\r\n\telse\r\n\t\techo -e \"Using the latest ${PROJECT} build for version ${MINECRAFT_VERSION}\"\r\n\t\tBUILD_NUMBER=${LATEST_BUILD}\r\n\tfi\r\n\t\r\n\tJAR_NAME=${PROJECT}-${MINECRAFT_VERSION}-${BUILD_NUMBER}.jar\r\n\t\r\n\techo \"Version being downloaded\"\r\n\techo -e \"MC Version: ${MINECRAFT_VERSION}\"\r\n\techo -e \"Build: ${BUILD_NUMBER}\"\r\n\techo -e \"JAR Name of Build: ${JAR_NAME}\"\r\n\tDOWNLOAD_URL=https://papermc.io/api/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION}/builds/${BUILD_NUMBER}/downloads/${JAR_NAME}\r\nfi\r\n\r\ncd /mnt/server\r\n\r\necho -e \"Running curl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\"\r\n\r\nif [ -f ${SERVER_JARFILE} ]; then\r\n\tmv ${SERVER_JARFILE} ${SERVER_JARFILE}.old\r\nfi\r\n\r\ncurl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\r\n\r\nif [ ! -f config.yml ]; then\r\n\techo -e \"Downloading ${PROJECT} config.yml\"\r\n\tcurl -o config.yml https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/proxy/java/waterfall/config.yml\r\nelse\r\n\techo -e \"${PROJECT} config.yml exists. Will not pull a new file\"\r\nfi",
                "entry": "bash",
                "container": "ghcr.io/parkervcp/installers:debian",
                "extends": null
              },
              "created_at": "2025-03-20T08:37:04+00:00",
              "updated_at": "2025-03-20T08:37:04+00:00"
            }
          }
        ]
      }
    }
  },
  {
    "id": 2,
    "uuid": "6f1f4725-354a-4c9f-b48c-632d07ea8ee1",
    "author": "support@pterodactyl.io",
    "name": "Source Engine",
    "description": "Includes support for most Source Dedicated Server games.",
    "created_at": "2025-03-20T07:43:02+00:00",
    "updated_at": "2025-03-20T07:43:02+00:00",
    "relationships": {
      "eggs": {
        "object": "list",
        "data": [
          {
            "object": "egg",
            "attributes": {
              "id": 6,
              "uuid": "601b8128-7ac4-45ca-b535-270102bcc321",
              "name": "Insurgency",
              "nest": 2,
              "author": "support@pterodactyl.io",
              "description": "Take to the streets for intense close quarters combat, where a team's survival depends upon securing crucial strongholds and destroying enemy supply in this multiplayer and cooperative Source Engine based experience.",
              "docker_image": "ghcr.io/pterodactyl/games:source",
              "docker_images": {
                "ghcr.io/pterodactyl/games:source": "ghcr.io/pterodactyl/games:source"
              },
              "config": {
                "files": {},
                "startup": {
                  "done": "gameserver Steam ID"
                },
                "stop": "quit",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "./srcds_run -game insurgency -console -port {{SERVER_PORT}} +map {{SRCDS_MAP}} +ip 0.0.0.0 -strictportbind -norestart",
              "script": {
                "privileged": true,
                "install": "#!/bin/bash\r\n# steamcmd Base Installation Script\r\n#\r\n# Server Files: /mnt/server\r\n\r\n## download and install steamcmd\r\ncd /tmp\r\nmkdir -p /mnt/server/steamcmd\r\ncurl -sSL -o steamcmd.tar.gz https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz\r\ntar -xzvf steamcmd.tar.gz -C /mnt/server/steamcmd\r\ncd /mnt/server/steamcmd\r\n\r\n# SteamCMD fails otherwise for some reason, even running as root.\r\n# This is changed at the end of the install process anyways.\r\nchown -R root:root /mnt\r\nexport HOME=/mnt/server\r\n\r\n## install game using steamcmd\r\n./steamcmd.sh +force_install_dir /mnt/server +login anonymous +app_update ${SRCDS_APPID} ${EXTRA_FLAGS} +quit\r\n\r\n## set up 32 bit libraries\r\nmkdir -p /mnt/server/.steam/sdk32\r\ncp -v linux32/steamclient.so ../.steam/sdk32/steamclient.so\r\n\r\n## set up 64 bit libraries\r\nmkdir -p /mnt/server/.steam/sdk64\r\ncp -v linux64/steamclient.so ../.steam/sdk64/steamclient.so",
                "entry": "bash",
                "container": "ghcr.io/pterodactyl/installers:debian",
                "extends": null
              },
              "created_at": "2025-03-20T07:43:02+00:00",
              "updated_at": "2025-03-20T07:43:02+00:00"
            }
          },
          {
            "object": "egg",
            "attributes": {
              "id": 7,
              "uuid": "74bb529a-2c85-488a-afe8-f40dc09d66de",
              "name": "Ark: Survival Evolved",
              "nest": 2,
              "author": "dev@shepper.fr",
              "description": "As a man or woman stranded, naked, freezing, and starving on the unforgiving shores of a mysterious island called ARK, use your skill and cunning to kill or tame and ride the plethora of leviathan dinosaurs and other primeval creatures roaming the land. Hunt, harvest resources, craft items, grow crops, research technologies, and build shelters to withstand the elements and store valuables, all while teaming up with (or preying upon) hundreds of other players to survive, dominate... and escape! — Gamepedia: ARK",
              "docker_image": "quay.io/parkervcp/pterodactyl-images:debian_source",
              "docker_images": {
                "quay.io/parkervcp/pterodactyl-images:debian_source": "quay.io/parkervcp/pterodactyl-images:debian_source"
              },
              "config": {
                "files": {},
                "startup": {
                  "done": "Waiting commands for 127.0.0.1:"
                },
                "stop": "^C",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "rmv() { echo -e \"stopping server\"; rcon -t rcon -a 127.0.0.1:${RCON_PORT} -p ${ARK_ADMIN_PASSWORD} -c saveworld && rcon -a 127.0.0.1:${RCON_PORT} -p ${ARK_ADMIN_PASSWORD} -c DoExit; }; trap rmv 15; cd ShooterGame/Binaries/Linux && ./ShooterGameServer {{SERVER_MAP}}?listen?SessionName=\"{{SESSION_NAME}}\"?ServerPassword={{ARK_PASSWORD}}?ServerAdminPassword={{ARK_ADMIN_PASSWORD}}?Port={{SERVER_PORT}}?RCONPort={{RCON_PORT}}?QueryPort={{QUERY_PORT}}?RCONEnabled=True$( [ \"$BATTLE_EYE\" == \"1\" ] || printf %s ' -NoBattlEye' ) -server {{ARGS}} -log & until echo \"waiting for rcon connection...\"; rcon -t rcon -a 127.0.0.1:${RCON_PORT} -p ${ARK_ADMIN_PASSWORD}; do sleep 5; done",
              "script": {
                "privileged": true,
                "install": "#!/bin/bash\r\n# steamcmd Base Installation Script\r\n#\r\n# Server Files: /mnt/server\r\n# Image to install with is 'ubuntu:18.04'\r\n\r\n## just in case someone removed the defaults.\r\nif [ \"${STEAM_USER}\" == \"\" ]; then\r\n    STEAM_USER=anonymous\r\n    STEAM_PASS=\"\"\r\n    STEAM_AUTH=\"\"\r\nfi\r\n\r\n## download and install steamcmd\r\ncd /tmp\r\nmkdir -p /mnt/server/steamcmd\r\ncurl -sSL -o steamcmd.tar.gz https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz\r\ntar -xzvf steamcmd.tar.gz -C /mnt/server/steamcmd\r\n\r\nmkdir -p /mnt/server/Engine/Binaries/ThirdParty/SteamCMD/Linux\r\ntar -xzvf steamcmd.tar.gz -C /mnt/server/Engine/Binaries/ThirdParty/SteamCMD/Linux\r\nmkdir -p /mnt/server/steamapps # Fix steamcmd disk write error when this folder is missing\r\ncd /mnt/server/steamcmd\r\n\r\n# SteamCMD fails otherwise for some reason, even running as root.\r\n# This is changed at the end of the install process anyways.\r\nchown -R root:root /mnt\r\nexport HOME=/mnt/server\r\n\r\n## install game using steamcmd\r\n./steamcmd.sh +force_install_dir /mnt/server +login ${STEAM_USER} ${STEAM_PASS} ${STEAM_AUTH} +app_update ${SRCDS_APPID} ${EXTRA_FLAGS} +quit ## other flags may be needed depending on install. looking at you cs 1.6\r\n\r\n## set up 32 bit libraries\r\nmkdir -p /mnt/server/.steam/sdk32\r\ncp -v linux32/steamclient.so ../.steam/sdk32/steamclient.so\r\n\r\n## set up 64 bit libraries\r\nmkdir -p /mnt/server/.steam/sdk64\r\ncp -v linux64/steamclient.so ../.steam/sdk64/steamclient.so\r\n\r\n## create a symbolic link for loading mods\r\ncd /mnt/server/Engine/Binaries/ThirdParty/SteamCMD/Linux\r\nln -sf ../../../../../Steam/steamapps steamapps\r\ncd /mnt/server",
                "entry": "bash",
                "container": "ghcr.io/pterodactyl/installers:debian",
                "extends": null
              },
              "created_at": "2025-03-20T07:43:02+00:00",
              "updated_at": "2025-03-20T07:43:02+00:00"
            }
          },
          {
            "object": "egg",
            "attributes": {
              "id": 8,
              "uuid": "de874ce6-54c0-4d7f-8240-5621b726395f",
              "name": "Custom Source Engine Game",
              "nest": 2,
              "author": "support@pterodactyl.io",
              "description": "This option allows modifying the startup arguments and other details to run a custom SRCDS based game on the panel.",
              "docker_image": "ghcr.io/pterodactyl/games:source",
              "docker_images": {
                "ghcr.io/pterodactyl/games:source": "ghcr.io/pterodactyl/games:source"
              },
              "config": {
                "files": {},
                "startup": {
                  "done": "gameserver Steam ID"
                },
                "stop": "quit",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "./srcds_run -game {{SRCDS_GAME}} -console -port {{SERVER_PORT}} +map {{SRCDS_MAP}} +ip 0.0.0.0 -strictportbind -norestart",
              "script": {
                "privileged": true,
                "install": "#!/bin/bash\r\n# steamcmd Base Installation Script\r\n#\r\n# Server Files: /mnt/server\r\n\r\n##\r\n#\r\n# Variables\r\n# STEAM_USER, STEAM_PASS, STEAM_AUTH - Steam user setup. If a user has 2fa enabled it will most likely fail due to timeout. Leave blank for anon install.\r\n# WINDOWS_INSTALL - if it's a windows server you want to install set to 1\r\n# SRCDS_APPID - steam app id ffound here - https://developer.valvesoftware.com/wiki/Dedicated_Servers_List\r\n# EXTRA_FLAGS - when a server has extra glas for things like beta installs or updates.\r\n#\r\n##\r\n\r\n\r\n## just in case someone removed the defaults.\r\nif [ \"${STEAM_USER}\" == \"\" ]; then\r\n    echo -e \"steam user is not set.\\n\"\r\n    echo -e \"Using anonymous user.\\n\"\r\n    STEAM_USER=anonymous\r\n    STEAM_PASS=\"\"\r\n    STEAM_AUTH=\"\"\r\nelse\r\n    echo -e \"user set to ${STEAM_USER}\"\r\nfi\r\n\r\n## download and install steamcmd\r\ncd /tmp\r\nmkdir -p /mnt/server/steamcmd\r\ncurl -sSL -o steamcmd.tar.gz https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz\r\ntar -xzvf steamcmd.tar.gz -C /mnt/server/steamcmd\r\nmkdir -p /mnt/server/steamapps # Fix steamcmd disk write error when this folder is missing\r\ncd /mnt/server/steamcmd\r\n\r\n# SteamCMD fails otherwise for some reason, even running as root.\r\n# This is changed at the end of the install process anyways.\r\nchown -R root:root /mnt\r\nexport HOME=/mnt/server\r\n\r\n## install game using steamcmd\r\n./steamcmd.sh +force_install_dir /mnt/server +login ${STEAM_USER} ${STEAM_PASS} ${STEAM_AUTH} $( [[ \"${WINDOWS_INSTALL}\" == \"1\" ]] && printf %s '+@sSteamCmdForcePlatformType windows' ) +app_update ${SRCDS_APPID} ${EXTRA_FLAGS} validate +quit ## other flags may be needed depending on install. looking at you cs 1.6\r\n\r\n## set up 32 bit libraries\r\nmkdir -p /mnt/server/.steam/sdk32\r\ncp -v linux32/steamclient.so ../.steam/sdk32/steamclient.so\r\n\r\n## set up 64 bit libraries\r\nmkdir -p /mnt/server/.steam/sdk64\r\ncp -v linux64/steamclient.so ../.steam/sdk64/steamclient.so",
                "entry": "bash",
                "container": "ghcr.io/pterodactyl/installers:debian",
                "extends": null
              },
              "created_at": "2025-03-20T07:43:02+00:00",
              "updated_at": "2025-03-20T07:43:02+00:00"
            }
          },
          {
            "object": "egg",
            "attributes": {
              "id": 9,
              "uuid": "e9be02be-e78c-439e-9262-f049c6bd8c7d",
              "name": "Counter-Strike: Global Offensive",
              "nest": 2,
              "author": "support@pterodactyl.io",
              "description": "Counter-Strike: Global Offensive is a multiplayer first-person shooter video game developed by Hidden Path Entertainment and Valve Corporation.",
              "docker_image": "ghcr.io/pterodactyl/games:source",
              "docker_images": {
                "ghcr.io/pterodactyl/games:source": "ghcr.io/pterodactyl/games:source"
              },
              "config": {
                "files": {},
                "startup": {
                  "done": "Connection to Steam servers successful"
                },
                "stop": "quit",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "./srcds_run -game csgo -console -port {{SERVER_PORT}} +ip 0.0.0.0 +map {{SRCDS_MAP}} -strictportbind -norestart +sv_setsteamaccount {{STEAM_ACC}}",
              "script": {
                "privileged": true,
                "install": "#!/bin/bash\r\n# steamcmd Base Installation Script\r\n#\r\n# Server Files: /mnt/server\r\n\r\n## just in case someone removed the defaults.\r\nif [ \"${STEAM_USER}\" == \"\" ]; then\r\n    STEAM_USER=anonymous\r\n    STEAM_PASS=\"\"\r\n    STEAM_AUTH=\"\"\r\nfi\r\n\r\n## download and install steamcmd\r\ncd /tmp\r\nmkdir -p /mnt/server/steamcmd\r\ncurl -sSL -o steamcmd.tar.gz https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz\r\ntar -xzvf steamcmd.tar.gz -C /mnt/server/steamcmd\r\nmkdir -p /mnt/server/steamapps # Fix steamcmd disk write error when this folder is missing\r\ncd /mnt/server/steamcmd\r\n\r\n# SteamCMD fails otherwise for some reason, even running as root.\r\n# This is changed at the end of the install process anyways.\r\nchown -R root:root /mnt\r\nexport HOME=/mnt/server\r\n\r\n## install game using steamcmd\r\n./steamcmd.sh +force_install_dir /mnt/server +login ${STEAM_USER} ${STEAM_PASS} ${STEAM_AUTH} +app_update ${SRCDS_APPID} ${EXTRA_FLAGS} +quit ## other flags may be needed depending on install. looking at you cs 1.6\r\n\r\n## set up 32 bit libraries\r\nmkdir -p /mnt/server/.steam/sdk32\r\ncp -v linux32/steamclient.so ../.steam/sdk32/steamclient.so\r\n\r\n## set up 64 bit libraries\r\nmkdir -p /mnt/server/.steam/sdk64\r\ncp -v linux64/steamclient.so ../.steam/sdk64/steamclient.so",
                "entry": "bash",
                "container": "ghcr.io/pterodactyl/installers:debian",
                "extends": null
              },
              "created_at": "2025-03-20T07:43:02+00:00",
              "updated_at": "2025-03-20T07:43:02+00:00"
            }
          },
          {
            "object": "egg",
            "attributes": {
              "id": 10,
              "uuid": "cb4e5752-65f6-4efd-88cb-f74ee1bea715",
              "name": "Garrys Mod",
              "nest": 2,
              "author": "support@pterodactyl.io",
              "description": "Garrys Mod, is a sandbox physics game created by Garry Newman, and developed by his company, Facepunch Studios.",
              "docker_image": "ghcr.io/pterodactyl/games:source",
              "docker_images": {
                "ghcr.io/pterodactyl/games:source": "ghcr.io/pterodactyl/games:source"
              },
              "config": {
                "files": {},
                "startup": {
                  "done": "gameserver Steam ID"
                },
                "stop": "quit",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "./srcds_run -game garrysmod -console -port {{SERVER_PORT}} +ip 0.0.0.0 +host_workshop_collection {{WORKSHOP_ID}} +map {{SRCDS_MAP}} +gamemode {{GAMEMODE}} -strictportbind -norestart +sv_setsteamaccount {{STEAM_ACC}} +maxplayers {{MAX_PLAYERS}}  -tickrate {{TICKRATE}}  $( [ \"$LUA_REFRESH\" == \"1\" ] || printf %s '-disableluarefresh' )",
              "script": {
                "privileged": true,
                "install": "#!/bin/bash\r\n# steamcmd Base Installation Script\r\n#\r\n# Server Files: /mnt/server\r\n\r\n## just in case someone removed the defaults.\r\nif [ \"${STEAM_USER}\" == \"\" ]; then\r\n    echo -e \"steam user is not set.\\n\"\r\n    echo -e \"Using anonymous user.\\n\"\r\n    STEAM_USER=anonymous\r\n    STEAM_PASS=\"\"\r\n    STEAM_AUTH=\"\"\r\nelse\r\n    echo -e \"user set to ${STEAM_USER}\"\r\nfi\r\n\r\n## download and install steamcmd\r\ncd /tmp\r\nmkdir -p /mnt/server/steamcmd\r\ncurl -sSL -o steamcmd.tar.gz https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz\r\ntar -xzvf steamcmd.tar.gz -C /mnt/server/steamcmd\r\nmkdir -p /mnt/server/steamapps # Fix steamcmd disk write error when this folder is missing\r\ncd /mnt/server/steamcmd\r\n\r\n# SteamCMD fails otherwise for some reason, even running as root.\r\n# This is changed at the end of the install process anyways.\r\nchown -R root:root /mnt\r\nexport HOME=/mnt/server\r\n\r\n## install game using steamcmd\r\n./steamcmd.sh +force_install_dir /mnt/server +login ${STEAM_USER} ${STEAM_PASS} ${STEAM_AUTH} $( [[ \"${WINDOWS_INSTALL}\" == \"1\" ]] && printf %s '+@sSteamCmdForcePlatformType windows' ) +app_update ${SRCDS_APPID} ${EXTRA_FLAGS} validate +quit ## other flags may be needed depending on install. looking at you cs 1.6\r\n\r\n## set up 32 bit libraries\r\nmkdir -p /mnt/server/.steam/sdk32\r\ncp -v linux32/steamclient.so ../.steam/sdk32/steamclient.so\r\n\r\n## set up 64 bit libraries\r\nmkdir -p /mnt/server/.steam/sdk64\r\ncp -v linux64/steamclient.so ../.steam/sdk64/steamclient.so\r\n\r\n# Creating needed default files for the game\r\ncd /mnt/server/garrysmod/lua/autorun/server\r\necho '\r\n-- Docs: https://wiki.garrysmod.com/page/resource/AddWorkshop\r\n-- Place the ID of the workshop addon you want to be downloaded to people who join your server, not the collection ID\r\n-- Use https://beta.configcreator.com/create/gmod/resources.lua to easily create a list based on your collection ID\r\n\r\nresource.AddWorkshop( \"\" )\r\n' > workshop.lua\r\n\r\ncd /mnt/server/garrysmod/cfg\r\necho '\r\n// Please do not set RCon in here, use the startup parameters.\r\n\r\nhostname\t\t\"New Gmod Server\"\r\nsv_password\t\t\"\"\r\nsv_loadingurl   \"\"\r\nsv_downloadurl  \"\"\r\n\r\n// Steam Server List Settings\r\n// sv_location \"eu\"\r\nsv_region \"255\"\r\nsv_lan \"0\"\r\nsv_max_queries_sec_global \"30000\"\r\nsv_max_queries_window \"45\"\r\nsv_max_queries_sec \"5\"\r\n\r\n// Server Limits\r\nsbox_maxprops\t\t100\r\nsbox_maxragdolls\t5\r\nsbox_maxnpcs\t\t10\r\nsbox_maxballoons\t10\r\nsbox_maxeffects\t\t10\r\nsbox_maxdynamite\t10\r\nsbox_maxlamps\t\t10\r\nsbox_maxthrusters\t10\r\nsbox_maxwheels\t\t10\r\nsbox_maxhoverballs\t10\r\nsbox_maxvehicles\t20\r\nsbox_maxbuttons\t\t10\r\nsbox_maxsents\t\t20\r\nsbox_maxemitters\t5\r\nsbox_godmode\t\t0\r\nsbox_noclip\t\t    0\r\n\r\n// Network Settings - Please keep these set to default.\r\n\r\nsv_minrate\t\t75000\r\nsv_maxrate\t\t0\r\ngmod_physiterations\t2\r\nnet_splitpacket_maxrate\t45000\r\ndecalfrequency\t\t12 \r\n\r\n// Execute Ban Files - Please do not edit\r\nexec banned_ip.cfg \r\nexec banned_user.cfg \r\n\r\n// Add custom lines under here\r\n' > server.cfg",
                "entry": "bash",
                "container": "ghcr.io/pterodactyl/installers:debian",
                "extends": null
              },
              "created_at": "2025-03-20T07:43:02+00:00",
              "updated_at": "2025-03-20T07:43:02+00:00"
            }
          },
          {
            "object": "egg",
            "attributes": {
              "id": 11,
              "uuid": "432af826-aa94-496e-a269-7ea8f8b10739",
              "name": "Team Fortress 2",
              "nest": 2,
              "author": "support@pterodactyl.io",
              "description": "Team Fortress 2 is a team-based first-person shooter multiplayer video game developed and published by Valve Corporation. It is the sequel to the 1996 mod Team Fortress for Quake and its 1999 remake.",
              "docker_image": "ghcr.io/pterodactyl/games:source",
              "docker_images": {
                "ghcr.io/pterodactyl/games:source": "ghcr.io/pterodactyl/games:source"
              },
              "config": {
                "files": {},
                "startup": {
                  "done": "gameserver Steam ID"
                },
                "stop": "quit",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "./srcds_run -game tf -console -port {{SERVER_PORT}} +map {{SRCDS_MAP}} +ip 0.0.0.0 -strictportbind -norestart +sv_setsteamaccount {{STEAM_ACC}}",
              "script": {
                "privileged": true,
                "install": "#!/bin/bash\r\n# steamcmd Base Installation Script\r\n#\r\n# Server Files: /mnt/server\r\n# Image to install with is 'debian:buster-slim'\r\n\r\n##\r\n#\r\n# Variables\r\n# STEAM_USER, STEAM_PASS, STEAM_AUTH - Steam user setup. If a user has 2fa enabled it will most likely fail due to timeout. Leave blank for anon install.\r\n# WINDOWS_INSTALL - if it's a windows server you want to install set to 1\r\n# SRCDS_APPID - steam app id ffound here - https://developer.valvesoftware.com/wiki/Dedicated_Servers_List\r\n# EXTRA_FLAGS - when a server has extra glas for things like beta installs or updates.\r\n#\r\n##\r\n\r\n## just in case someone removed the defaults.\r\nif [ \"${STEAM_USER}\" == \"\" ]; then\r\n    echo -e \"steam user is not set.\\n\"\r\n    echo -e \"Using anonymous user.\\n\"\r\n    STEAM_USER=anonymous\r\n    STEAM_PASS=\"\"\r\n    STEAM_AUTH=\"\"\r\nelse\r\n    echo -e \"user set to ${STEAM_USER}\"\r\nfi\r\n\r\n## download and install steamcmd\r\ncd /tmp\r\nmkdir -p /mnt/server/steamcmd\r\ncurl -sSL -o steamcmd.tar.gz https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz\r\ntar -xzvf steamcmd.tar.gz -C /mnt/server/steamcmd\r\nmkdir -p /mnt/server/steamapps # Fix steamcmd disk write error when this folder is missing\r\ncd /mnt/server/steamcmd\r\n\r\n# SteamCMD fails otherwise for some reason, even running as root.\r\n# This is changed at the end of the install process anyways.\r\nchown -R root:root /mnt\r\nexport HOME=/mnt/server\r\n\r\n## install game using steamcmd\r\n./steamcmd.sh +force_install_dir /mnt/server +login ${STEAM_USER} ${STEAM_PASS} ${STEAM_AUTH} $( [[ \"${WINDOWS_INSTALL}\" == \"1\" ]] && printf %s '+@sSteamCmdForcePlatformType windows' ) +app_update ${SRCDS_APPID} ${EXTRA_FLAGS} validate +quit ## other flags may be needed depending on install. looking at you cs 1.6\r\n\r\n## set up 32 bit libraries\r\nmkdir -p /mnt/server/.steam/sdk32\r\ncp -v linux32/steamclient.so ../.steam/sdk32/steamclient.so\r\n\r\n## set up 64 bit libraries\r\nmkdir -p /mnt/server/.steam/sdk64\r\ncp -v linux64/steamclient.so ../.steam/sdk64/steamclient.so",
                "entry": "bash",
                "container": "ghcr.io/pterodactyl/installers:debian",
                "extends": null
              },
              "created_at": "2025-03-20T07:43:02+00:00",
              "updated_at": "2025-03-20T07:43:02+00:00"
            }
          }
        ]
      }
    }
  },
  {
    "id": 3,
    "uuid": "6fc0f934-acb8-4300-b4a5-028a0925268f",
    "author": "support@pterodactyl.io",
    "name": "Voice Servers",
    "description": "Voice servers such as Mumble and Teamspeak 3.",
    "created_at": "2025-03-20T07:43:02+00:00",
    "updated_at": "2025-03-20T07:43:02+00:00",
    "relationships": {
      "eggs": {
        "object": "list",
        "data": [
          {
            "object": "egg",
            "attributes": {
              "id": 12,
              "uuid": "3f85cb6c-e638-4829-8da4-84771d6a1326",
              "name": "Mumble Server",
              "nest": 3,
              "author": "support@pterodactyl.io",
              "description": "Mumble is an open source, low-latency, high quality voice chat software primarily intended for use while gaming.",
              "docker_image": "ghcr.io/parkervcp/yolks:voice_mumble",
              "docker_images": {
                "Mumble": "ghcr.io/parkervcp/yolks:voice_mumble"
              },
              "config": {
                "files": {
                  "murmur.ini": {
                    "parser": "ini",
                    "find": {
                      "database": "/home/container/murmur.sqlite",
                      "logfile": "/home/container/murmur.log",
                      "port": "{{server.build.default.port}}",
                      "host": "0.0.0.0",
                      "users": "{{server.build.env.MAX_USERS}}"
                    }
                  }
                },
                "startup": {
                  "done": "Server listening on"
                },
                "stop": "^C",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "mumble-server -fg -ini murmur.ini",
              "script": {
                "privileged": true,
                "install": "#!/bin/ash\r\n\r\nif [ ! -d /mnt/server/ ]; then\r\n    mkdir /mnt/server/\r\nfi\r\n\r\ncd /mnt/server\r\n\r\nFILE=/mnt/server/murmur.ini\r\nif [ -f \"$FILE\" ]; then\r\n    echo \"Config file already exists.\"\r\nelse \r\n    echo \"Downloading the config file.\"\r\n    apk add --no-cache murmur\r\n    cp /etc/murmur.ini /mnt/server/murmur.ini\r\n    apk del murmur\r\nfi\r\necho \"done\"",
                "entry": "ash",
                "container": "ghcr.io/pterodactyl/installers:alpine",
                "extends": null
              },
              "created_at": "2025-03-20T07:43:02+00:00",
              "updated_at": "2025-03-20T07:43:02+00:00"
            }
          },
          {
            "object": "egg",
            "attributes": {
              "id": 13,
              "uuid": "a913d5b4-c126-49da-ad48-242f1773bd24",
              "name": "Teamspeak3 Server",
              "nest": 3,
              "author": "support@pterodactyl.io",
              "description": "VoIP software designed with security in mind, featuring crystal clear voice quality, endless customization options, and scalabilty up to thousands of simultaneous users.",
              "docker_image": "ghcr.io/pterodactyl/yolks:debian",
              "docker_images": {
                "ghcr.io/pterodactyl/yolks:debian": "ghcr.io/pterodactyl/yolks:debian"
              },
              "config": {
                "files": {},
                "startup": {
                  "done": "listening on 0.0.0.0:"
                },
                "stop": "^C",
                "logs": {
                  "custom": true,
                  "location": "logs/ts3.log"
                },
                "file_denylist": [],
                "extends": null
              },
              "startup": "./ts3server default_voice_port={{SERVER_PORT}} query_port={{QUERY_PORT}} filetransfer_ip=0.0.0.0 filetransfer_port={{FILE_TRANSFER}} query_http_port={{QUERY_HTTP}} query_ssh_port={{QUERY_SSH}} query_protocols={{QUERY_PROTOCOLS_VAR}} license_accepted=1",
              "script": {
                "privileged": true,
                "install": "#!/bin/ash\r\n# TS3 Installation Script\r\n#\r\n# Server Files: /mnt/server\r\n\r\nif [ -z ${TS_VERSION} ] || [ ${TS_VERSION} == latest ]; then\r\n    TS_VERSION=$(curl -sSL https://teamspeak.com/versions/server.json | jq -r '.linux.x86_64.version')\r\nfi\r\n\r\ncd /mnt/server\r\n\r\necho -e \"getting files from http://files.teamspeak-services.com/releases/server/${TS_VERSION}/teamspeak3-server_linux_amd64-${TS_VERSION}.tar.bz2\" \r\ncurl -L http://files.teamspeak-services.com/releases/server/${TS_VERSION}/teamspeak3-server_linux_amd64-${TS_VERSION}.tar.bz2 | tar -xvj --strip-components=1\r\ncp ./redist/libmariadb.so.2 ./",
                "entry": "ash",
                "container": "ghcr.io/pterodactyl/installers:alpine",
                "extends": null
              },
              "created_at": "2025-03-20T07:43:02+00:00",
              "updated_at": "2025-03-20T07:43:02+00:00"
            }
          }
        ]
      }
    }
  },
  {
    "id": 4,
    "uuid": "8bc6b893-6b25-433f-9f44-b4691d3ebdd3",
    "author": "support@pterodactyl.io",
    "name": "Rust",
    "description": "Rust - A game where you must fight to survive.",
    "created_at": "2025-03-20T07:43:02+00:00",
    "updated_at": "2025-03-20T07:43:02+00:00",
    "relationships": {
      "eggs": {
        "object": "list",
        "data": [
          {
            "object": "egg",
            "attributes": {
              "id": 14,
              "uuid": "58b8a16b-3087-4b8f-bf43-a9565fb33c4e",
              "name": "Rust",
              "nest": 4,
              "author": "support@pterodactyl.io",
              "description": "The only aim in Rust is to survive. To do this you will need to overcome struggles such as hunger, thirst and cold. Build a fire. Build a shelter. Kill animals for meat. Protect yourself from other players, and kill them for meat. Create alliances with other players and form a town. Do whatever it takes to survive.",
              "docker_image": "ghcr.io/pterodactyl/games:rust",
              "docker_images": {
                "ghcr.io/pterodactyl/games:rust": "ghcr.io/pterodactyl/games:rust"
              },
              "config": {
                "files": {},
                "startup": {
                  "done": "Server startup complete"
                },
                "stop": "quit",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "./RustDedicated -batchmode +server.port {{SERVER_PORT}} +server.queryport {{QUERY_PORT}} +server.identity \"rust\" +rcon.port {{RCON_PORT}} +rcon.web true +server.hostname \\\"{{HOSTNAME}}\\\" +server.level \\\"{{LEVEL}}\\\" +server.description \\\"{{DESCRIPTION}}\\\" +server.url \\\"{{SERVER_URL}}\\\" +server.headerimage \\\"{{SERVER_IMG}}\\\" +server.logoimage \\\"{{SERVER_LOGO}}\\\" +server.maxplayers {{MAX_PLAYERS}} +rcon.password \\\"{{RCON_PASS}}\\\" +server.saveinterval {{SAVEINTERVAL}} +app.port {{APP_PORT}}  $( [ -z ${MAP_URL} ] && printf %s \"+server.worldsize \\\"{{WORLD_SIZE}}\\\" +server.seed \\\"{{WORLD_SEED}}\\\"\" || printf %s \"+server.levelurl {{MAP_URL}}\" ) {{ADDITIONAL_ARGS}}",
              "script": {
                "privileged": true,
                "install": "#!/bin/bash\r\n# steamcmd Base Installation Script\r\n#\r\n# Server Files: /mnt/server\r\n\r\nSRCDS_APPID=258550\r\n\r\n## just in case someone removed the defaults.\r\nif [ \"${STEAM_USER}\" == \"\" ]; then\r\n    echo -e \"steam user is not set.\\n\"\r\n    echo -e \"Using anonymous user.\\n\"\r\n    STEAM_USER=anonymous\r\n    STEAM_PASS=\"\"\r\n    STEAM_AUTH=\"\"\r\nelse\r\n    echo -e \"user set to ${STEAM_USER}\"\r\nfi\r\n\r\n## download and install steamcmd\r\ncd /tmp\r\nmkdir -p /mnt/server/steamcmd\r\ncurl -sSL -o steamcmd.tar.gz https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz\r\ntar -xzvf steamcmd.tar.gz -C /mnt/server/steamcmd\r\nmkdir -p /mnt/server/steamapps # Fix steamcmd disk write error when this folder is missing\r\ncd /mnt/server/steamcmd\r\n\r\n# SteamCMD fails otherwise for some reason, even running as root.\r\n# This is changed at the end of the install process anyways.\r\nchown -R root:root /mnt\r\nexport HOME=/mnt/server\r\n\r\n## install game using steamcmd\r\n./steamcmd.sh +force_install_dir /mnt/server +login ${STEAM_USER} ${STEAM_PASS} ${STEAM_AUTH} +app_update ${SRCDS_APPID} ${EXTRA_FLAGS} validate +quit ## other flags may be needed depending on install. looking at you cs 1.6\r\n\r\n## set up 32 bit libraries\r\nmkdir -p /mnt/server/.steam/sdk32\r\ncp -v linux32/steamclient.so ../.steam/sdk32/steamclient.so\r\n\r\n## set up 64 bit libraries\r\nmkdir -p /mnt/server/.steam/sdk64\r\ncp -v linux64/steamclient.so ../.steam/sdk64/steamclient.so",
                "entry": "bash",
                "container": "ghcr.io/pterodactyl/installers:debian",
                "extends": null
              },
              "created_at": "2025-03-20T07:43:02+00:00",
              "updated_at": "2025-03-20T07:43:02+00:00"
            }
          }
        ]
      }
    }
  },
  {
    "id": 5,
    "uuid": "d136c048-602f-4858-87e4-627a05c9f265",
    "author": "loyalhoodro@gmail.com",
    "name": "Premade Eggs",
    "description": null,
    "created_at": "2025-03-20T08:26:46+00:00",
    "updated_at": "2025-03-20T08:26:46+00:00",
    "relationships": {
      "eggs": {
        "object": "list",
        "data": [
          {
            "object": "egg",
            "attributes": {
              "id": 19,
              "uuid": "7ef50ca6-d94b-4383-a8ab-4e7ec1118e2a",
              "name": "Uptime Kuma",
              "nest": 5,
              "author": "eggs@goover.dev",
              "description": "Uptime Kuma is an easy-to-use self-hosted monitoring tool.",
              "docker_image": "ghcr.io/parkervcp/apps:uptimekuma",
              "docker_images": {
                "ghcr.io/parkervcp/apps:uptimekuma": "ghcr.io/parkervcp/apps:uptimekuma"
              },
              "config": {
                "files": {},
                "startup": {
                  "done": "[SERVER] INFO: Listening on "
                },
                "stop": "^^C",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then npm run setup; fi; /usr/local/bin/node /home/container/server/server.js --port={{SERVER_PORT}}",
              "script": {
                "privileged": true,
                "install": "#!/bin/ash\r\n# Uptime Kuma App Installation Script\r\n#\r\n# Server Files: /mnt/server\r\napk update\r\napk add --no-cache git curl jq file unzip make gcc g++ python3 python3-dev libtool\r\napk add --no-cache git-lfs --repository=https://dl-cdn.alpinelinux.org/alpine/latest-stable/community\r\n\r\n## npm update to latest\r\necho -e \"Updating npm to latest....\\n\"\r\nif [ -d \"/mnt/server/node_modules\" ]; then\r\n    rm -fR /mnt/server/node_modules\r\n    npm cache verify\r\nfi\r\nnpm install -g npm@latest\r\n\r\n## Uptime Kuma install & update\r\nmkdir -p /mnt/server\r\ncd /mnt/server\r\ngit config --global --add safe.directory /mnt/server\r\n\r\nif [ -d .git ]; then\r\n    echo -e \"Updating Uptime Kuma....\\n \"\r\n    npm run setup\r\nelse\r\n    echo -e \"Download and installing Uptime Kuma...\\n\"   \r\n    git clone https://github.com/louislam/uptime-kuma.git .\r\n    npm run setup\r\nfi\r\n\r\n## only create dir, when .git is present to prevent errors\r\nif [ -d .git ]; then\r\n    mkdir -p /mnt/server/data\r\nfi\r\n\r\nif [ ! -f \"/mnt/server/data/kuma.db\" ]; then\r\n    cp /mnt/server/db/kuma.db /mnt/server/data/kuma.db\r\nfi\r\n\r\n## install end\r\necho -e \"-----------------------------------------\"\r\necho -e \"Installation completed...\"\r\necho -e \"-----------------------------------------\"\r\nexit 0",
                "entry": "ash",
                "container": "node:18-alpine",
                "extends": null
              },
              "created_at": "2025-03-20T08:38:28+00:00",
              "updated_at": "2025-03-20T08:38:28+00:00"
            }
          }
        ]
      }
    }
  },
  {
    "id": 6,
    "uuid": "129df6c1-5694-4330-a1c3-1b2f36032e86",
    "author": "loyalhoodro@gmail.com",
    "name": "Grand Theft Auto V",
    "description": null,
    "created_at": "2025-03-20T08:37:25+00:00",
    "updated_at": "2025-03-20T08:37:25+00:00",
    "relationships": {
      "eggs": {
        "object": "list",
        "data": [
          {
            "object": "egg",
            "attributes": {
              "id": 17,
              "uuid": "e8e02a88-88cb-431c-bc96-7f181135c06e",
              "name": "Rage.MP",
              "nest": 6,
              "author": "noreply.waypointhosting@gmail.com",
              "description": "https://rage.mp/\r\n\r\nModified to work with the latest version of RAGE:MP\r\nWill automatically install linux bridge.\r\n**This server requires 2 ports to be added for the server. the main port and the next (port+1) as ports for the server.",
              "docker_image": "ghcr.io/parkervcp/yolks:debian",
              "docker_images": {
                "ghcr.io/parkervcp/yolks:debian": "ghcr.io/parkervcp/yolks:debian"
              },
              "config": {
                "files": {
                  "conf.json": {
                    "parser": "json",
                    "find": {
                      "port": "{{server.build.default.port}}",
                      "bind": "0.0.0.0",
                      "name": "{{server.build.env.SERVER_NAME}}",
                      "maxplayers": "{{server.build.env.MAX_PLAYERS}}"
                    }
                  }
                },
                "startup": {
                  "done": "The server is ready to accept connections"
                },
                "stop": "^X",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "./ragemp-server",
              "script": {
                "privileged": true,
                "install": "#!/bin/bash\r\n\r\nmkdir -p /mnt/server/tmp\r\ncd /mnt/server\r\n\r\nrm -rf bin/\r\nrm -rf dotnet/\r\nrm ragemp-server\r\n\r\ncd /mnt/server/tmp\r\necho \"Downloading rage.mp\"\r\ncurl -sSL -o linux_x64.tar.gz https://cdn.rage.mp/updater/prerelease/server-files/linux_x64.tar.gz\r\ntar -xzvf linux_x64.tar.gz\r\nrm linux_x64.tar.gz\r\ncd /mnt/server/tmp/ragemp-srv/\r\nmv * /mnt/server\r\n\r\ncd /mnt/server\r\nchmod +x ./ragemp-server\r\nrm -rf /mnt/server/tmp\r\n\r\nif [ -e conf.json ]; then\r\n    echo \"server config file exists\"\r\nelse\r\n    echo \"Downloading default rage.mp config\"\r\n    curl https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/gta/ragemp/conf.json >> conf.json\r\nfi\r\n\r\necho \"install complete\"\r\n\r\nexit 0",
                "entry": "bash",
                "container": "ghcr.io/parkervcp/installers:debian",
                "extends": null
              },
              "created_at": "2025-03-20T08:37:50+00:00",
              "updated_at": "2025-03-20T08:37:50+00:00"
            }
          },
          {
            "object": "egg",
            "attributes": {
              "id": 18,
              "uuid": "e9b34ebc-c68b-4c7a-b2ce-f3dbeedd64a3",
              "name": "FiveM",
              "nest": 6,
              "author": "parker@parkervcp.com",
              "description": "A new FiveM egg for the latest builds due to recent changes in FiveM",
              "docker_image": "ghcr.io/parkervcp/yolks:debian",
              "docker_images": {
                "ghcr.io/parkervcp/yolks:debian": "ghcr.io/parkervcp/yolks:debian"
              },
              "config": {
                "files": {
                  "server.cfg": {
                    "parser": "file",
                    "find": {
                      "endpoint_add_tcp": "endpoint_add_tcp \"0.0.0.0:{{server.build.default.port}}\"",
                      "endpoint_add_udp": "endpoint_add_udp \"0.0.0.0:{{server.build.default.port}}\"",
                      "sv_hostname": "sv_hostname \"{{server.build.env.SERVER_HOSTNAME}}\"",
                      "set sv_licenseKey": "set sv_licenseKey {{server.build.env.FIVEM_LICENSE}}",
                      "set steam_webApiKey": "set steam_webApiKey {{server.build.env.STEAM_WEBAPIKEY}}",
                      "sv_maxclients": "sv_maxclients {{server.build.env.MAX_PLAYERS}}"
                    }
                  }
                },
                "startup": {
                  "done": "succeeded. Welcome!"
                },
                "stop": "quit",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "$(pwd)/alpine/opt/cfx-server/ld-musl-x86_64.so.1 --library-path \"$(pwd)/alpine/usr/lib/v8/:$(pwd)/alpine/lib/:$(pwd)/alpine/usr/lib/\" -- $(pwd)/alpine/opt/cfx-server/FXServer +set citizen_dir $(pwd)/alpine/opt/cfx-server/citizen/ +set sv_licenseKey {{FIVEM_LICENSE}} +set steam_webApiKey {{STEAM_WEBAPIKEY}} +set sv_maxplayers {{MAX_PLAYERS}} +set serverProfile default +set txAdminPort {{TXADMIN_PORT}} $( [ \"$TXADMIN_ENABLE\" == \"1\" ] || printf %s '+exec server.cfg' )",
              "script": {
                "privileged": true,
                "install": "#!/bin/bash\r\n# FiveM Installation Script\r\n#\r\n# Server Files: /mnt/server\r\napt update -y\r\napt install -y tar xz-utils file jq\r\n\r\nmkdir -p /mnt/server/resources\r\n\r\ncd /mnt/server\r\n\r\necho \"updating citizenfx resource files\"\r\ngit clone https://github.com/citizenfx/cfx-server-data.git /tmp\r\ncp -Rf /tmp/resources/* resources/\r\n\r\nRELEASE_PAGE=$(curl -sSL https://runtime.fivem.net/artifacts/fivem/build_proot_linux/master/)\r\nCHANGELOGS_PAGE=$(curl -sSL https://changelogs-live.fivem.net/api/changelog/versions/linux/server)\r\n\r\nif [[ \"${FIVEM_VERSION}\" == \"recommended\" ]] || [[ -z ${FIVEM_VERSION} ]]; then\r\n  DOWNLOAD_LINK=$(echo $CHANGELOGS_PAGE | jq -r '.recommended_download')\r\nelif [[ \"${FIVEM_VERSION}\" == \"latest\" ]]; then\r\n  DOWNLOAD_LINK=$(echo $CHANGELOGS_PAGE | jq -r '.latest_download')\r\nelse\r\n  VERSION_LINK=$(echo -e \"${RELEASE_PAGE}\" | grep -Eo '\".*/*.tar.xz\"' | grep -Eo '\".*/*.tar.xz\"' | sed 's/\\\"//g'  | sed 's/\\.\\///1' | grep -i \"${FIVEM_VERSION}\" | grep -o =.* |  tr -d '=')\r\n  if [[ \"${VERSION_LINK}\" == \"\" ]]; then\r\n    echo -e \"defaulting to recommedned as the version requested was invalid.\"\r\n    DOWNLOAD_LINK=$(echo $CHANGELOGS_PAGE | jq -r '.recommended_download')\r\n  else\r\n    DOWNLOAD_LINK=$(echo https://runtime.fivem.net/artifacts/fivem/build_proot_linux/master/${VERSION_LINK})\r\n  fi\r\nfi\r\n\r\nif [ ! -z \"${DOWNLOAD_URL}\" ]; then\r\n  if curl --output /dev/null --silent --head --fail ${DOWNLOAD_URL}; then\r\n    echo -e \"link is valid. setting download link to ${DOWNLOAD_URL}\"\r\n    DOWNLOAD_LINK=${DOWNLOAD_URL}\r\n  else\r\n    echo -e \"link is invalid closing out\"\r\n    exit 2\r\n  fi\r\nfi\r\n\r\necho -e \"Running curl -sSL ${DOWNLOAD_LINK} -o ${DOWNLOAD_LINK##*/}\"\r\n\r\ncurl -sSL ${DOWNLOAD_LINK} -o ${DOWNLOAD_LINK##*/}\r\n\r\necho \"Extracting fivem files\"\r\n\r\nFILETYPE=$(file -F ',' ${DOWNLOAD_LINK##*/} | cut -d',' -f2 | cut -d' ' -f2)\r\nif [ \"$FILETYPE\" == \"gzip\" ]; then\r\n  tar xzvf ${DOWNLOAD_LINK##*/}\r\nelif [ \"$FILETYPE\" == \"Zip\" ]; then\r\n  unzip ${DOWNLOAD_LINK##*/}\r\nelif [ \"$FILETYPE\" == \"XZ\" ]; then\r\n  tar xvf ${DOWNLOAD_LINK##*/}\r\nelse\r\n  echo -e \"unknown filetype. Exiting\"\r\n  exit 2\r\nfi\r\n\r\nrm -rf ${DOWNLOAD_LINK##*/} run.sh\r\n\r\nif [ -e server.cfg ]; then\r\n  echo \"Skipping downloading default server config file as one already exists\"\r\nelse\r\n  echo \"Downloading default fivem config\"\r\n  curl https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/gta/fivem/server.cfg >>server.cfg\r\nfi\r\n\r\nmkdir -p logs/\r\n\r\necho \"install complete\"",
                "entry": "bash",
                "container": "ghcr.io/parkervcp/installers:debian",
                "extends": null
              },
              "created_at": "2025-03-20T08:38:12+00:00",
              "updated_at": "2025-03-20T08:38:12+00:00"
            }
          }
        ]
      }
    }
  },
  {
    "id": 7,
    "uuid": "225d2b54-bb71-440c-8239-3dab09505b93",
    "author": "loyalhoodro@gmail.com",
    "name": "Dashbaord egg",
    "description": "by prathmesh",
    "created_at": "2025-03-20T08:59:04+00:00",
    "updated_at": "2025-03-20T08:59:04+00:00",
    "relationships": {
      "eggs": {
        "object": "list",
        "data": [
          {
            "object": "egg",
            "attributes": {
              "id": 21,
              "uuid": "6ae2ebd9-f2b7-41bc-889b-522dee0ef746",
              "name": "node.js generic",
              "nest": 7,
              "author": "parker@parkervcp.com",
              "description": "a generic node.js egg\r\n\r\nThis will clone a git repo. it defaults to master if no branch is specified.\r\n\r\nInstalls the node_modules on install. If you set user_upload then I assume you know what you are doing.",
              "docker_image": "ghcr.io/parkervcp/yolks:nodejs_22",
              "docker_images": {
                "Nodejs 22": "ghcr.io/parkervcp/yolks:nodejs_22",
                "Nodejs 21": "ghcr.io/parkervcp/yolks:nodejs_21",
                "Nodejs 20": "ghcr.io/parkervcp/yolks:nodejs_20",
                "Nodejs 19": "ghcr.io/parkervcp/yolks:nodejs_19",
                "Nodejs 18": "ghcr.io/parkervcp/yolks:nodejs_18",
                "Nodejs 17": "ghcr.io/parkervcp/yolks:nodejs_17",
                "Nodejs 16": "ghcr.io/parkervcp/yolks:nodejs_16",
                "Nodejs 14": "ghcr.io/parkervcp/yolks:nodejs_14",
                "Nodejs 12": "ghcr.io/parkervcp/yolks:nodejs_12"
              },
              "config": {
                "files": {},
                "startup": {
                  "done": [
                    "change this text 1",
                    "change this text 2"
                  ]
                },
                "stop": "^C",
                "logs": [],
                "file_denylist": [],
                "extends": null
              },
              "startup": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; if [[ \"${MAIN_FILE}\" == \"*.js\" ]]; then /usr/local/bin/node \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; else /usr/local/bin/ts-node --esm \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; fi",
              "script": {
                "privileged": true,
                "install": "#!/bin/bash\r\n# NodeJS App Installation Script\r\n#\r\n# Server Files: /mnt/server\r\napt update\r\napt install -y git curl jq file unzip make gcc g++ python3 python3-dev python3-pip libtool\r\n\r\necho -e \"updating npm. please wait...\"\r\nnpm install npm@latest --location=global\r\n\r\nmkdir -p /mnt/server\r\ncd /mnt/server\r\n\r\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n    echo -e \"assuming user knows what they are doing have a good day.\"\r\n    exit 0\r\nfi\r\n\r\n## add git ending if it's not on the address\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=${GIT_ADDRESS}.git\r\nfi\r\n\r\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo -e \"using anon api call\"\r\nelse\r\n    GIT_ADDRESS=\"https://${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d/ -f3-)\"\r\nfi\r\n\r\n## pull git js repo\r\nif [ \"$(ls -A /mnt/server)\" ]; then\r\n    echo -e \"/mnt/server directory is not empty.\"\r\n    if [ -d .git ]; then\r\n        echo -e \".git directory exists\"\r\n        if [ -f .git/config ]; then\r\n            echo -e \"loading info from git config\"\r\n            ORIGIN=$(git config --get remote.origin.url)\r\n        else\r\n            echo -e \"files found with no git config\"\r\n            echo -e \"closing out without touching things to not break anything\"\r\n            exit 10\r\n        fi\r\n    fi\r\n\r\n    if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n        echo \"pulling latest from github\"\r\n        git pull\r\n    fi\r\nelse\r\n    echo -e \"/mnt/server is empty.\\ncloning files into repo\"\r\n    if [ -z ${BRANCH} ]; then\r\n        echo -e \"cloning default branch\"\r\n        git clone ${GIT_ADDRESS} .\r\n    else\r\n        echo -e \"cloning ${BRANCH}'\"\r\n        git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n    fi\r\n\r\nfi\r\n\r\necho \"Installing nodejs packages\"\r\nif [[ ! -z ${NODE_PACKAGES} ]]; then\r\n    /usr/local/bin/npm install ${NODE_PACKAGES}\r\nfi\r\n\r\nif [ -f /mnt/server/package.json ]; then\r\n    /usr/local/bin/npm install --production\r\nfi\r\n\r\necho -e \"install complete\"\r\nexit 0",
                "entry": "bash",
                "container": "node:18-bookworm-slim",
                "extends": null
              },
              "created_at": "2025-03-20T09:00:13+00:00",
              "updated_at": "2025-03-20T09:00:46+00:00"
            }
          }
        ]
      }
    }
  }
]