login.html file:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>Login - Animated Auth</title>
</head>
<body>
    <div class="main1">
        <div class="circle-center"></div>
        <div class="main2">
            <div class="label-b">
                <div class="labels" role="navigation">
                    <p>Login</p><a href="register.html" aria-label="Switch to Register">Register</a>
                </div>
            </div>
            <div class="main">
                <div class="fields">
                    <input type="email" placeholder="Email" class="email box" id="email" required aria-label="Email">
                    <input type="password" placeholder="Password" class="password ox" id="password" required aria-label="Password">
                </div>
                <div class="second">
                    <select name="remember" id="select" aria-label="Remember me">
                        <option value="yes">Remember me</option>
                        <option value="no">Don't remember</option>
                    </select>
                    <a href="forgot.html" aria-label="Forgot Password">Forgot Password?</a>
                </div>
                <div class="tnc">
                    <input type="checkbox" name="agree" id="checkbox" required>
                    <p>I agree Terms & Conditions</p>
                </div>
                <div class="buttons">
                    <button type="button" id="loginButton" aria-label="Login">Login</button>
                </div>
            </div>
        </div>
    </div>
    <script>
        document.getElementById('loginButton').addEventListener('click', function() {
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const remember = document.getElementById('select').value;
            const agreeCheck = document.getElementById('checkbox').checked;
            
            // Check if terms are agreed
            if (!agreeCheck) {
                alert('Please agree to Terms & Conditions');
                return;
            }
            
            // Get stored users from localStorage
            const users = JSON.parse(localStorage.getItem('users')) || [];
            
            // Find user
            const user = users.find(u => u.email === email);
            
            if (!user) {
                alert('User not found! Please register first.');
                return;
            }
            
            if (user.password !== password) {
                alert('Incorrect password!');
                return;
            }
            
            // Store login status if remember is selected
            if (remember === 'yes') {
                localStorage.setItem('loggedInUser', JSON.stringify(user));
            } else {
                sessionStorage.setItem('loggedInUser', JSON.stringify(user));
            }
            
            alert('Login successful!');
            // Redirect to dashboard or home page
            // window.location.href = 'dashboard.html';
        });

        // Check if user is already logged in
        window.onload = function() {
            const loggedInUser = localStorage.getItem('loggedInUser') || sessionStorage.getItem('loggedInUser');
            if (loggedInUser) {
                // Redirect to dashboard or home page
                // window.location.href = 'dashboard.html';
            }
        }
    </script>
</body>
</html>

Register.html file:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>Animated Auth</title>
</head>
<body>
    <div class="main1">
        <div class="main2">
            <div class="label-b">
                <div class="labels ls">
                    <a href="login.html">Login</a><p>Register</p>
                </div>
            </div>
            <div class="main">
                <div class="fields">
                    <input type="text" placeholder="Username" class="username box" id="username">
                    <input type="email" placeholder="Email" class="email-r box" id="email">
                    <div class="second snn">
                        <input type="text" placeholder="First Name" class="fn" id="firstName">
                        <input type="text" placeholder="Last Name" class="ln" id="lastName">
                    </div>
                    <input type="password" placeholder="Password" class="password box" id="password">
                    <input type="password" placeholder="Confirm Password" id="confirmPassword">
                </div>
                <div class="tnc">
                    <input type="checkbox" name="agree" id="checkbox"> <p>I agree Terms & Conditions</p>
                </div>
                <div class="buttons">
                    <button type="button" id="registerButton">Register</button>
                </div>
            </div>
        </div>
    </div>
    <script>
        document.getElementById('registerButton').addEventListener('click', function() {
            const username = document.getElementById('username').value;
            const email = document.getElementById('email').value;
            const firstName = document.getElementById('firstName').value;
            const lastName = document.getElementById('lastName').value;
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            const agreeCheck = document.getElementById('checkbox').checked;
            
            // Basic validation
            if (!username || !email || !firstName || !lastName || !password || !confirmPassword) {
                alert('Please fill in all fields');
                return;
            }

            if (!agreeCheck) {
                alert('Please agree to Terms & Conditions');
                return;
            }
            
            if (password !== confirmPassword) {
                alert('Passwords do not match!');
                return;
            }
            
            if (password.length < 6) {
                alert('Password must be at least 6 characters long!');
                return;
            }
            
            // Email validation
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                alert('Please enter a valid email address');
                return;
            }
            
            // Get existing users or initialize empty array
            const users = JSON.parse(localStorage.getItem('users')) || [];
            
            // Check if user already exists
            if (users.find(u => u.email === email)) {
                alert('User with this email already exists!');
                return;
            }
            
            // Create new user object
            const newUser = {
                username,
                email,
                firstName,
                lastName,
                password,
                createdAt: new Date().toISOString()
            };
            
            // Add to users array
            users.push(newUser);
            
            // Save back to localStorage
            localStorage.setItem('users', JSON.stringify(users));
            
            alert('Registration successful! Please login.');
            window.location.href = 'login.html';
        });

        // Live password validation
        document.getElementById('confirmPassword').addEventListener('input', function() {
            const password = document.getElementById('password').value;
            const confirmPassword = this.value;
            
            if (password && confirmPassword && password !== confirmPassword) {
                this.style.borderColor = 'red';
            } else {
                this.style.borderColor = '';
            }
        });
    </script>
</body>
</html>

Style.css file:

:root {
    --primary-color: rgb(0, 89, 255);
}

@keyframes rainbowColors {
    0% { --primary-color: rgb(0, 89, 255); }    /* Blue */
    14% { --primary-color: rgb(75, 0, 130); }   /* Indigo */
    28% { --primary-color: rgb(238, 130, 238); }/* Violet */
    42% { --primary-color: rgb(255, 0, 0); }    /* Red */
    56% { --primary-color: rgb(255, 165, 0); }  /* Orange */
    70% { --primary-color: rgb(255, 255, 0); }  /* Yellow */
    84% { --primary-color: rgb(0, 255, 0); }    /* Green */
    100% { --primary-color: rgb(0, 89, 255); }  /* Back to Blue */
}

* {
    margin: 0;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    color: white;
}

/* Remove solid backgrounds that might block circles */
body, .main, .label-b, .main1, .main2 {
    background: transparent;
}

/* Make main div fully transparent with improved glass effect */
.main {
    display: grid;
    justify-content: center;
    align-items: center;
    margin-top: 15%;
    animation: slideIn 0.5s ease forwards;
    backdrop-filter: blur(8px);
    background: rgba(16, 5, 34, 0); /* Nearly transparent background */
    border-radius: 20px;
    padding: 15px;
    position: relative;
    z-index: 10;
    border: 1px solid rgba(var(--primary-color), 0.2);
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
}

.label-b {
    display: grid;
    justify-content: center;
    align-items: center;
    margin-top: 15%;
    margin-bottom: -10%;
}

.labels {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
    border: 1px solid var(--primary-color);
    height: 50px;
    border-radius: 20px;
    width: 300px;
    position: relative;
    overflow: hidden;
    backdrop-filter: blur(8px);
    background: rgba(16, 5, 34, 0.5);
    z-index: 10;
}

/* Add sliding background element */
.labels::before {
    content: '';
    position: absolute;
    width: 140px;
    height: 35px;
    background-color: var(--primary-color);
    border-radius: 15px;
    transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 0;
}

/* Position the background element for login page */
.labels:not(.ls)::before {
    left: 10px;
    top: 7px;
}

/* When hovering over Register on login page */
.labels:not(.ls) a:hover ~ p::before,
.labels:not(.ls):hover::before {
    transform: translateX(140px);
}

/* Position the background element for register page */
.labels.ls::before {
    right: 10px;
    top: 7px;
}

/* When hovering over Login on register page */
.labels.ls a:hover ~ p::before,
.labels.ls:hover::before {
    transform: translateX(-140px);
}

/* Remove background from p element since we're using ::before */
.labels p {
    background-color: transparent;
    width: 150px;
    height: 35px;
    align-items: center;
    justify-content: center;
    display: flex;
    border-radius: 15px;
    margin-left: 10px;
    transition: all 0.5s ease;
    position: relative;
    z-index: 1;
    color: white;
}

/* Adjust text color for better visibility */
.labels p {
    color: white;
}

.labels a {
    align-items: center;
    justify-content: center;
    display: flex;
    text-decoration: none;
    margin-right: 10px;
    width: 150px;
    height: 35px;
    border-radius: 30px;
    color: var(--primary-color);
    position: relative;
    z-index: 1;
    transition: all 0.3s ease;
}

.labels a:hover {
    color: white;
}

.ls p {
    margin-left: -20px;
    margin-right: 10px;
}

.fields {
    display: grid;
    justify-content: center;
    align-items: center;
}

/* Improve input fields for better readability */
.fields input, .second select, .tnc {
    background: rgba(16, 5, 34, 0.35);
    backdrop-filter: blur(8px);
    border: 1px solid var(--primary-color);
}

.fields input {
    width: 230px;
    margin-bottom: 10px;
    height: 20px;
    padding: 10px;
    transition: all 0.3s ease;
    color: white;
}

.fields input:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 10px var(--primary-color);
    transform: translateY(-2px);
}

.email, .username {
    border-top-left-radius: 20px;
    border-top-right-radius: 20px;
}

.fields .fn {
    width: 96px;
}

.fields .ln {
    width: 104px;
}

.tnc {
    display: flex;
    justify-content: space-between;
    border: 1px solid var(--primary-color);
    height: 20px;
    padding: 10px;
    transition: all 0.3s ease;
}

.tnc:hover {
    background: rgba(0, 89, 255, 0.1);
}

.tnc p {
    color: var(--primary-color);
}

.tnc input[type="checkbox"] {
    cursor: pointer;
    transform: scale(1.2);
}

.second {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
}

.snn {
    margin-bottom: -1px;
    margin-top: -1px;
}

.second select {
    width: 85px;
    height: 40px;
    padding: 10px;
    border: 1px solid var(--primary-color);
    color: white;
    margin-top: 1.5px;
    transition: all 0.3s ease;
    cursor: pointer;
}

.second select:hover {
    background: rgba(0, 89, 255, 0.1);
}

.second option {
    color: white;
    text-decoration: double;
}

.second a {
    border: 1px solid var(--primary-color);
    padding: 10px;
    text-decoration: none;
    color: black;
    background: var(--primary-color);
    transition: all 0.3s ease;
}

.second a:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 89, 255, 0.3);
}

.buttons {
    display: grid;
    justify-content: center;
    align-items: center;
}

.buttons button {
    width: 252px;
    margin-top: 10px;
    height: 40px;
    border-bottom-right-radius: 20px;
    border-bottom-left-radius: 20px;
    border: 1px solid var(--primary-color);
    background: var(--primary-color);
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
}

.buttons button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 89, 255, 0.4);
    background: rgb(30, 110, 255);
}

.buttons button:active {
    transform: translateY(0);
}

/* Add animations for form appearance */
@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Input field focus animation */
.fields input::placeholder {
    transition: all 0.3s ease;
}

.fields input:focus::placeholder {
    opacity: 0.7;
    transform: translateX(10px);
}

/* Error state styling */
.fields input.error {
    border-color: #ff3860;
    animation: shake 0.3s ease-in-out;
}

@keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-10px); }
    75% { transform: translateX(10px); }
}

/* Success state styling */
.fields input.success {
    border-color: #23d160;
}

/* Rotating circles */
.main1 {
    min-height: 100vh;
    animation: rainbowColors 14s linear infinite;
    position: relative;
    overflow: hidden;
    width: 100%;
}

.main2 {
    position: relative;
    z-index: 2;
    animation: pageTransition 0.5s ease forwards;
}

/* Enhance the rotating circles */
.main1::before,
.main1::after {
    content: '';
    position: absolute;
    width: 600px; /* Larger size */
    height: 600px;
    border-radius: 50%;
    background: linear-gradient(var(--primary-color), rgba(255, 255, 255, 0.05));
    animation: rotate 15s linear infinite;
    filter: blur(25px);
    opacity: 0.85; /* Increase opacity */
    z-index: 1;
}

.main1::before {
    top: -200px;
    right: -200px;
    z-index: -1;
}

.main1::after {
    bottom: -200px;
    left: -200px;
    animation-direction: reverse;
    z-index: -1;
}

@keyframes rotate {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Smooth page transition */
@keyframes pageTransition {
    0% { 
        opacity: 0;
        transform: scale(0.9);
    }
    100% { 
        opacity: 1;
        transform: scale(1);
    }
}

/* Background gradient animation */
body {
    background: rgb(10, 3, 20);
    background: linear-gradient(
        45deg,
        rgb(10, 3, 20),
        rgb(18, 6, 38),
        rgb(10, 3, 20)
    );
    background-size: 400% 400%;
    animation: gradientBG 15s ease infinite;
    min-height: 100vh;
    margin: 0;
    padding: 0;
}

@keyframes gradientBG {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

/* Add a third decorative circle for more visual interest */
.main1 .circle-center {
    content: '';
    position: absolute;
    width: 350px;
    height: 350px;
    border-radius: 50%;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: radial-gradient(var(--primary-color), transparent 70%);
    filter: blur(40px);
    opacity: 0.3; /* Increase opacity */
    z-index: 0;
    animation: pulse 8s ease-in-out infinite;
}

@keyframes pulse {
    0%, 100% { transform: translate(-50%, -50%) scale(1); }
    50% { transform: translate(-50%, -50%) scale(1.2); }
}